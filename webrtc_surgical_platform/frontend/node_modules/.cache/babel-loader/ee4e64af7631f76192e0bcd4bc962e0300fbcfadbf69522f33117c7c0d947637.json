{"ast":null,"code":"import _objectSpread from\"/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import io from'socket.io-client';class WebRTCService{constructor(){this.socket=null;this.peerConnections=new Map();// userId -> RTCPeerConnection\nthis.localStream=null;this.remoteStreams=new Map();// userId -> MediaStream\nthis.iceServers=[];this.currentRoom=null;this.userId=null;this.listeners=new Map();// eventName -> Set of callbacks\n// Video call state\nthis.isInVideoCall=false;this.localVideoEnabled=true;this.localAudioEnabled=true;this.roomParticipants=new Map();// userId -> participant info\n// WebRTC configuration\nthis.rtcConfiguration={iceServers:[{urls:'stun:stun.l.google.com:19302'}],iceCandidatePoolSize:10,bundlePolicy:'max-bundle',rtcpMuxPolicy:'require'};// Data channel configuration\nthis.dataChannelConfig={ordered:true,maxRetransmitTime:3000};// Call management\nthis.activeCalls=new Map();// callId -> call info\nthis.callQueue=[];// Media constraints\nthis.defaultVideoConstraints={width:{min:640,ideal:1280,max:1920},height:{min:480,ideal:720,max:1080},frameRate:{min:15,ideal:30,max:60}};this.defaultAudioConstraints={echoCancellation:true,noiseSuppression:true,autoGainControl:true,sampleRate:44100};}// Initialize the WebRTC service\nasync initialize(serverUrl,authToken){try{// Connect to signaling server\nawait this.connectToSignalingServer(serverUrl,authToken);// Get WebRTC configuration from server\nawait this.loadWebRTCConfiguration();this.setupSocketListeners();console.log('WebRTC Service initialized successfully');this.emit('initialized');}catch(error){console.error('Failed to initialize WebRTC service:',error);this.emit('error',{type:'initialization_failed',error});throw error;}}// Connect to signaling server\nasync connectToSignalingServer(serverUrl,authToken){return new Promise((resolve,reject)=>{this.socket=io(serverUrl,{auth:{token:authToken},transports:['websocket','polling'],timeout:10000});this.socket.on('connect',()=>{console.log('Connected to signaling server');resolve();});this.socket.on('connect_error',error=>{console.error('Failed to connect to signaling server:',error);reject(error);});this.socket.on('disconnect',reason=>{console.warn('Disconnected from signaling server:',reason);this.emit('disconnected',{reason});});this.socket.on('error',error=>{console.error('Socket error:',error);this.emit('error',{type:'socket_error',error});});});}// Load WebRTC configuration from server\nasync loadWebRTCConfiguration(){try{const response=await fetch('/api/webrtc-config',{headers:{'Authorization':\"Bearer \".concat(this.authToken),'Content-Type':'application/json'}});if(!response.ok){throw new Error('Failed to load WebRTC configuration');}const config=await response.json();this.rtcConfiguration.iceServers=config.iceServers;}catch(error){console.warn('Using default ICE servers due to configuration load error:',error);}}// Set up socket event listeners\nsetupSocketListeners(){// Room events\nthis.socket.on('room-joined',this.handleRoomJoined.bind(this));this.socket.on('room-left',this.handleRoomLeft.bind(this));this.socket.on('user-joined',this.handleUserJoined.bind(this));this.socket.on('user-left',this.handleUserLeft.bind(this));// WebRTC signaling events\nthis.socket.on('offer',this.handleOffer.bind(this));this.socket.on('answer',this.handleAnswer.bind(this));this.socket.on('ice-candidate',this.handleIceCandidate.bind(this));this.socket.on('renegotiate',this.handleRenegotiation.bind(this));// Call management events\nthis.socket.on('call-started',this.handleCallStarted.bind(this));this.socket.on('call-ended',this.handleCallEnded.bind(this));this.socket.on('call-status-update',this.handleCallStatusUpdate.bind(this));// Chat and file sharing\nthis.socket.on('chat-message',this.handleChatMessage.bind(this));this.socket.on('file-shared',this.handleFileShared.bind(this));// Screen sharing and annotations\nthis.socket.on('screen-share-started',this.handleScreenShareStarted.bind(this));this.socket.on('screen-share-stopped',this.handleScreenShareStopped.bind(this));this.socket.on('annotation',this.handleAnnotation.bind(this));}// Media management\nasync getUserMedia(){let constraints=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const mediaConstraints={video:_objectSpread(_objectSpread({},this.defaultVideoConstraints),constraints.video),audio:_objectSpread(_objectSpread({},this.defaultAudioConstraints),constraints.audio)};this.localStream=await navigator.mediaDevices.getUserMedia(mediaConstraints);console.log('Local stream acquired:',{video:this.localStream.getVideoTracks().length>0,audio:this.localStream.getAudioTracks().length>0});this.emit('localStreamAcquired',{stream:this.localStream});return this.localStream;}catch(error){console.error('Failed to get user media:',error);this.emit('error',{type:'media_access_failed',error});throw error;}}async getDisplayMedia(){try{const screenStream=await navigator.mediaDevices.getDisplayMedia({video:{cursor:'always',frameRate:{max:30}},audio:true});console.log('Screen sharing stream acquired');this.emit('screenStreamAcquired',{stream:screenStream});return screenStream;}catch(error){console.error('Failed to get display media:',error);this.emit('error',{type:'screen_share_failed',error});throw error;}}// Room management\nasync joinRoom(roomId){let metadata=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{var _this$socket;if(!((_this$socket=this.socket)!==null&&_this$socket!==void 0&&_this$socket.connected)){throw new Error('Not connected to signaling server');}this.currentRoom=roomId;this.socket.emit('join-room',{roomId,roomType:'consultation',metadata});console.log(\"Joining room: \".concat(roomId));}catch(error){console.error('Failed to join room:',error);throw error;}}async leaveRoom(){try{if(this.currentRoom){// Close all peer connections\nfor(const[userId,pc]of this.peerConnections){await this.closePeerConnection(userId);}this.socket.emit('leave-room',{roomId:this.currentRoom});this.currentRoom=null;console.log('Left room');this.emit('roomLeft');}}catch(error){console.error('Failed to leave room:',error);}}// Peer connection management\nasync createPeerConnection(userId){try{if(this.peerConnections.has(userId)){await this.closePeerConnection(userId);}const pc=new RTCPeerConnection(this.rtcConfiguration);// Add local stream tracks\nif(this.localStream){this.localStream.getTracks().forEach(track=>{pc.addTrack(track,this.localStream);});}// Set up event handlers\npc.onicecandidate=event=>{if(event.candidate){this.socket.emit('ice-candidate',{targetUserId:userId,candidate:event.candidate});}};pc.ontrack=event=>{console.log('Remote track received from user:',userId);this.emit('remoteStreamReceived',{userId,stream:event.streams[0],track:event.track});};pc.oniceconnectionstatechange=()=>{console.log(\"ICE connection state for \".concat(userId,\":\"),pc.iceConnectionState);this.emit('iceConnectionStateChange',{userId,state:pc.iceConnectionState});if(pc.iceConnectionState==='failed'){this.handleConnectionFailure(userId);}};pc.ondatachannel=event=>{this.setupDataChannel(event.channel,userId);};// Create data channel\nconst dataChannel=pc.createDataChannel('surgical-guidance',this.dataChannelConfig);this.setupDataChannel(dataChannel,userId);this.peerConnections.set(userId,pc);console.log(\"Peer connection created for user: \".concat(userId));return pc;}catch(error){console.error('Failed to create peer connection:',error);throw error;}}setupDataChannel(channel,userId){channel.onopen=()=>{console.log(\"Data channel opened with user: \".concat(userId));this.emit('dataChannelOpened',{userId,channel});};channel.onmessage=event=>{try{const data=JSON.parse(event.data);this.emit('dataChannelMessage',{userId,data});}catch(error){console.error('Failed to parse data channel message:',error);}};channel.onclose=()=>{console.log(\"Data channel closed with user: \".concat(userId));this.emit('dataChannelClosed',{userId});};channel.onerror=error=>{console.error(\"Data channel error with user \".concat(userId,\":\"),error);};}async closePeerConnection(userId){const pc=this.peerConnections.get(userId);if(pc){pc.close();this.peerConnections.delete(userId);console.log(\"Peer connection closed for user: \".concat(userId));}}// Call management\nasync makeCall(targetUserId){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{if(!this.localStream){await this.getUserMedia();}const pc=await this.createPeerConnection(targetUserId);const offer=await pc.createOffer(options);await pc.setLocalDescription(offer);const callId=\"call_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));this.socket.emit('offer',{targetUserId,offer,callId});console.log(\"Call initiated to user: \".concat(targetUserId));this.emit('callInitiated',{targetUserId,callId});}catch(error){console.error('Failed to make call:',error);this.emit('error',{type:'call_failed',error});throw error;}}async endCall(callId){try{this.socket.emit('end-call',{callId});// Close relevant peer connections\nfor(const[userId,pc]of this.peerConnections){await this.closePeerConnection(userId);}this.emit('callEnded',{callId});}catch(error){console.error('Failed to end call:',error);}}// Socket event handlers\nhandleRoomJoined(data){console.log('Room joined:',data);this.emit('roomJoined',data);}handleRoomLeft(data){console.log('Room left:',data);this.emit('roomLeft',data);}handleUserJoined(data){console.log('User joined room:',data);this.emit('userJoined',data);}handleUserLeft(data){console.log('User left room:',data);this.closePeerConnection(data.userId);this.emit('userLeft',data);}async handleOffer(data){try{const{fromUserId,offer,callId}=data;console.log('Received offer from:',fromUserId);const pc=await this.createPeerConnection(fromUserId);await pc.setRemoteDescription(new RTCSessionDescription(offer));if(!this.localStream){await this.getUserMedia();// Re-add tracks to peer connection\nthis.localStream.getTracks().forEach(track=>{pc.addTrack(track,this.localStream);});}const answer=await pc.createAnswer();await pc.setLocalDescription(answer);this.socket.emit('answer',{targetUserId:fromUserId,answer,callId});this.emit('callReceived',{fromUserId,callId});}catch(error){console.error('Failed to handle offer:',error);this.emit('error',{type:'offer_handling_failed',error});}}async handleAnswer(data){try{const{fromUserId,answer}=data;console.log('Received answer from:',fromUserId);const pc=this.peerConnections.get(fromUserId);if(pc){await pc.setRemoteDescription(new RTCSessionDescription(answer));console.log('Answer processed successfully');}}catch(error){console.error('Failed to handle answer:',error);}}async handleIceCandidate(data){try{const{fromUserId,candidate}=data;const pc=this.peerConnections.get(fromUserId);if(pc&&candidate){await pc.addIceCandidate(new RTCIceCandidate(candidate));}}catch(error){console.error('Failed to handle ICE candidate:',error);}}async handleRenegotiation(data){try{const{fromUserId,offer}=data;console.log('Renegotiation request from:',fromUserId);const pc=this.peerConnections.get(fromUserId);if(pc){await pc.setRemoteDescription(new RTCSessionDescription(offer));const answer=await pc.createAnswer();await pc.setLocalDescription(answer);this.socket.emit('answer',{targetUserId:fromUserId,answer});}}catch(error){console.error('Failed to handle renegotiation:',error);}}handleCallStarted(data){console.log('Call started:',data);this.activeCalls.set(data.callId,data);this.emit('callStarted',data);}handleCallEnded(data){console.log('Call ended:',data);this.activeCalls.delete(data.callId);this.emit('callEnded',data);}handleCallStatusUpdate(data){this.emit('callStatusUpdate',data);}handleChatMessage(data){this.emit('chatMessage',data);}handleFileShared(data){this.emit('fileShared',data);}handleScreenShareStarted(data){this.emit('screenShareStarted',data);}handleScreenShareStopped(data){this.emit('screenShareStopped',data);}handleAnnotation(data){this.emit('annotation',data);}// Connection failure handling\nasync handleConnectionFailure(userId){console.warn(\"Connection failure with user: \".concat(userId));try{// Attempt to reconnect\nsetTimeout(async()=>{if(this.currentRoom){await this.createPeerConnection(userId);}},5000);}catch(error){console.error('Failed to recover connection:',error);}}// Utility methods\nsendDataChannelMessage(userId,data){const pc=this.peerConnections.get(userId);if(pc){var _Array$from$find;const channel=pc.createDataChannel?pc.createDataChannel('surgical-guidance',this.dataChannelConfig):(_Array$from$find=Array.from(pc.getReceivers()).find(r=>r.channel))===null||_Array$from$find===void 0?void 0:_Array$from$find.channel;if(channel&&channel.readyState==='open'){channel.send(JSON.stringify(data));}}}// Event handling\non(eventName,callback){if(!this.listeners.has(eventName)){this.listeners.set(eventName,new Set());}this.listeners.get(eventName).add(callback);}off(eventName,callback){if(this.listeners.has(eventName)){this.listeners.get(eventName).delete(callback);}}emit(eventName,data){if(this.listeners.has(eventName)){this.listeners.get(eventName).forEach(callback=>{try{callback(data);}catch(error){console.error(\"Error in event listener for \".concat(eventName,\":\"),error);}});}}// Cleanup\ndisconnect(){// Close all peer connections\nfor(const[userId]of this.peerConnections){this.closePeerConnection(userId);}// Stop local stream\nif(this.localStream){this.localStream.getTracks().forEach(track=>track.stop());this.localStream=null;}// Disconnect socket\nif(this.socket){this.socket.disconnect();this.socket=null;}// Clear listeners\nthis.listeners.clear();console.log('WebRTC Service disconnected');}// Get connection statistics\nasync getConnectionStats(){const stats=new Map();for(const[userId,pc]of this.peerConnections){try{const peerStats=await pc.getStats();stats.set(userId,peerStats);}catch(error){console.error(\"Failed to get stats for user \".concat(userId,\":\"),error);}}return stats;}// === VIDEO CALL MANAGEMENT ===\n// Start video call for the room\nasync startRoomVideoCall(){try{console.log('Starting room video call...');this.isInVideoCall=true;// Get local media stream\nawait this.getUserMedia({video:this.defaultVideoConstraints,audio:this.defaultAudioConstraints});// Create peer connections with all current room participants\nfor(const[userId]of this.roomParticipants){if(userId!==this.userId){await this.createPeerConnection(userId);await this.makeCall(userId);}}this.emit('video-call-started');return{success:true};}catch(error){console.error('Failed to start room video call:',error);this.emit('error',{type:'video_call_start_failed',error});throw error;}}// End video call for the room\nasync endRoomVideoCall(){try{console.log('Ending room video call...');this.isInVideoCall=false;// Stop local stream\nif(this.localStream){this.localStream.getTracks().forEach(track=>track.stop());this.localStream=null;}// Close all peer connections\nfor(const[userId]of this.peerConnections){this.closePeerConnection(userId);}// Clear remote streams\nthis.remoteStreams.clear();this.emit('video-call-ended');return{success:true};}catch(error){console.error('Failed to end room video call:',error);this.emit('error',{type:'video_call_end_failed',error});throw error;}}// Toggle local video\ntoggleLocalVideo(){if(this.localStream){const videoTrack=this.localStream.getVideoTracks()[0];if(videoTrack){videoTrack.enabled=!videoTrack.enabled;this.localVideoEnabled=videoTrack.enabled;this.emit('local-video-toggled',{enabled:this.localVideoEnabled});return this.localVideoEnabled;}}return false;}// Toggle local audio\ntoggleLocalAudio(){if(this.localStream){const audioTrack=this.localStream.getAudioTracks()[0];if(audioTrack){audioTrack.enabled=!audioTrack.enabled;this.localAudioEnabled=audioTrack.enabled;this.emit('local-audio-toggled',{enabled:this.localAudioEnabled});return this.localAudioEnabled;}}return false;}// Get local stream for video element\ngetLocalStream(){return this.localStream;}// Get remote stream by user ID\ngetRemoteStream(userId){return this.remoteStreams.get(userId);}// Get all remote streams\ngetAllRemoteStreams(){return new Map(this.remoteStreams);}// Handle new user joining room during video call\nasync handleUserJoinedDuringCall(userId,userInfo){if(this.isInVideoCall&&userId!==this.userId){this.roomParticipants.set(userId,userInfo);// Create peer connection and initiate call\nawait this.createPeerConnection(userId);await this.makeCall(userId);}}// Enhanced handleUserJoined for video calls\nhandleUserJoined(data){const{user}=data;console.log(\"User joined room: \".concat(user.name));this.roomParticipants.set(user.id,user);// If we're in a video call, establish peer connection\nif(this.isInVideoCall){this.handleUserJoinedDuringCall(user.id,user);}this.emit('user-joined',data);}// Enhanced handleUserLeft for video calls  \nhandleUserLeft(data){const{userId}=data;console.log(\"User left room: \".concat(userId));this.roomParticipants.delete(userId);// Clean up peer connection and remote stream\nif(this.peerConnections.has(userId)){this.closePeerConnection(userId);}if(this.remoteStreams.has(userId)){const stream=this.remoteStreams.get(userId);stream.getTracks().forEach(track=>track.stop());this.remoteStreams.delete(userId);}this.emit('user-left',data);}// Enhanced createPeerConnection to handle remote streams\nasync createPeerConnection(userId){try{if(this.peerConnections.has(userId)){console.log(\"Peer connection already exists for user: \".concat(userId));return this.peerConnections.get(userId);}const peerConnection=new RTCPeerConnection(this.rtcConfiguration);// Add local stream tracks if available\nif(this.localStream){this.localStream.getTracks().forEach(track=>{peerConnection.addTrack(track,this.localStream);});}// Handle incoming remote stream\npeerConnection.ontrack=event=>{console.log('Received remote stream from user:',userId);const[remoteStream]=event.streams;this.remoteStreams.set(userId,remoteStream);this.emit('remote-stream-added',{userId,stream:remoteStream});};// Handle ICE candidates\npeerConnection.onicecandidate=event=>{if(event.candidate){this.socket.emit('ice-candidate',{candidate:event.candidate,targetUserId:userId});}};// Handle connection state changes\npeerConnection.onconnectionstatechange=()=>{console.log(\"Connection state with \".concat(userId,\":\"),peerConnection.connectionState);this.emit('connection-state-changed',{userId,state:peerConnection.connectionState});if(peerConnection.connectionState==='failed'){this.closePeerConnection(userId);}};this.peerConnections.set(userId,peerConnection);console.log(\"Created peer connection for user: \".concat(userId));return peerConnection;}catch(error){console.error(\"Failed to create peer connection for user \".concat(userId,\":\"),error);this.emit('error',{type:'peer_connection_failed',userId,error});throw error;}}}export default WebRTCService;","map":{"version":3,"names":["io","WebRTCService","constructor","socket","peerConnections","Map","localStream","remoteStreams","iceServers","currentRoom","userId","listeners","isInVideoCall","localVideoEnabled","localAudioEnabled","roomParticipants","rtcConfiguration","urls","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","dataChannelConfig","ordered","maxRetransmitTime","activeCalls","callQueue","defaultVideoConstraints","width","min","ideal","max","height","frameRate","defaultAudioConstraints","echoCancellation","noiseSuppression","autoGainControl","sampleRate","initialize","serverUrl","authToken","connectToSignalingServer","loadWebRTCConfiguration","setupSocketListeners","console","log","emit","error","type","Promise","resolve","reject","auth","token","transports","timeout","on","reason","warn","response","fetch","headers","concat","ok","Error","config","json","handleRoomJoined","bind","handleRoomLeft","handleUserJoined","handleUserLeft","handleOffer","handleAnswer","handleIceCandidate","handleRenegotiation","handleCallStarted","handleCallEnded","handleCallStatusUpdate","handleChatMessage","handleFileShared","handleScreenShareStarted","handleScreenShareStopped","handleAnnotation","getUserMedia","constraints","arguments","length","undefined","mediaConstraints","video","_objectSpread","audio","navigator","mediaDevices","getVideoTracks","getAudioTracks","stream","getDisplayMedia","screenStream","cursor","joinRoom","roomId","metadata","_this$socket","connected","roomType","leaveRoom","pc","closePeerConnection","createPeerConnection","has","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","targetUserId","ontrack","streams","oniceconnectionstatechange","iceConnectionState","state","handleConnectionFailure","ondatachannel","setupDataChannel","channel","dataChannel","createDataChannel","set","onopen","onmessage","data","JSON","parse","onclose","onerror","get","close","delete","makeCall","options","offer","createOffer","setLocalDescription","callId","Date","now","Math","random","toString","substr","endCall","fromUserId","setRemoteDescription","RTCSessionDescription","answer","createAnswer","addIceCandidate","RTCIceCandidate","setTimeout","sendDataChannelMessage","_Array$from$find","Array","from","getReceivers","find","r","readyState","send","stringify","eventName","callback","Set","add","off","disconnect","stop","clear","getConnectionStats","stats","peerStats","getStats","startRoomVideoCall","success","endRoomVideoCall","toggleLocalVideo","videoTrack","enabled","toggleLocalAudio","audioTrack","getLocalStream","getRemoteStream","getAllRemoteStreams","handleUserJoinedDuringCall","userInfo","user","name","id","peerConnection","remoteStream","onconnectionstatechange","connectionState"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/services/WebRTCService.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass WebRTCService {\n    constructor() {\n        this.socket = null;\n        this.peerConnections = new Map(); // userId -> RTCPeerConnection\n        this.localStream = null;\n        this.remoteStreams = new Map(); // userId -> MediaStream\n        this.iceServers = [];\n        this.currentRoom = null;\n        this.userId = null;\n        this.listeners = new Map(); // eventName -> Set of callbacks\n        \n        // Video call state\n        this.isInVideoCall = false;\n        this.localVideoEnabled = true;\n        this.localAudioEnabled = true;\n        this.roomParticipants = new Map(); // userId -> participant info\n        \n        // WebRTC configuration\n        this.rtcConfiguration = {\n            iceServers: [\n                { urls: 'stun:stun.l.google.com:19302' }\n            ],\n            iceCandidatePoolSize: 10,\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require'\n        };\n\n        // Data channel configuration\n        this.dataChannelConfig = {\n            ordered: true,\n            maxRetransmitTime: 3000\n        };\n\n        // Call management\n        this.activeCalls = new Map(); // callId -> call info\n        this.callQueue = [];\n        \n        // Media constraints\n        this.defaultVideoConstraints = {\n            width: { min: 640, ideal: 1280, max: 1920 },\n            height: { min: 480, ideal: 720, max: 1080 },\n            frameRate: { min: 15, ideal: 30, max: 60 }\n        };\n\n        this.defaultAudioConstraints = {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 44100\n        };\n    }\n\n    // Initialize the WebRTC service\n    async initialize(serverUrl, authToken) {\n        try {\n            // Connect to signaling server\n            await this.connectToSignalingServer(serverUrl, authToken);\n            \n            // Get WebRTC configuration from server\n            await this.loadWebRTCConfiguration();\n            \n            this.setupSocketListeners();\n            \n            console.log('WebRTC Service initialized successfully');\n            this.emit('initialized');\n            \n        } catch (error) {\n            console.error('Failed to initialize WebRTC service:', error);\n            this.emit('error', { type: 'initialization_failed', error });\n            throw error;\n        }\n    }\n\n    // Connect to signaling server\n    async connectToSignalingServer(serverUrl, authToken) {\n        return new Promise((resolve, reject) => {\n            this.socket = io(serverUrl, {\n                auth: {\n                    token: authToken\n                },\n                transports: ['websocket', 'polling'],\n                timeout: 10000\n            });\n\n            this.socket.on('connect', () => {\n                console.log('Connected to signaling server');\n                resolve();\n            });\n\n            this.socket.on('connect_error', (error) => {\n                console.error('Failed to connect to signaling server:', error);\n                reject(error);\n            });\n\n            this.socket.on('disconnect', (reason) => {\n                console.warn('Disconnected from signaling server:', reason);\n                this.emit('disconnected', { reason });\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                this.emit('error', { type: 'socket_error', error });\n            });\n        });\n    }\n\n    // Load WebRTC configuration from server\n    async loadWebRTCConfiguration() {\n        try {\n            const response = await fetch('/api/webrtc-config', {\n                headers: {\n                    'Authorization': `Bearer ${this.authToken}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to load WebRTC configuration');\n            }\n\n            const config = await response.json();\n            this.rtcConfiguration.iceServers = config.iceServers;\n            \n        } catch (error) {\n            console.warn('Using default ICE servers due to configuration load error:', error);\n        }\n    }\n\n    // Set up socket event listeners\n    setupSocketListeners() {\n        // Room events\n        this.socket.on('room-joined', this.handleRoomJoined.bind(this));\n        this.socket.on('room-left', this.handleRoomLeft.bind(this));\n        this.socket.on('user-joined', this.handleUserJoined.bind(this));\n        this.socket.on('user-left', this.handleUserLeft.bind(this));\n\n        // WebRTC signaling events\n        this.socket.on('offer', this.handleOffer.bind(this));\n        this.socket.on('answer', this.handleAnswer.bind(this));\n        this.socket.on('ice-candidate', this.handleIceCandidate.bind(this));\n        this.socket.on('renegotiate', this.handleRenegotiation.bind(this));\n\n        // Call management events\n        this.socket.on('call-started', this.handleCallStarted.bind(this));\n        this.socket.on('call-ended', this.handleCallEnded.bind(this));\n        this.socket.on('call-status-update', this.handleCallStatusUpdate.bind(this));\n\n        // Chat and file sharing\n        this.socket.on('chat-message', this.handleChatMessage.bind(this));\n        this.socket.on('file-shared', this.handleFileShared.bind(this));\n\n        // Screen sharing and annotations\n        this.socket.on('screen-share-started', this.handleScreenShareStarted.bind(this));\n        this.socket.on('screen-share-stopped', this.handleScreenShareStopped.bind(this));\n        this.socket.on('annotation', this.handleAnnotation.bind(this));\n    }\n\n    // Media management\n    async getUserMedia(constraints = {}) {\n        try {\n            const mediaConstraints = {\n                video: {\n                    ...this.defaultVideoConstraints,\n                    ...constraints.video\n                },\n                audio: {\n                    ...this.defaultAudioConstraints,\n                    ...constraints.audio\n                }\n            };\n\n            this.localStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);\n            \n            console.log('Local stream acquired:', {\n                video: this.localStream.getVideoTracks().length > 0,\n                audio: this.localStream.getAudioTracks().length > 0\n            });\n\n            this.emit('localStreamAcquired', { stream: this.localStream });\n            return this.localStream;\n\n        } catch (error) {\n            console.error('Failed to get user media:', error);\n            this.emit('error', { type: 'media_access_failed', error });\n            throw error;\n        }\n    }\n\n    async getDisplayMedia() {\n        try {\n            const screenStream = await navigator.mediaDevices.getDisplayMedia({\n                video: {\n                    cursor: 'always',\n                    frameRate: { max: 30 }\n                },\n                audio: true\n            });\n\n            console.log('Screen sharing stream acquired');\n            this.emit('screenStreamAcquired', { stream: screenStream });\n            return screenStream;\n\n        } catch (error) {\n            console.error('Failed to get display media:', error);\n            this.emit('error', { type: 'screen_share_failed', error });\n            throw error;\n        }\n    }\n\n    // Room management\n    async joinRoom(roomId, metadata = {}) {\n        try {\n            if (!this.socket?.connected) {\n                throw new Error('Not connected to signaling server');\n            }\n\n            this.currentRoom = roomId;\n            \n            this.socket.emit('join-room', {\n                roomId,\n                roomType: 'consultation',\n                metadata\n            });\n\n            console.log(`Joining room: ${roomId}`);\n\n        } catch (error) {\n            console.error('Failed to join room:', error);\n            throw error;\n        }\n    }\n\n    async leaveRoom() {\n        try {\n            if (this.currentRoom) {\n                // Close all peer connections\n                for (const [userId, pc] of this.peerConnections) {\n                    await this.closePeerConnection(userId);\n                }\n\n                this.socket.emit('leave-room', { roomId: this.currentRoom });\n                this.currentRoom = null;\n                \n                console.log('Left room');\n                this.emit('roomLeft');\n            }\n        } catch (error) {\n            console.error('Failed to leave room:', error);\n        }\n    }\n\n    // Peer connection management\n    async createPeerConnection(userId) {\n        try {\n            if (this.peerConnections.has(userId)) {\n                await this.closePeerConnection(userId);\n            }\n\n            const pc = new RTCPeerConnection(this.rtcConfiguration);\n            \n            // Add local stream tracks\n            if (this.localStream) {\n                this.localStream.getTracks().forEach(track => {\n                    pc.addTrack(track, this.localStream);\n                });\n            }\n\n            // Set up event handlers\n            pc.onicecandidate = (event) => {\n                if (event.candidate) {\n                    this.socket.emit('ice-candidate', {\n                        targetUserId: userId,\n                        candidate: event.candidate\n                    });\n                }\n            };\n\n            pc.ontrack = (event) => {\n                console.log('Remote track received from user:', userId);\n                this.emit('remoteStreamReceived', {\n                    userId,\n                    stream: event.streams[0],\n                    track: event.track\n                });\n            };\n\n            pc.oniceconnectionstatechange = () => {\n                console.log(`ICE connection state for ${userId}:`, pc.iceConnectionState);\n                this.emit('iceConnectionStateChange', {\n                    userId,\n                    state: pc.iceConnectionState\n                });\n\n                if (pc.iceConnectionState === 'failed') {\n                    this.handleConnectionFailure(userId);\n                }\n            };\n\n            pc.ondatachannel = (event) => {\n                this.setupDataChannel(event.channel, userId);\n            };\n\n            // Create data channel\n            const dataChannel = pc.createDataChannel('surgical-guidance', this.dataChannelConfig);\n            this.setupDataChannel(dataChannel, userId);\n\n            this.peerConnections.set(userId, pc);\n            console.log(`Peer connection created for user: ${userId}`);\n\n            return pc;\n\n        } catch (error) {\n            console.error('Failed to create peer connection:', error);\n            throw error;\n        }\n    }\n\n    setupDataChannel(channel, userId) {\n        channel.onopen = () => {\n            console.log(`Data channel opened with user: ${userId}`);\n            this.emit('dataChannelOpened', { userId, channel });\n        };\n\n        channel.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.emit('dataChannelMessage', { userId, data });\n            } catch (error) {\n                console.error('Failed to parse data channel message:', error);\n            }\n        };\n\n        channel.onclose = () => {\n            console.log(`Data channel closed with user: ${userId}`);\n            this.emit('dataChannelClosed', { userId });\n        };\n\n        channel.onerror = (error) => {\n            console.error(`Data channel error with user ${userId}:`, error);\n        };\n    }\n\n    async closePeerConnection(userId) {\n        const pc = this.peerConnections.get(userId);\n        if (pc) {\n            pc.close();\n            this.peerConnections.delete(userId);\n            console.log(`Peer connection closed for user: ${userId}`);\n        }\n    }\n\n    // Call management\n    async makeCall(targetUserId, options = {}) {\n        try {\n            if (!this.localStream) {\n                await this.getUserMedia();\n            }\n\n            const pc = await this.createPeerConnection(targetUserId);\n            const offer = await pc.createOffer(options);\n            await pc.setLocalDescription(offer);\n\n            const callId = `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n            \n            this.socket.emit('offer', {\n                targetUserId,\n                offer,\n                callId\n            });\n\n            console.log(`Call initiated to user: ${targetUserId}`);\n            this.emit('callInitiated', { targetUserId, callId });\n\n        } catch (error) {\n            console.error('Failed to make call:', error);\n            this.emit('error', { type: 'call_failed', error });\n            throw error;\n        }\n    }\n\n    async endCall(callId) {\n        try {\n            this.socket.emit('end-call', { callId });\n            \n            // Close relevant peer connections\n            for (const [userId, pc] of this.peerConnections) {\n                await this.closePeerConnection(userId);\n            }\n\n            this.emit('callEnded', { callId });\n\n        } catch (error) {\n            console.error('Failed to end call:', error);\n        }\n    }\n\n    // Socket event handlers\n    handleRoomJoined(data) {\n        console.log('Room joined:', data);\n        this.emit('roomJoined', data);\n    }\n\n    handleRoomLeft(data) {\n        console.log('Room left:', data);\n        this.emit('roomLeft', data);\n    }\n\n    handleUserJoined(data) {\n        console.log('User joined room:', data);\n        this.emit('userJoined', data);\n    }\n\n    handleUserLeft(data) {\n        console.log('User left room:', data);\n        this.closePeerConnection(data.userId);\n        this.emit('userLeft', data);\n    }\n\n    async handleOffer(data) {\n        try {\n            const { fromUserId, offer, callId } = data;\n            console.log('Received offer from:', fromUserId);\n\n            const pc = await this.createPeerConnection(fromUserId);\n            await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n            if (!this.localStream) {\n                await this.getUserMedia();\n                // Re-add tracks to peer connection\n                this.localStream.getTracks().forEach(track => {\n                    pc.addTrack(track, this.localStream);\n                });\n            }\n\n            const answer = await pc.createAnswer();\n            await pc.setLocalDescription(answer);\n\n            this.socket.emit('answer', {\n                targetUserId: fromUserId,\n                answer,\n                callId\n            });\n\n            this.emit('callReceived', { fromUserId, callId });\n\n        } catch (error) {\n            console.error('Failed to handle offer:', error);\n            this.emit('error', { type: 'offer_handling_failed', error });\n        }\n    }\n\n    async handleAnswer(data) {\n        try {\n            const { fromUserId, answer } = data;\n            console.log('Received answer from:', fromUserId);\n\n            const pc = this.peerConnections.get(fromUserId);\n            if (pc) {\n                await pc.setRemoteDescription(new RTCSessionDescription(answer));\n                console.log('Answer processed successfully');\n            }\n\n        } catch (error) {\n            console.error('Failed to handle answer:', error);\n        }\n    }\n\n    async handleIceCandidate(data) {\n        try {\n            const { fromUserId, candidate } = data;\n            const pc = this.peerConnections.get(fromUserId);\n            \n            if (pc && candidate) {\n                await pc.addIceCandidate(new RTCIceCandidate(candidate));\n            }\n\n        } catch (error) {\n            console.error('Failed to handle ICE candidate:', error);\n        }\n    }\n\n    async handleRenegotiation(data) {\n        try {\n            const { fromUserId, offer } = data;\n            console.log('Renegotiation request from:', fromUserId);\n\n            const pc = this.peerConnections.get(fromUserId);\n            if (pc) {\n                await pc.setRemoteDescription(new RTCSessionDescription(offer));\n                const answer = await pc.createAnswer();\n                await pc.setLocalDescription(answer);\n\n                this.socket.emit('answer', {\n                    targetUserId: fromUserId,\n                    answer\n                });\n            }\n\n        } catch (error) {\n            console.error('Failed to handle renegotiation:', error);\n        }\n    }\n\n    handleCallStarted(data) {\n        console.log('Call started:', data);\n        this.activeCalls.set(data.callId, data);\n        this.emit('callStarted', data);\n    }\n\n    handleCallEnded(data) {\n        console.log('Call ended:', data);\n        this.activeCalls.delete(data.callId);\n        this.emit('callEnded', data);\n    }\n\n    handleCallStatusUpdate(data) {\n        this.emit('callStatusUpdate', data);\n    }\n\n    handleChatMessage(data) {\n        this.emit('chatMessage', data);\n    }\n\n    handleFileShared(data) {\n        this.emit('fileShared', data);\n    }\n\n    handleScreenShareStarted(data) {\n        this.emit('screenShareStarted', data);\n    }\n\n    handleScreenShareStopped(data) {\n        this.emit('screenShareStopped', data);\n    }\n\n    handleAnnotation(data) {\n        this.emit('annotation', data);\n    }\n\n    // Connection failure handling\n    async handleConnectionFailure(userId) {\n        console.warn(`Connection failure with user: ${userId}`);\n        \n        try {\n            // Attempt to reconnect\n            setTimeout(async () => {\n                if (this.currentRoom) {\n                    await this.createPeerConnection(userId);\n                }\n            }, 5000);\n        } catch (error) {\n            console.error('Failed to recover connection:', error);\n        }\n    }\n\n    // Utility methods\n    sendDataChannelMessage(userId, data) {\n        const pc = this.peerConnections.get(userId);\n        if (pc) {\n            const channel = pc.createDataChannel ? \n                pc.createDataChannel('surgical-guidance', this.dataChannelConfig) :\n                Array.from(pc.getReceivers()).find(r => r.channel)?.channel;\n                \n            if (channel && channel.readyState === 'open') {\n                channel.send(JSON.stringify(data));\n            }\n        }\n    }\n\n    // Event handling\n    on(eventName, callback) {\n        if (!this.listeners.has(eventName)) {\n            this.listeners.set(eventName, new Set());\n        }\n        this.listeners.get(eventName).add(callback);\n    }\n\n    off(eventName, callback) {\n        if (this.listeners.has(eventName)) {\n            this.listeners.get(eventName).delete(callback);\n        }\n    }\n\n    emit(eventName, data) {\n        if (this.listeners.has(eventName)) {\n            this.listeners.get(eventName).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event listener for ${eventName}:`, error);\n                }\n            });\n        }\n    }\n\n    // Cleanup\n    disconnect() {\n        // Close all peer connections\n        for (const [userId] of this.peerConnections) {\n            this.closePeerConnection(userId);\n        }\n\n        // Stop local stream\n        if (this.localStream) {\n            this.localStream.getTracks().forEach(track => track.stop());\n            this.localStream = null;\n        }\n\n        // Disconnect socket\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n\n        // Clear listeners\n        this.listeners.clear();\n\n        console.log('WebRTC Service disconnected');\n    }\n\n    // Get connection statistics\n    async getConnectionStats() {\n        const stats = new Map();\n        \n        for (const [userId, pc] of this.peerConnections) {\n            try {\n                const peerStats = await pc.getStats();\n                stats.set(userId, peerStats);\n            } catch (error) {\n                console.error(`Failed to get stats for user ${userId}:`, error);\n            }\n        }\n\n        return stats;\n    }\n\n    // === VIDEO CALL MANAGEMENT ===\n    \n    // Start video call for the room\n    async startRoomVideoCall() {\n        try {\n            console.log('Starting room video call...');\n            this.isInVideoCall = true;\n            \n            // Get local media stream\n            await this.getUserMedia({\n                video: this.defaultVideoConstraints,\n                audio: this.defaultAudioConstraints\n            });\n            \n            // Create peer connections with all current room participants\n            for (const [userId] of this.roomParticipants) {\n                if (userId !== this.userId) {\n                    await this.createPeerConnection(userId);\n                    await this.makeCall(userId);\n                }\n            }\n            \n            this.emit('video-call-started');\n            return { success: true };\n            \n        } catch (error) {\n            console.error('Failed to start room video call:', error);\n            this.emit('error', { type: 'video_call_start_failed', error });\n            throw error;\n        }\n    }\n    \n    // End video call for the room\n    async endRoomVideoCall() {\n        try {\n            console.log('Ending room video call...');\n            this.isInVideoCall = false;\n            \n            // Stop local stream\n            if (this.localStream) {\n                this.localStream.getTracks().forEach(track => track.stop());\n                this.localStream = null;\n            }\n            \n            // Close all peer connections\n            for (const [userId] of this.peerConnections) {\n                this.closePeerConnection(userId);\n            }\n            \n            // Clear remote streams\n            this.remoteStreams.clear();\n            \n            this.emit('video-call-ended');\n            return { success: true };\n            \n        } catch (error) {\n            console.error('Failed to end room video call:', error);\n            this.emit('error', { type: 'video_call_end_failed', error });\n            throw error;\n        }\n    }\n    \n    // Toggle local video\n    toggleLocalVideo() {\n        if (this.localStream) {\n            const videoTrack = this.localStream.getVideoTracks()[0];\n            if (videoTrack) {\n                videoTrack.enabled = !videoTrack.enabled;\n                this.localVideoEnabled = videoTrack.enabled;\n                this.emit('local-video-toggled', { enabled: this.localVideoEnabled });\n                return this.localVideoEnabled;\n            }\n        }\n        return false;\n    }\n    \n    // Toggle local audio\n    toggleLocalAudio() {\n        if (this.localStream) {\n            const audioTrack = this.localStream.getAudioTracks()[0];\n            if (audioTrack) {\n                audioTrack.enabled = !audioTrack.enabled;\n                this.localAudioEnabled = audioTrack.enabled;\n                this.emit('local-audio-toggled', { enabled: this.localAudioEnabled });\n                return this.localAudioEnabled;\n            }\n        }\n        return false;\n    }\n    \n    // Get local stream for video element\n    getLocalStream() {\n        return this.localStream;\n    }\n    \n    // Get remote stream by user ID\n    getRemoteStream(userId) {\n        return this.remoteStreams.get(userId);\n    }\n    \n    // Get all remote streams\n    getAllRemoteStreams() {\n        return new Map(this.remoteStreams);\n    }\n    \n    // Handle new user joining room during video call\n    async handleUserJoinedDuringCall(userId, userInfo) {\n        if (this.isInVideoCall && userId !== this.userId) {\n            this.roomParticipants.set(userId, userInfo);\n            \n            // Create peer connection and initiate call\n            await this.createPeerConnection(userId);\n            await this.makeCall(userId);\n        }\n    }\n    \n    // Enhanced handleUserJoined for video calls\n    handleUserJoined(data) {\n        const { user } = data;\n        console.log(`User joined room: ${user.name}`);\n        \n        this.roomParticipants.set(user.id, user);\n        \n        // If we're in a video call, establish peer connection\n        if (this.isInVideoCall) {\n            this.handleUserJoinedDuringCall(user.id, user);\n        }\n        \n        this.emit('user-joined', data);\n    }\n    \n    // Enhanced handleUserLeft for video calls  \n    handleUserLeft(data) {\n        const { userId } = data;\n        console.log(`User left room: ${userId}`);\n        \n        this.roomParticipants.delete(userId);\n        \n        // Clean up peer connection and remote stream\n        if (this.peerConnections.has(userId)) {\n            this.closePeerConnection(userId);\n        }\n        \n        if (this.remoteStreams.has(userId)) {\n            const stream = this.remoteStreams.get(userId);\n            stream.getTracks().forEach(track => track.stop());\n            this.remoteStreams.delete(userId);\n        }\n        \n        this.emit('user-left', data);\n    }\n    \n    // Enhanced createPeerConnection to handle remote streams\n    async createPeerConnection(userId) {\n        try {\n            if (this.peerConnections.has(userId)) {\n                console.log(`Peer connection already exists for user: ${userId}`);\n                return this.peerConnections.get(userId);\n            }\n\n            const peerConnection = new RTCPeerConnection(this.rtcConfiguration);\n            \n            // Add local stream tracks if available\n            if (this.localStream) {\n                this.localStream.getTracks().forEach(track => {\n                    peerConnection.addTrack(track, this.localStream);\n                });\n            }\n\n            // Handle incoming remote stream\n            peerConnection.ontrack = (event) => {\n                console.log('Received remote stream from user:', userId);\n                const [remoteStream] = event.streams;\n                this.remoteStreams.set(userId, remoteStream);\n                this.emit('remote-stream-added', { userId, stream: remoteStream });\n            };\n\n            // Handle ICE candidates\n            peerConnection.onicecandidate = (event) => {\n                if (event.candidate) {\n                    this.socket.emit('ice-candidate', {\n                        candidate: event.candidate,\n                        targetUserId: userId\n                    });\n                }\n            };\n\n            // Handle connection state changes\n            peerConnection.onconnectionstatechange = () => {\n                console.log(`Connection state with ${userId}:`, peerConnection.connectionState);\n                this.emit('connection-state-changed', { \n                    userId, \n                    state: peerConnection.connectionState \n                });\n                \n                if (peerConnection.connectionState === 'failed') {\n                    this.closePeerConnection(userId);\n                }\n            };\n\n            this.peerConnections.set(userId, peerConnection);\n            console.log(`Created peer connection for user: ${userId}`);\n            \n            return peerConnection;\n            \n        } catch (error) {\n            console.error(`Failed to create peer connection for user ${userId}:`, error);\n            this.emit('error', { type: 'peer_connection_failed', userId, error });\n            throw error;\n        }\n    }\n}\n\nexport default WebRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}