{"ast":null,"code":"var _jsxFileName = \"/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ARVideoConsultation = ({\n  roomId,\n  userToken,\n  user,\n  userRole = 'doctor',\n  onError = () => {},\n  onConnectionChange = () => {}\n}) => {\n  _s();\n  // Debug: Log props to see what we're receiving\n  console.log('🐛 ARVideoConsultation props:', {\n    roomId,\n    userToken: userToken ? 'present' : 'missing',\n    user,\n    userRole\n  });\n  // State management\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState(new Map());\n  const [arSession, setArSession] = useState(null);\n  const [drawingMode, setDrawingMode] = useState(true);\n  const [currentColor, setCurrentColor] = useState('#00FF00');\n  const [lineThickness, setLineThickness] = useState(3);\n  const [annotations, setAnnotations] = useState([]);\n\n  // Drawing state\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n\n  // Video call state\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n  const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n\n  // Bridge connection state\n  const [bridgeConnected, setBridgeConnected] = useState(false);\n\n  // Fullscreen state\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // Refs\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const webrtcServiceRef = useRef(null);\n  const remoteVideoRefs = useRef(new Map());\n  const bridgeSocketRef = useRef(null);\n  const containerRef = useRef(null);\n\n  // Simple drawing colors\n  const drawingColors = ['#00FF00', '#FF0000', '#0000FF', '#FFFF00'];\n\n  // Initialize WebRTC service\n  const initializeWebRTCService = async () => {\n    try {\n      // Create WebRTC service instance\n      webrtcServiceRef.current = new WebRTCService();\n\n      // Setup event listeners\n      setupWebRTCListeners();\n\n      // Initialize and connect\n      await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n\n      // Join room\n      await webrtcServiceRef.current.joinRoom(roomId, {\n        userRole,\n        capabilities: ['video', 'audio', 'ar-annotations']\n      });\n\n      // Start video call\n      await webrtcServiceRef.current.startRoomVideoCall();\n      setIsConnected(true);\n      onConnectionChange('connected');\n    } catch (error) {\n      console.error('Failed to initialize WebRTC service:', error);\n      onError('Failed to connect to consultation service');\n      onConnectionChange('error');\n    }\n  };\n\n  // Setup WebRTC event listeners\n  const setupWebRTCListeners = () => {\n    const service = webrtcServiceRef.current;\n\n    // Connection events\n    service.on('initialized', () => {\n      console.log('WebRTC service initialized');\n    });\n    service.on('disconnected', data => {\n      setIsConnected(false);\n      onConnectionChange('disconnected');\n    });\n\n    // Video call events\n    service.on('video-call-started', () => {\n      console.log('Video call started');\n      const stream = service.getLocalStream();\n      setLocalStream(stream);\n      if (videoRef.current && stream) {\n        videoRef.current.srcObject = stream;\n      }\n\n      // Create AR session when video call starts\n      createARSession();\n    });\n    service.on('video-call-ended', () => {\n      console.log('Video call ended');\n      setLocalStream(null);\n      setRemoteStreams(new Map());\n    });\n\n    // Stream events\n    service.on('remote-stream-added', ({\n      userId,\n      stream\n    }) => {\n      console.log('Remote stream added from user:', userId);\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.set(userId, stream);\n        return newStreams;\n      });\n    });\n\n    // Media control events\n    service.on('local-video-toggled', ({\n      enabled\n    }) => {\n      setLocalVideoEnabled(enabled);\n    });\n    service.on('local-audio-toggled', ({\n      enabled\n    }) => {\n      setLocalAudioEnabled(enabled);\n    });\n\n    // Room events\n    service.on('user-joined', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.set(data.user.id, data.user);\n        return newParticipants;\n      });\n    });\n    service.on('user-left', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.delete(data.userId);\n        return newParticipants;\n      });\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.delete(data.userId);\n        return newStreams;\n      });\n    });\n\n    // AR annotation events (keeping the existing AR functionality)\n    service.on('ar-annotation', handleIncomingAnnotation);\n    service.on('ar-annotations-cleared', handleAnnotationsCleared);\n    service.on('ar-error', handleARError);\n\n    // Error handling\n    service.on('error', ({\n      type,\n      error\n    }) => {\n      console.error('WebRTC error:', type, error);\n      onError(`WebRTC error: ${error.message || error}`);\n    });\n  };\n\n  // Audio/Video control functions\n  const toggleLocalVideo = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalVideo();\n      setLocalVideoEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n  const toggleLocalAudio = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalAudio();\n      setLocalAudioEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n\n  // AR Session Management\n  const createARSession = async () => {\n    try {\n      console.log('Creating AR session for room:', roomId);\n\n      // Mock AR session creation for now (can be enhanced with real AR backend)\n      const mockARSession = {\n        id: `ar-session-${roomId}`,\n        roomId: roomId,\n        createdAt: new Date().toISOString(),\n        participants: [],\n        annotations: []\n      };\n      setArSession(mockARSession);\n\n      // Initialize annotation canvas\n      initializeAnnotationCanvas();\n      console.log('AR session created successfully');\n    } catch (error) {\n      console.error('Failed to create AR session:', error);\n      onError('Failed to initialize AR session');\n    }\n  };\n\n  // Initialize annotation canvas for drawing\n  const initializeAnnotationCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.globalAlpha = 0.8;\n\n      // Clear any existing annotations\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      console.log('Annotation canvas initialized');\n    }\n  };\n\n  // Connect to AR Bridge for annotation synchronization\n  const connectToBridge = async () => {\n    try {\n      const bridgeWs = new WebSocket('ws://localhost:8765');\n      bridgeWs.onopen = () => {\n        console.log('🔗 Connected to AR Bridge');\n        setBridgeConnected(true);\n\n        // Register with bridge as surgeon\n        bridgeWs.send(JSON.stringify({\n          type: 'join_room',\n          roomId: roomId,\n          clientType: 'web_surgeon',\n          userInfo: {\n            name: (user === null || user === void 0 ? void 0 : user.name) || 'Surgeon',\n            role: userRole,\n            capabilities: ['annotation', 'video_call']\n          }\n        }));\n      };\n      bridgeWs.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          handleBridgeMessage(data);\n        } catch (error) {\n          console.error('Error parsing bridge message:', error);\n        }\n      };\n      bridgeWs.onclose = () => {\n        console.log('🔗 Disconnected from AR Bridge');\n        setBridgeConnected(false);\n        // Try to reconnect after delay\n        setTimeout(() => {\n          if (roomId && userToken) {\n            connectToBridge();\n          }\n        }, 5000);\n      };\n      bridgeWs.onerror = error => {\n        console.error('🔗 AR Bridge connection error:', error);\n        setBridgeConnected(false);\n      };\n      bridgeSocketRef.current = bridgeWs;\n    } catch (error) {\n      console.error('Failed to connect to AR bridge:', error);\n      setBridgeConnected(false);\n    }\n  };\n\n  // Handle messages from AR Bridge\n  const handleBridgeMessage = data => {\n    const messageType = data.type;\n    if (messageType === 'annotation_received') {\n      // Receive annotation from field medic\n      const annotation = data.annotation;\n      console.log('📍 Received annotation from field medic:', annotation);\n\n      // Add to annotations array (will be rendered on canvas)\n      setAnnotations(prev => [...prev, {\n        ...annotation,\n        source: 'field_medic',\n        timestamp: Date.now(),\n        id: `field_${Date.now()}`\n      }]);\n    } else if (messageType === 'video_frame') {\n      // Receive video frame from field medic - this would be handled by WebRTC\n      console.log('📹 Received video frame from field medic');\n    } else if (messageType === 'ar_client_joined') {\n      console.log('👥 AR client joined room:', data.roomId);\n    } else if (messageType === 'surgeon_connected') {\n      console.log('👨‍⚕️ Surgeon connected notification');\n    }\n  };\n\n  // Send annotation to AR Bridge for field medic\n  const sendAnnotationToBridge = annotation => {\n    if (bridgeSocketRef.current && bridgeConnected) {\n      const message = {\n        type: 'annotation',\n        roomId: roomId,\n        annotation: {\n          ...annotation,\n          timestamp: Date.now(),\n          source: 'web_surgeon'\n        },\n        timestamp: Date.now()\n      };\n      bridgeSocketRef.current.send(JSON.stringify(message));\n      console.log('📍 Sent annotation to bridge:', annotation);\n    }\n  };\n\n  // Drawing event handlers\n  const handleMouseDown = useCallback(e => {\n    if (!drawingMode || userRole !== 'doctor') return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const x = (e.clientX - rect.left) * scaleX / canvas.width;\n    const y = (e.clientY - rect.top) * scaleY / canvas.height;\n    setIsDrawing(true);\n    setCurrentPath([{\n      x,\n      y,\n      timestamp: Date.now()\n    }]);\n    console.log('🖊️ Starting to draw at:', x, y);\n  }, [drawingMode, userRole]);\n  const handleMouseMove = useCallback(e => {\n    if (!isDrawing || !drawingMode || userRole !== 'doctor') return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const x = (e.clientX - rect.left) * scaleX / canvas.width;\n    const y = (e.clientY - rect.top) * scaleY / canvas.height;\n    const newPath = [...currentPath, {\n      x,\n      y,\n      timestamp: Date.now()\n    }];\n    setCurrentPath(newPath);\n\n    // Draw immediately for instant feedback\n    const ctx = canvas.getContext('2d');\n    ctx.globalAlpha = 0.8;\n    ctx.strokeStyle = currentColor;\n    ctx.lineWidth = lineThickness;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    if (newPath.length >= 2) {\n      const prevPoint = newPath[newPath.length - 2];\n      const currPoint = newPath[newPath.length - 1];\n      ctx.beginPath();\n      ctx.moveTo(prevPoint.x * canvas.width, prevPoint.y * canvas.height);\n      ctx.lineTo(currPoint.x * canvas.width, currPoint.y * canvas.height);\n      ctx.stroke();\n    }\n  }, [isDrawing, drawingMode, userRole, currentPath, currentColor, lineThickness]);\n  const handleMouseUp = useCallback(() => {\n    if (!isDrawing || !drawingMode || userRole !== 'doctor') return;\n    setIsDrawing(false);\n    if (currentPath.length > 1) {\n      // Create simple annotation object\n      const annotation = {\n        id: Date.now(),\n        type: 'draw',\n        data: {\n          points: currentPath,\n          color: currentColor,\n          thickness: lineThickness\n        },\n        timestamp: Date.now(),\n        userId: (user === null || user === void 0 ? void 0 : user.id) || 'current-user'\n      };\n\n      // Add to local annotations immediately (always works)\n      setAnnotations(prev => [...prev, annotation]);\n      console.log('✅ Drawing saved:', annotation);\n\n      // Try to sync with others (non-blocking)\n      try {\n        if (bridgeSocketRef.current && bridgeConnected) {\n          sendAnnotationToBridge(annotation);\n          console.log('📡 Sent to AR bridge');\n        }\n        if (webrtcServiceRef.current) {\n          webrtcServiceRef.current.emit('ar-annotation', {\n            roomId: roomId,\n            annotation: annotation,\n            userId: user === null || user === void 0 ? void 0 : user.id\n          });\n          console.log('📡 Sent to WebRTC participants');\n        }\n      } catch (error) {\n        console.warn('⚠️ Sync failed (drawing still saved locally):', error);\n      }\n    }\n    setCurrentPath([]);\n  }, [isDrawing, drawingMode, userRole, currentPath, currentColor, lineThickness, user === null || user === void 0 ? void 0 : user.id, roomId, bridgeConnected, sendAnnotationToBridge]);\n\n  // Draw path on canvas\n  const drawPath = (path, color, thickness, isPreview = false) => {\n    const canvas = canvasRef.current;\n    if (!canvas || path.length < 2) return;\n    const ctx = canvas.getContext('2d');\n    ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = thickness;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n    }\n    ctx.stroke();\n  };\n\n  // Handle incoming annotation\n  const handleIncomingAnnotation = data => {\n    console.log('Received annotation:', data);\n    const annotation = data.annotation;\n    setAnnotations(prev => [...prev, annotation]);\n\n    // Draw annotation on canvas\n    if (annotation.type === 'draw' && annotation.data.points) {\n      drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n    }\n  };\n\n  // Handle annotations cleared\n  const handleAnnotationsCleared = data => {\n    console.log('Annotations cleared:', data);\n    setAnnotations([]);\n    clearCanvas();\n  };\n\n  // Handle AR errors\n  const handleARError = data => {\n    console.error('AR Error:', data);\n    onError(`AR Error: ${data.message}`);\n  };\n\n  // Undo last annotation\n  const undoLastAnnotation = () => {\n    if (annotations.length > 0) {\n      const newAnnotations = annotations.slice(0, -1);\n      setAnnotations(newAnnotations);\n\n      // Redraw canvas with remaining annotations\n      clearCanvas();\n      redrawAnnotations(newAnnotations);\n      console.log('↩️ Undid last annotation');\n\n      // Try to sync undo with others (non-blocking)\n      try {\n        if (webrtcServiceRef.current) {\n          webrtcServiceRef.current.emit('ar-annotation-undo', {\n            roomId: roomId,\n            userId: user === null || user === void 0 ? void 0 : user.id\n          });\n        }\n      } catch (error) {\n        console.warn('⚠️ Undo sync failed:', error);\n      }\n    }\n  };\n\n  // Clear all annotations\n  const clearAllAnnotations = () => {\n    setAnnotations([]);\n    clearCanvas();\n    console.log('🗑️ Cleared all annotations');\n\n    // Try to sync clear with others (non-blocking)\n    try {\n      if (webrtcServiceRef.current) {\n        webrtcServiceRef.current.emit('ar-annotations-clear', {\n          roomId: roomId,\n          clearType: 'all',\n          userId: user === null || user === void 0 ? void 0 : user.id\n        });\n      }\n    } catch (error) {\n      console.warn('⚠️ Clear sync failed:', error);\n    }\n  };\n\n  // Clear canvas\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  };\n\n  // Redraw all annotations\n  const redrawAnnotations = annotationsToRedraw => {\n    clearCanvas();\n    annotationsToRedraw.forEach(annotation => {\n      if (annotation.type === 'draw' && annotation.data.points) {\n        drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n      }\n    });\n  };\n\n  // Fullscreen functionality\n  const toggleFullscreen = useCallback(async () => {\n    if (!containerRef.current) return;\n    try {\n      if (!isFullscreen) {\n        // Enter fullscreen\n        if (containerRef.current.requestFullscreen) {\n          await containerRef.current.requestFullscreen();\n        } else if (containerRef.current.webkitRequestFullscreen) {\n          await containerRef.current.webkitRequestFullscreen();\n        } else if (containerRef.current.mozRequestFullScreen) {\n          await containerRef.current.mozRequestFullScreen();\n        } else if (containerRef.current.msRequestFullscreen) {\n          await containerRef.current.msRequestFullscreen();\n        }\n        setIsFullscreen(true);\n        console.log('🔍 Entered fullscreen mode');\n      } else {\n        // Exit fullscreen\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          await document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          await document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          await document.msExitFullscreen();\n        }\n        setIsFullscreen(false);\n        console.log('🔍 Exited fullscreen mode');\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  }, [isFullscreen]);\n\n  // Handle keyboard shortcuts\n  const handleKeyDown = useCallback(event => {\n    if (event.key === 'f' || event.key === 'F') {\n      event.preventDefault();\n      toggleFullscreen();\n    } else if (event.key === 'Escape') {\n      if (isFullscreen) {\n        setIsFullscreen(false);\n      }\n    }\n  }, [isFullscreen, toggleFullscreen]);\n\n  // Listen for fullscreen change events\n  const handleFullscreenChange = useCallback(() => {\n    const isCurrentlyFullscreen = !!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement);\n    setIsFullscreen(isCurrentlyFullscreen);\n  }, []);\n\n  // WebRTC peer connections are handled by the centralized WebRTC service\n\n  // Initialize component\n  useEffect(() => {\n    if (roomId && userToken) {\n      initializeWebRTCService();\n      connectToBridge();\n    }\n    return () => {\n      // Cleanup WebRTC service\n      if (webrtcServiceRef.current) {\n        webrtcServiceRef.current.disconnect();\n      }\n\n      // Close bridge connection\n      if (bridgeSocketRef.current) {\n        bridgeSocketRef.current.close();\n        bridgeSocketRef.current = null;\n        setBridgeConnected(false);\n      }\n    };\n  }, [roomId, userToken]);\n\n  // Setup keyboard and fullscreen event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n    document.addEventListener('msfullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('mozfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('msfullscreenchange', handleFullscreenChange);\n    };\n  }, [handleKeyDown, handleFullscreenChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `ar-video-consultation ${isFullscreen ? 'fullscreen' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consultation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFE5 AR Video Consultation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-indicators\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${isConnected ? 'connected' : 'disconnected'}`,\n          children: isConnected ? '🟢' : '🔴 '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${bridgeConnected ? 'connected' : 'disconnected'}`,\n          children: bridgeConnected ? '🔗' : '🔗 '\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"participant-count\",\n          children: [\"\\uD83D\\uDC65 \", participants.size + 1, \" participants\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ar-status\",\n          children: \"\\u2728 AR Session Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-annotation-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: userRole === 'field_medic',\n          className: \"consultation-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          className: \"annotation-canvas\",\n          width: 1280,\n          height: 720,\n          onMouseDown: handleMouseDown,\n          onMouseMove: handleMouseMove,\n          onMouseUp: handleMouseUp,\n          style: {\n            cursor: drawingMode ? 'crosshair' : 'default',\n            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-stream-status\",\n          children: [localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator local\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 33\n            }, this), \"Live: \", userRole === 'doctor' ? 'Doctor' : 'Field Medic']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 29\n          }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator remote\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 33\n            }, this), \"Remote: \", remoteStreams.size, \" connected\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ar-session-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ar-indicator\",\n            children: \"\\u2728\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 29\n          }, this), \"AR Session Active\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 25\n        }, this), (() => {\n          const canDraw = userRole === 'doctor' || userRole === 'surgeon';\n          console.log('🎨 Checking drawing tools render condition:', {\n            userRole,\n            canDraw\n          });\n          return canDraw;\n        })() && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floating-drawing-tools\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drawing-toolbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `tool-toggle ${drawingMode ? 'drawing' : 'viewing'}`,\n              onClick: () => {\n                setDrawingMode(!drawingMode);\n                console.log('🖊️ Drawing mode:', !drawingMode ? 'ON' : 'OFF');\n              },\n              title: drawingMode ? 'Switch to viewing mode' : 'Switch to drawing mode',\n              children: drawingMode ? '✏️' : '👆'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 33\n            }, this), drawingMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"quick-colors\",\n                children: drawingColors.map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `color-dot ${currentColor === color ? 'active' : ''}`,\n                  style: {\n                    backgroundColor: color\n                  },\n                  onClick: () => {\n                    setCurrentColor(color);\n                    console.log('🎨 Color changed to:', color);\n                  },\n                  title: `Use ${color} color`\n                }, color, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 768,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thickness-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    const newThickness = Math.max(1, lineThickness - 1);\n                    setLineThickness(newThickness);\n                    console.log('📏 Thickness:', newThickness);\n                  },\n                  className: \"thickness-btn\",\n                  title: \"Decrease thickness\",\n                  children: \"\\u2796\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"thickness-value\",\n                  children: lineThickness\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    const newThickness = Math.min(10, lineThickness + 1);\n                    setLineThickness(newThickness);\n                    console.log('📏 Thickness:', newThickness);\n                  },\n                  className: \"thickness-btn\",\n                  title: \"Increase thickness\",\n                  children: \"\\u2795\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 797,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"undo-btn\",\n                onClick: undoLastAnnotation,\n                disabled: annotations.length === 0,\n                title: \"Undo last drawing\",\n                style: {\n                  background: annotations.length > 0 ? 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)' : 'rgba(255, 255, 255, 0.1)',\n                  opacity: annotations.length > 0 ? 1 : 0.5\n                },\n                children: \"\\u21A9\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 813,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-btn\",\n                onClick: clearAllAnnotations,\n                disabled: annotations.length === 0,\n                title: \"Clear all drawings\",\n                style: {\n                  opacity: annotations.length > 0 ? 1 : 0.5\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 29\n          }, this), drawingMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drawing-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u270F\\uFE0F Drawing Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 847,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"\\uD83C\\uDFA8 \", currentColor]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"\\uD83D\\uDCCF \", lineThickness, \"px\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 37\n            }, this), annotations.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"\\uD83D\\uDCDD \", annotations.length, \" drawings\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 850,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalVideo,\n        className: `control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`,\n        title: localVideoEnabled ? 'Turn off video' : 'Turn on video',\n        children: localVideoEnabled ? '📹 Video On' : '📹 Video Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalAudio,\n        className: `control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`,\n        title: localAudioEnabled ? 'Mute microphone' : 'Unmute microphone',\n        children: localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleFullscreen,\n        className: \"control-btn fullscreen-btn\",\n        title: isFullscreen ? 'Exit fullscreen (ESC)' : 'Enter fullscreen (F)',\n        children: isFullscreen ? '🔍 Exit Fullscreen' : '🔍 Fullscreen'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 13\n    }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remote-videos-pip\",\n      children: Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n        const participant = participants.get(userId);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pip-video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: el => {\n              if (el && stream) {\n                el.srcObject = stream;\n                remoteVideoRefs.current.set(userId, el);\n              }\n            },\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            className: \"pip-video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pip-video-label\",\n            children: (participant === null || participant === void 0 ? void 0 : participant.name) || `User ${userId}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 33\n          }, this)]\n        }, userId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 17\n    }, this), annotations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-info\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uD83D\\uDCDD \", annotations.length, \" annotations active\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 17\n    }, this), !isFullscreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-shortcuts\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Press \", /*#__PURE__*/_jsxDEV(\"kbd\", {\n          children: \"F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 33\n        }, this), \" for fullscreen\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 921,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 665,\n    columnNumber: 9\n  }, this);\n};\n_s(ARVideoConsultation, \"qiQA4saS09nVNewSFlRtR5XFc7c=\");\n_c = ARVideoConsultation;\nexport default ARVideoConsultation;\nvar _c;\n$RefreshReg$(_c, \"ARVideoConsultation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","WebRTCService","jsxDEV","_jsxDEV","Fragment","_Fragment","ARVideoConsultation","roomId","userToken","user","userRole","onError","onConnectionChange","_s","console","log","isConnected","setIsConnected","participants","setParticipants","Map","arSession","setArSession","drawingMode","setDrawingMode","currentColor","setCurrentColor","lineThickness","setLineThickness","annotations","setAnnotations","isDrawing","setIsDrawing","currentPath","setCurrentPath","localStream","setLocalStream","remoteStreams","setRemoteStreams","localVideoEnabled","setLocalVideoEnabled","localAudioEnabled","setLocalAudioEnabled","bridgeConnected","setBridgeConnected","isFullscreen","setIsFullscreen","videoRef","canvasRef","webrtcServiceRef","remoteVideoRefs","bridgeSocketRef","containerRef","drawingColors","initializeWebRTCService","current","setupWebRTCListeners","initialize","joinRoom","capabilities","startRoomVideoCall","error","service","on","data","stream","getLocalStream","srcObject","createARSession","userId","prev","newStreams","set","enabled","newParticipants","id","delete","handleIncomingAnnotation","handleAnnotationsCleared","handleARError","type","message","toggleLocalVideo","newState","toggleLocalAudio","mockARSession","createdAt","Date","toISOString","initializeAnnotationCanvas","canvas","ctx","getContext","lineCap","lineJoin","globalAlpha","clearRect","width","height","connectToBridge","bridgeWs","WebSocket","onopen","send","JSON","stringify","clientType","userInfo","name","role","onmessage","event","parse","handleBridgeMessage","onclose","setTimeout","onerror","messageType","annotation","source","timestamp","now","sendAnnotationToBridge","handleMouseDown","e","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","handleMouseMove","newPath","strokeStyle","lineWidth","length","prevPoint","currPoint","beginPath","moveTo","lineTo","stroke","handleMouseUp","points","color","thickness","emit","warn","drawPath","path","isPreview","i","clearCanvas","undoLastAnnotation","newAnnotations","slice","redrawAnnotations","clearAllAnnotations","clearType","annotationsToRedraw","forEach","toggleFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","document","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","handleKeyDown","key","preventDefault","handleFullscreenChange","isCurrentlyFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","disconnect","close","addEventListener","removeEventListener","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","autoPlay","playsInline","muted","onMouseDown","onMouseMove","onMouseUp","style","cursor","pointerEvents","canDraw","onClick","title","map","backgroundColor","newThickness","Math","max","min","disabled","background","opacity","Array","from","entries","participant","get","el","_c","$RefreshReg$"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\n\nconst ARVideoConsultation = ({ \n    roomId, \n    userToken, \n    user,\n    userRole = 'doctor',\n    onError = () => {},\n    onConnectionChange = () => {} \n}) => {\n    // Debug: Log props to see what we're receiving\n    console.log('🐛 ARVideoConsultation props:', { \n        roomId, \n        userToken: userToken ? 'present' : 'missing',\n        user,\n        userRole\n    });\n    // State management\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState(new Map());\n    const [arSession, setArSession] = useState(null);\n    const [drawingMode, setDrawingMode] = useState(true);\n    const [currentColor, setCurrentColor] = useState('#00FF00');\n    const [lineThickness, setLineThickness] = useState(3);\n    const [annotations, setAnnotations] = useState([]);\n    \n    // Drawing state\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [currentPath, setCurrentPath] = useState([]);\n    \n    // Video call state\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n    const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n    \n    // Bridge connection state\n    const [bridgeConnected, setBridgeConnected] = useState(false);\n    \n    // Fullscreen state\n    const [isFullscreen, setIsFullscreen] = useState(false);\n    \n    // Refs\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const webrtcServiceRef = useRef(null);\n    const remoteVideoRefs = useRef(new Map());\n    const bridgeSocketRef = useRef(null);\n    const containerRef = useRef(null);\n    \n    // Simple drawing colors\n    const drawingColors = ['#00FF00', '#FF0000', '#0000FF', '#FFFF00'];\n    \n    // Initialize WebRTC service\n    const initializeWebRTCService = async () => {\n        try {\n            // Create WebRTC service instance\n            webrtcServiceRef.current = new WebRTCService();\n            \n            // Setup event listeners\n            setupWebRTCListeners();\n            \n            // Initialize and connect\n            await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n            \n            // Join room\n            await webrtcServiceRef.current.joinRoom(roomId, {\n                userRole,\n                capabilities: ['video', 'audio', 'ar-annotations']\n            });\n            \n            // Start video call\n            await webrtcServiceRef.current.startRoomVideoCall();\n            \n            setIsConnected(true);\n            onConnectionChange('connected');\n            \n        } catch (error) {\n            console.error('Failed to initialize WebRTC service:', error);\n            onError('Failed to connect to consultation service');\n            onConnectionChange('error');\n        }\n    };\n    \n    // Setup WebRTC event listeners\n    const setupWebRTCListeners = () => {\n        const service = webrtcServiceRef.current;\n        \n        // Connection events\n        service.on('initialized', () => {\n            console.log('WebRTC service initialized');\n        });\n        \n        service.on('disconnected', (data) => {\n            setIsConnected(false);\n            onConnectionChange('disconnected');\n        });\n        \n        // Video call events\n        service.on('video-call-started', () => {\n            console.log('Video call started');\n            const stream = service.getLocalStream();\n            setLocalStream(stream);\n            if (videoRef.current && stream) {\n                videoRef.current.srcObject = stream;\n            }\n            \n            // Create AR session when video call starts\n            createARSession();\n        });\n        \n        service.on('video-call-ended', () => {\n            console.log('Video call ended');\n            setLocalStream(null);\n            setRemoteStreams(new Map());\n        });\n        \n        // Stream events\n        service.on('remote-stream-added', ({ userId, stream }) => {\n            console.log('Remote stream added from user:', userId);\n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.set(userId, stream);\n                return newStreams;\n            });\n        });\n        \n        // Media control events\n        service.on('local-video-toggled', ({ enabled }) => {\n            setLocalVideoEnabled(enabled);\n        });\n        \n        service.on('local-audio-toggled', ({ enabled }) => {\n            setLocalAudioEnabled(enabled);\n        });\n        \n        // Room events\n        service.on('user-joined', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.set(data.user.id, data.user);\n                return newParticipants;\n            });\n        });\n        \n        service.on('user-left', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.delete(data.userId);\n                return newParticipants;\n            });\n            \n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.delete(data.userId);\n                return newStreams;\n            });\n        });\n        \n        // AR annotation events (keeping the existing AR functionality)\n        service.on('ar-annotation', handleIncomingAnnotation);\n        service.on('ar-annotations-cleared', handleAnnotationsCleared);\n        service.on('ar-error', handleARError);\n        \n        // Error handling\n        service.on('error', ({ type, error }) => {\n            console.error('WebRTC error:', type, error);\n            onError(`WebRTC error: ${error.message || error}`);\n        });\n    };\n    \n    // Audio/Video control functions\n    const toggleLocalVideo = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalVideo();\n            setLocalVideoEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    const toggleLocalAudio = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalAudio();\n            setLocalAudioEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    // AR Session Management\n    const createARSession = async () => {\n        try {\n            console.log('Creating AR session for room:', roomId);\n            \n            // Mock AR session creation for now (can be enhanced with real AR backend)\n            const mockARSession = {\n                id: `ar-session-${roomId}`,\n                roomId: roomId,\n                createdAt: new Date().toISOString(),\n                participants: [],\n                annotations: []\n            };\n            \n            setArSession(mockARSession);\n            \n            // Initialize annotation canvas\n            initializeAnnotationCanvas();\n            \n            console.log('AR session created successfully');\n            \n        } catch (error) {\n            console.error('Failed to create AR session:', error);\n            onError('Failed to initialize AR session');\n        }\n    };\n    \n    // Initialize annotation canvas for drawing\n    const initializeAnnotationCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.lineCap = 'round';\n            ctx.lineJoin = 'round';\n            ctx.globalAlpha = 0.8;\n            \n            // Clear any existing annotations\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            console.log('Annotation canvas initialized');\n        }\n    };\n    \n\n    // Connect to AR Bridge for annotation synchronization\n    const connectToBridge = async () => {\n        try {\n            const bridgeWs = new WebSocket('ws://localhost:8765');\n            \n            bridgeWs.onopen = () => {\n                console.log('🔗 Connected to AR Bridge');\n                setBridgeConnected(true);\n                \n                // Register with bridge as surgeon\n                bridgeWs.send(JSON.stringify({\n                    type: 'join_room',\n                    roomId: roomId,\n                    clientType: 'web_surgeon',\n                    userInfo: {\n                        name: user?.name || 'Surgeon',\n                        role: userRole,\n                        capabilities: ['annotation', 'video_call']\n                    }\n                }));\n            };\n            \n            bridgeWs.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    handleBridgeMessage(data);\n                } catch (error) {\n                    console.error('Error parsing bridge message:', error);\n                }\n            };\n            \n            bridgeWs.onclose = () => {\n                console.log('🔗 Disconnected from AR Bridge');\n                setBridgeConnected(false);\n                // Try to reconnect after delay\n                setTimeout(() => {\n                    if (roomId && userToken) {\n                        connectToBridge();\n                    }\n                }, 5000);\n            };\n            \n            bridgeWs.onerror = (error) => {\n                console.error('🔗 AR Bridge connection error:', error);\n                setBridgeConnected(false);\n            };\n            \n            bridgeSocketRef.current = bridgeWs;\n            \n        } catch (error) {\n            console.error('Failed to connect to AR bridge:', error);\n            setBridgeConnected(false);\n        }\n    };\n\n    // Handle messages from AR Bridge\n    const handleBridgeMessage = (data) => {\n        const messageType = data.type;\n        \n        if (messageType === 'annotation_received') {\n            // Receive annotation from field medic\n            const annotation = data.annotation;\n            console.log('📍 Received annotation from field medic:', annotation);\n            \n            // Add to annotations array (will be rendered on canvas)\n            setAnnotations(prev => [...prev, {\n                ...annotation,\n                source: 'field_medic',\n                timestamp: Date.now(),\n                id: `field_${Date.now()}`\n            }]);\n            \n        } else if (messageType === 'video_frame') {\n            // Receive video frame from field medic - this would be handled by WebRTC\n            console.log('📹 Received video frame from field medic');\n            \n        } else if (messageType === 'ar_client_joined') {\n            console.log('👥 AR client joined room:', data.roomId);\n            \n        } else if (messageType === 'surgeon_connected') {\n            console.log('👨‍⚕️ Surgeon connected notification');\n        }\n    };\n\n    // Send annotation to AR Bridge for field medic\n    const sendAnnotationToBridge = (annotation) => {\n        if (bridgeSocketRef.current && bridgeConnected) {\n            const message = {\n                type: 'annotation',\n                roomId: roomId,\n                annotation: {\n                    ...annotation,\n                    timestamp: Date.now(),\n                    source: 'web_surgeon'\n                },\n                timestamp: Date.now()\n            };\n            \n            bridgeSocketRef.current.send(JSON.stringify(message));\n            console.log('📍 Sent annotation to bridge:', annotation);\n        }\n    };\n    \n    \n    \n    \n    \n    \n    \n    \n    // Drawing event handlers\n    const handleMouseDown = useCallback((e) => {\n        if (!drawingMode || userRole !== 'doctor') return;\n        \n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        \n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        \n        const x = ((e.clientX - rect.left) * scaleX) / canvas.width;\n        const y = ((e.clientY - rect.top) * scaleY) / canvas.height;\n        \n        setIsDrawing(true);\n        setCurrentPath([{ x, y, timestamp: Date.now() }]);\n        \n        console.log('🖊️ Starting to draw at:', x, y);\n    }, [drawingMode, userRole]);\n    \n    const handleMouseMove = useCallback((e) => {\n        if (!isDrawing || !drawingMode || userRole !== 'doctor') return;\n        \n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        \n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        \n        const x = ((e.clientX - rect.left) * scaleX) / canvas.width;\n        const y = ((e.clientY - rect.top) * scaleY) / canvas.height;\n        \n        const newPath = [...currentPath, { x, y, timestamp: Date.now() }];\n        setCurrentPath(newPath);\n        \n        // Draw immediately for instant feedback\n        const ctx = canvas.getContext('2d');\n        ctx.globalAlpha = 0.8;\n        ctx.strokeStyle = currentColor;\n        ctx.lineWidth = lineThickness;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        \n        if (newPath.length >= 2) {\n            const prevPoint = newPath[newPath.length - 2];\n            const currPoint = newPath[newPath.length - 1];\n            \n            ctx.beginPath();\n            ctx.moveTo(prevPoint.x * canvas.width, prevPoint.y * canvas.height);\n            ctx.lineTo(currPoint.x * canvas.width, currPoint.y * canvas.height);\n            ctx.stroke();\n        }\n    }, [isDrawing, drawingMode, userRole, currentPath, currentColor, lineThickness]);\n    \n    const handleMouseUp = useCallback(() => {\n        if (!isDrawing || !drawingMode || userRole !== 'doctor') return;\n        \n        setIsDrawing(false);\n        \n        if (currentPath.length > 1) {\n            // Create simple annotation object\n            const annotation = {\n                id: Date.now(),\n                type: 'draw',\n                data: {\n                    points: currentPath,\n                    color: currentColor,\n                    thickness: lineThickness\n                },\n                timestamp: Date.now(),\n                userId: user?.id || 'current-user'\n            };\n            \n            // Add to local annotations immediately (always works)\n            setAnnotations(prev => [...prev, annotation]);\n            console.log('✅ Drawing saved:', annotation);\n            \n            // Try to sync with others (non-blocking)\n            try {\n                if (bridgeSocketRef.current && bridgeConnected) {\n                    sendAnnotationToBridge(annotation);\n                    console.log('📡 Sent to AR bridge');\n                }\n                \n                if (webrtcServiceRef.current) {\n                    webrtcServiceRef.current.emit('ar-annotation', {\n                        roomId: roomId,\n                        annotation: annotation,\n                        userId: user?.id\n                    });\n                    console.log('📡 Sent to WebRTC participants');\n                }\n            } catch (error) {\n                console.warn('⚠️ Sync failed (drawing still saved locally):', error);\n            }\n        }\n        \n        setCurrentPath([]);\n    }, [isDrawing, drawingMode, userRole, currentPath, currentColor, lineThickness, user?.id, roomId, bridgeConnected, sendAnnotationToBridge]);\n    \n    // Draw path on canvas\n    const drawPath = (path, color, thickness, isPreview = false) => {\n        const canvas = canvasRef.current;\n        if (!canvas || path.length < 2) return;\n        \n        const ctx = canvas.getContext('2d');\n        ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        \n        ctx.beginPath();\n        ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n        \n        for (let i = 1; i < path.length; i++) {\n            ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n        }\n        \n        ctx.stroke();\n    };\n    \n    // Handle incoming annotation\n    const handleIncomingAnnotation = (data) => {\n        console.log('Received annotation:', data);\n        \n        const annotation = data.annotation;\n        setAnnotations(prev => [...prev, annotation]);\n        \n        // Draw annotation on canvas\n        if (annotation.type === 'draw' && annotation.data.points) {\n            drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n        }\n    };\n    \n    \n    // Handle annotations cleared\n    const handleAnnotationsCleared = (data) => {\n        console.log('Annotations cleared:', data);\n        setAnnotations([]);\n        clearCanvas();\n    };\n    \n    // Handle AR errors\n    const handleARError = (data) => {\n        console.error('AR Error:', data);\n        onError(`AR Error: ${data.message}`);\n    };\n    \n    // Undo last annotation\n    const undoLastAnnotation = () => {\n        if (annotations.length > 0) {\n            const newAnnotations = annotations.slice(0, -1);\n            setAnnotations(newAnnotations);\n            \n            // Redraw canvas with remaining annotations\n            clearCanvas();\n            redrawAnnotations(newAnnotations);\n            \n            console.log('↩️ Undid last annotation');\n            \n            // Try to sync undo with others (non-blocking)\n            try {\n                if (webrtcServiceRef.current) {\n                    webrtcServiceRef.current.emit('ar-annotation-undo', {\n                        roomId: roomId,\n                        userId: user?.id\n                    });\n                }\n            } catch (error) {\n                console.warn('⚠️ Undo sync failed:', error);\n            }\n        }\n    };\n    \n    // Clear all annotations\n    const clearAllAnnotations = () => {\n        setAnnotations([]);\n        clearCanvas();\n        console.log('🗑️ Cleared all annotations');\n        \n        // Try to sync clear with others (non-blocking)\n        try {\n            if (webrtcServiceRef.current) {\n                webrtcServiceRef.current.emit('ar-annotations-clear', { \n                    roomId: roomId,\n                    clearType: 'all',\n                    userId: user?.id\n                });\n            }\n        } catch (error) {\n            console.warn('⚠️ Clear sync failed:', error);\n        }\n    };\n    \n    // Clear canvas\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    \n    // Redraw all annotations\n    const redrawAnnotations = (annotationsToRedraw) => {\n        clearCanvas();\n        \n        annotationsToRedraw.forEach(annotation => {\n            if (annotation.type === 'draw' && annotation.data.points) {\n                drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n            }\n        });\n    };\n    \n    // Fullscreen functionality\n    const toggleFullscreen = useCallback(async () => {\n        if (!containerRef.current) return;\n        \n        try {\n            if (!isFullscreen) {\n                // Enter fullscreen\n                if (containerRef.current.requestFullscreen) {\n                    await containerRef.current.requestFullscreen();\n                } else if (containerRef.current.webkitRequestFullscreen) {\n                    await containerRef.current.webkitRequestFullscreen();\n                } else if (containerRef.current.mozRequestFullScreen) {\n                    await containerRef.current.mozRequestFullScreen();\n                } else if (containerRef.current.msRequestFullscreen) {\n                    await containerRef.current.msRequestFullscreen();\n                }\n                setIsFullscreen(true);\n                console.log('🔍 Entered fullscreen mode');\n            } else {\n                // Exit fullscreen\n                if (document.exitFullscreen) {\n                    await document.exitFullscreen();\n                } else if (document.webkitExitFullscreen) {\n                    await document.webkitExitFullscreen();\n                } else if (document.mozCancelFullScreen) {\n                    await document.mozCancelFullScreen();\n                } else if (document.msExitFullscreen) {\n                    await document.msExitFullscreen();\n                }\n                setIsFullscreen(false);\n                console.log('🔍 Exited fullscreen mode');\n            }\n        } catch (error) {\n            console.error('Fullscreen error:', error);\n        }\n    }, [isFullscreen]);\n\n    // Handle keyboard shortcuts\n    const handleKeyDown = useCallback((event) => {\n        if (event.key === 'f' || event.key === 'F') {\n            event.preventDefault();\n            toggleFullscreen();\n        } else if (event.key === 'Escape') {\n            if (isFullscreen) {\n                setIsFullscreen(false);\n            }\n        }\n    }, [isFullscreen, toggleFullscreen]);\n\n    // Listen for fullscreen change events\n    const handleFullscreenChange = useCallback(() => {\n        const isCurrentlyFullscreen = !!(\n            document.fullscreenElement ||\n            document.webkitFullscreenElement ||\n            document.mozFullScreenElement ||\n            document.msFullscreenElement\n        );\n        setIsFullscreen(isCurrentlyFullscreen);\n    }, []);\n\n    // WebRTC peer connections are handled by the centralized WebRTC service\n    \n    // Initialize component\n    useEffect(() => {\n        if (roomId && userToken) {\n            initializeWebRTCService();\n            connectToBridge();\n        }\n        \n        return () => {\n            // Cleanup WebRTC service\n            if (webrtcServiceRef.current) {\n                webrtcServiceRef.current.disconnect();\n            }\n            \n            // Close bridge connection\n            if (bridgeSocketRef.current) {\n                bridgeSocketRef.current.close();\n                bridgeSocketRef.current = null;\n                setBridgeConnected(false);\n            }\n        };\n    }, [roomId, userToken]);\n\n    // Setup keyboard and fullscreen event listeners\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n        document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n        document.addEventListener('msfullscreenchange', handleFullscreenChange);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n            document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);\n            document.removeEventListener('mozfullscreenchange', handleFullscreenChange);\n            document.removeEventListener('msfullscreenchange', handleFullscreenChange);\n        };\n    }, [handleKeyDown, handleFullscreenChange]);\n    \n    return (\n        <div \n            ref={containerRef}\n            className={`ar-video-consultation ${isFullscreen ? 'fullscreen' : ''}`}\n        >\n            {/* Header */}\n            <div className=\"consultation-header\">\n                <h2>🏥 AR Video Consultation</h2>\n                <div className=\"status-indicators\">\n                    <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>\n                        {isConnected ? '🟢' : '🔴 '}\n                    </span>\n                    <span className={`status-indicator ${bridgeConnected ? 'connected' : 'disconnected'}`}>\n                        {bridgeConnected ? '🔗' : '🔗 '}\n                    </span>\n                    <span className=\"participant-count\">\n                        👥 {participants.size + 1} participants\n                    </span>\n                    {arSession && (\n                        <span className=\"ar-status\">\n                            ✨ AR Session Active\n                        </span>\n                    )}\n                </div>\n            </div>\n            \n            {/* Main video and annotation area */}\n            <div className=\"video-annotation-container\">\n                <div className=\"video-wrapper\">\n                    {/* Main Video Stream */}\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted={userRole === 'field_medic'}\n                        className=\"consultation-video\"\n                    />\n                    \n                    {/* AR Annotation Canvas Overlay */}\n                    <canvas\n                        ref={canvasRef}\n                        className=\"annotation-canvas\"\n                        width={1280}\n                        height={720}\n                        onMouseDown={handleMouseDown}\n                        onMouseMove={handleMouseMove}\n                        onMouseUp={handleMouseUp}\n                        style={{ \n                            cursor: drawingMode ? 'crosshair' : 'default',\n                            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n                        }}\n                    />\n                    \n                    {/* Live Stream Status Indicator */}\n                    <div className=\"video-stream-status\">\n                        {localStream && (\n                            <div className=\"stream-indicator local\">\n                                <span className=\"indicator-dot\"></span>\n                                Live: {userRole === 'doctor' ? 'Doctor' : 'Field Medic'}\n                            </div>\n                        )}\n                        {remoteStreams.size > 0 && (\n                            <div className=\"stream-indicator remote\">\n                                <span className=\"indicator-dot\"></span>\n                                Remote: {remoteStreams.size} connected\n                            </div>\n                        )}\n                    </div>\n                    \n                    {/* AR Session Status */}\n                    {arSession && (\n                        <div className=\"ar-session-indicator\">\n                            <span className=\"ar-indicator\">✨</span>\n                            AR Session Active\n                        </div>\n                    )}\n                    \n                    {/* Simplified Drawing Tools (for doctors and surgeons) */}\n                    {(() => {\n                        const canDraw = userRole === 'doctor' || userRole === 'surgeon';\n                        console.log('🎨 Checking drawing tools render condition:', { userRole, canDraw });\n                        return canDraw;\n                    })() && (\n                        <div className=\"floating-drawing-tools\">\n                            <div className=\"drawing-toolbar\">\n                                {/* Drawing Mode Toggle */}\n                                <button \n                                    className={`tool-toggle ${drawingMode ? 'drawing' : 'viewing'}`}\n                                    onClick={() => {\n                                        setDrawingMode(!drawingMode);\n                                        console.log('🖊️ Drawing mode:', !drawingMode ? 'ON' : 'OFF');\n                                    }}\n                                    title={drawingMode ? 'Switch to viewing mode' : 'Switch to drawing mode'}\n                                >\n                                    {drawingMode ? '✏️' : '👆'}\n                                </button>\n                                \n                                {drawingMode && (\n                                    <>\n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Color Selection */}\n                                        <div className=\"quick-colors\">\n                                            {drawingColors.map(color => (\n                                                <button\n                                                    key={color}\n                                                    className={`color-dot ${currentColor === color ? 'active' : ''}`}\n                                                    style={{ backgroundColor: color }}\n                                                    onClick={() => {\n                                                        setCurrentColor(color);\n                                                        console.log('🎨 Color changed to:', color);\n                                                    }}\n                                                    title={`Use ${color} color`}\n                                                />\n                                            ))}\n                                        </div>\n                                        \n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Thickness Control */}\n                                        <div className=\"thickness-control\">\n                                            <button \n                                                onClick={() => {\n                                                    const newThickness = Math.max(1, lineThickness - 1);\n                                                    setLineThickness(newThickness);\n                                                    console.log('📏 Thickness:', newThickness);\n                                                }}\n                                                className=\"thickness-btn\"\n                                                title=\"Decrease thickness\"\n                                            >\n                                                ➖\n                                            </button>\n                                            <span className=\"thickness-value\">{lineThickness}</span>\n                                            <button \n                                                onClick={() => {\n                                                    const newThickness = Math.min(10, lineThickness + 1);\n                                                    setLineThickness(newThickness);\n                                                    console.log('📏 Thickness:', newThickness);\n                                                }}\n                                                className=\"thickness-btn\"\n                                                title=\"Increase thickness\"\n                                            >\n                                                ➕\n                                            </button>\n                                        </div>\n                                        \n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Undo Button */}\n                                        <button \n                                            className=\"undo-btn\"\n                                            onClick={undoLastAnnotation}\n                                            disabled={annotations.length === 0}\n                                            title=\"Undo last drawing\"\n                                            style={{\n                                                background: annotations.length > 0 \n                                                    ? 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)'\n                                                    : 'rgba(255, 255, 255, 0.1)',\n                                                opacity: annotations.length > 0 ? 1 : 0.5\n                                            }}\n                                        >\n                                            ↩️\n                                        </button>\n                                        \n                                        {/* Clear Button */}\n                                        <button \n                                            className=\"clear-btn\"\n                                            onClick={clearAllAnnotations}\n                                            disabled={annotations.length === 0}\n                                            title=\"Clear all drawings\"\n                                            style={{\n                                                opacity: annotations.length > 0 ? 1 : 0.5\n                                            }}\n                                        >\n                                            🗑️\n                                        </button>\n                                    </>\n                                )}\n                            </div>\n                            \n                            {/* Drawing Status */}\n                            {drawingMode && (\n                                <div className=\"drawing-status\">\n                                    <span>✏️ Drawing Mode</span>\n                                    <span>🎨 {currentColor}</span>\n                                    <span>📏 {lineThickness}px</span>\n                                    {annotations.length > 0 && <span>📝 {annotations.length} drawings</span>}\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n            \n            {/* Video Controls */}\n            <div className=\"video-controls\">\n                <button \n                    onClick={toggleLocalVideo}\n                    className={`control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`}\n                    title={localVideoEnabled ? 'Turn off video' : 'Turn on video'}\n                >\n                    {localVideoEnabled ? '📹 Video On' : '📹 Video Off'}\n                </button>\n                <button \n                    onClick={toggleLocalAudio}\n                    className={`control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`}\n                    title={localAudioEnabled ? 'Mute microphone' : 'Unmute microphone'}\n                >\n                    {localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'}\n                </button>\n                <button \n                    onClick={toggleFullscreen}\n                    className=\"control-btn fullscreen-btn\"\n                    title={isFullscreen ? 'Exit fullscreen (ESC)' : 'Enter fullscreen (F)'}\n                >\n                    {isFullscreen ? '🔍 Exit Fullscreen' : '🔍 Fullscreen'}\n                </button>\n            </div>\n\n            {/* Compact Remote Video Streams - Picture in Picture Style */}\n            {remoteStreams.size > 0 && (\n                <div className=\"remote-videos-pip\">\n                    {Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n                        const participant = participants.get(userId);\n                        return (\n                            <div key={userId} className=\"pip-video-container\">\n                                <video\n                                    ref={(el) => {\n                                        if (el && stream) {\n                                            el.srcObject = stream;\n                                            remoteVideoRefs.current.set(userId, el);\n                                        }\n                                    }}\n                                    autoPlay\n                                    playsInline\n                                    muted\n                                    className=\"pip-video\"\n                                />\n                                <div className=\"pip-video-label\">\n                                    {participant?.name || `User ${userId}`}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n\n            \n            {/* Annotation info */}\n            {annotations.length > 0 && (\n                <div className=\"annotation-info\">\n                    <span>📝 {annotations.length} annotations active</span>\n                </div>\n            )}\n\n            {/* Keyboard shortcuts indicator */}\n            {!isFullscreen && (\n                <div className=\"keyboard-shortcuts\">\n                    <span>Press <kbd>F</kbd> for fullscreen</span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ARVideoConsultation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}