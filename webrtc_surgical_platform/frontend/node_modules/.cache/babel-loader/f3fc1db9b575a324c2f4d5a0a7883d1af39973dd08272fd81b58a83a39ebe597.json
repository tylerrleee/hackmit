{"ast":null,"code":"/**\n * Frontend External Configuration Manager\n * Handles dynamic API URLs for local vs external (Ngrok) deployments\n */\n\nclass FrontendExternalConfig {\n  constructor() {\n    this.config = this.initializeConfig();\n    this.loadFromEnvironment();\n    this.detectExternalMode();\n  }\n  initializeConfig() {\n    return {\n      // Default local configuration\n      apiBaseUrl: 'http://localhost:3001',\n      websocketUrl: 'ws://localhost:8765',\n      // External mode settings\n      externalMode: false,\n      externalApiUrl: null,\n      externalWebsocketUrl: null,\n      // Runtime configuration\n      isExternal: false,\n      currentApiUrl: null,\n      currentWebsocketUrl: null\n    };\n  }\n  loadFromEnvironment() {\n    // Check for React environment variables\n    if (process.env.REACT_APP_API_URL) {\n      this.config.apiBaseUrl = process.env.REACT_APP_API_URL;\n      this.config.externalApiUrl = process.env.REACT_APP_API_URL;\n    }\n    if (process.env.REACT_APP_WEBSOCKET_URL) {\n      this.config.websocketUrl = process.env.REACT_APP_WEBSOCKET_URL;\n      this.config.externalWebsocketUrl = process.env.REACT_APP_WEBSOCKET_URL;\n    }\n    if (process.env.REACT_APP_EXTERNAL_MODE === 'true') {\n      this.config.externalMode = true;\n    }\n  }\n  detectExternalMode() {\n    // Auto-detect if running with external URLs\n    const hostname = window.location.hostname;\n    const isNgrok = hostname.includes('ngrok-free.app') || hostname.includes('ngrok.io') || hostname.includes('ngrok.app');\n    if (isNgrok || this.config.externalMode) {\n      this.config.isExternal = true;\n      this.setExternalMode();\n    } else {\n      this.setLocalMode();\n    }\n  }\n  setLocalMode() {\n    this.config.isExternal = false;\n    this.config.currentApiUrl = this.config.apiBaseUrl;\n    this.config.currentWebsocketUrl = this.config.websocketUrl;\n    console.log('üè† Frontend running in LOCAL mode');\n  }\n  setExternalMode() {\n    this.config.isExternal = true;\n    this.config.currentApiUrl = this.config.externalApiUrl || this.config.apiBaseUrl;\n    this.config.currentWebsocketUrl = this.config.externalWebsocketUrl || this.config.websocketUrl;\n    console.log('üåê Frontend running in EXTERNAL mode');\n  }\n  updateExternalUrls(urls) {\n    /**\n     * Update configuration with dynamically generated external URLs\n     * @param {Object} urls - Object containing external URLs\n     */\n    if (urls.api || urls.backend) {\n      this.config.externalApiUrl = urls.api || urls.backend;\n      this.config.currentApiUrl = this.config.externalApiUrl;\n    }\n    if (urls.websocket || urls.bridge) {\n      this.config.externalWebsocketUrl = urls.websocket || urls.bridge;\n      this.config.currentWebsocketUrl = this.config.externalWebsocketUrl;\n    }\n    console.log('üîÑ Frontend external URLs updated:', {\n      api: this.config.currentApiUrl,\n      websocket: this.config.currentWebsocketUrl\n    });\n  }\n  getApiUrl() {\n    return this.config.currentApiUrl;\n  }\n  getWebSocketUrl() {\n    return this.config.currentWebsocketUrl;\n  }\n  isExternalMode() {\n    return this.config.isExternal;\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n\n  // Utility methods for making API calls\n  async fetch(endpoint, options = {}) {\n    const url = `${this.getApiUrl()}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;\n    const defaultOptions = {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options.headers || {})\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, defaultOptions);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response;\n    } catch (error) {\n      console.error('üö® API request failed:', {\n        url,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  // WebSocket connection helper\n  createWebSocket() {\n    const wsUrl = this.getWebSocketUrl();\n    console.log('üîå Connecting WebSocket to:', wsUrl);\n    try {\n      return new WebSocket(wsUrl);\n    } catch (error) {\n      console.error('üö® WebSocket connection failed:', {\n        url: wsUrl,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  // Health check for external connectivity\n  async testConnectivity() {\n    try {\n      const response = await this.fetch('/api/health');\n      const data = await response.json();\n      console.log('‚úÖ Connectivity test passed:', data);\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('‚ùå Connectivity test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Display current configuration info\n  logConfiguration() {\n    console.log('üîß Frontend Configuration:', {\n      mode: this.config.isExternal ? 'External' : 'Local',\n      apiUrl: this.config.currentApiUrl,\n      websocketUrl: this.config.currentWebsocketUrl,\n      hostname: window.location.hostname,\n      externalMode: this.config.externalMode\n    });\n  }\n}\n\n// Create singleton instance\nconst frontendExternalConfig = new FrontendExternalConfig();\n\n// Log configuration on startup\nfrontendExternalConfig.logConfiguration();\n\n// Export as default\nexport default frontendExternalConfig;","map":{"version":3,"names":["FrontendExternalConfig","constructor","config","initializeConfig","loadFromEnvironment","detectExternalMode","apiBaseUrl","websocketUrl","externalMode","externalApiUrl","externalWebsocketUrl","isExternal","currentApiUrl","currentWebsocketUrl","process","env","REACT_APP_API_URL","REACT_APP_WEBSOCKET_URL","REACT_APP_EXTERNAL_MODE","hostname","window","location","isNgrok","includes","setExternalMode","setLocalMode","console","log","updateExternalUrls","urls","api","backend","websocket","bridge","getApiUrl","getWebSocketUrl","isExternalMode","getConfig","fetch","endpoint","options","url","startsWith","defaultOptions","credentials","headers","response","ok","Error","status","error","message","createWebSocket","wsUrl","WebSocket","testConnectivity","data","json","success","logConfiguration","mode","apiUrl","frontendExternalConfig"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/config/externalConfig.js"],"sourcesContent":["/**\n * Frontend External Configuration Manager\n * Handles dynamic API URLs for local vs external (Ngrok) deployments\n */\n\nclass FrontendExternalConfig {\n    constructor() {\n        this.config = this.initializeConfig();\n        this.loadFromEnvironment();\n        this.detectExternalMode();\n    }\n\n    initializeConfig() {\n        return {\n            // Default local configuration\n            apiBaseUrl: 'http://localhost:3001',\n            websocketUrl: 'ws://localhost:8765',\n            \n            // External mode settings\n            externalMode: false,\n            externalApiUrl: null,\n            externalWebsocketUrl: null,\n            \n            // Runtime configuration\n            isExternal: false,\n            currentApiUrl: null,\n            currentWebsocketUrl: null\n        };\n    }\n\n    loadFromEnvironment() {\n        // Check for React environment variables\n        if (process.env.REACT_APP_API_URL) {\n            this.config.apiBaseUrl = process.env.REACT_APP_API_URL;\n            this.config.externalApiUrl = process.env.REACT_APP_API_URL;\n        }\n\n        if (process.env.REACT_APP_WEBSOCKET_URL) {\n            this.config.websocketUrl = process.env.REACT_APP_WEBSOCKET_URL;\n            this.config.externalWebsocketUrl = process.env.REACT_APP_WEBSOCKET_URL;\n        }\n\n        if (process.env.REACT_APP_EXTERNAL_MODE === 'true') {\n            this.config.externalMode = true;\n        }\n    }\n\n    detectExternalMode() {\n        // Auto-detect if running with external URLs\n        const hostname = window.location.hostname;\n        const isNgrok = hostname.includes('ngrok-free.app') || \n                       hostname.includes('ngrok.io') || \n                       hostname.includes('ngrok.app');\n        \n        if (isNgrok || this.config.externalMode) {\n            this.config.isExternal = true;\n            this.setExternalMode();\n        } else {\n            this.setLocalMode();\n        }\n    }\n\n    setLocalMode() {\n        this.config.isExternal = false;\n        this.config.currentApiUrl = this.config.apiBaseUrl;\n        this.config.currentWebsocketUrl = this.config.websocketUrl;\n        \n        console.log('üè† Frontend running in LOCAL mode');\n    }\n\n    setExternalMode() {\n        this.config.isExternal = true;\n        this.config.currentApiUrl = this.config.externalApiUrl || this.config.apiBaseUrl;\n        this.config.currentWebsocketUrl = this.config.externalWebsocketUrl || this.config.websocketUrl;\n        \n        console.log('üåê Frontend running in EXTERNAL mode');\n    }\n\n    updateExternalUrls(urls) {\n        /**\n         * Update configuration with dynamically generated external URLs\n         * @param {Object} urls - Object containing external URLs\n         */\n        if (urls.api || urls.backend) {\n            this.config.externalApiUrl = urls.api || urls.backend;\n            this.config.currentApiUrl = this.config.externalApiUrl;\n        }\n\n        if (urls.websocket || urls.bridge) {\n            this.config.externalWebsocketUrl = urls.websocket || urls.bridge;\n            this.config.currentWebsocketUrl = this.config.externalWebsocketUrl;\n        }\n\n        console.log('üîÑ Frontend external URLs updated:', {\n            api: this.config.currentApiUrl,\n            websocket: this.config.currentWebsocketUrl\n        });\n    }\n\n    getApiUrl() {\n        return this.config.currentApiUrl;\n    }\n\n    getWebSocketUrl() {\n        return this.config.currentWebsocketUrl;\n    }\n\n    isExternalMode() {\n        return this.config.isExternal;\n    }\n\n    getConfig() {\n        return { ...this.config };\n    }\n\n    // Utility methods for making API calls\n    async fetch(endpoint, options = {}) {\n        const url = `${this.getApiUrl()}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;\n        \n        const defaultOptions = {\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n                ...(options.headers || {})\n            },\n            ...(options)\n        };\n\n        try {\n            const response = await fetch(url, defaultOptions);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            return response;\n        } catch (error) {\n            console.error('üö® API request failed:', { url, error: error.message });\n            throw error;\n        }\n    }\n\n    // WebSocket connection helper\n    createWebSocket() {\n        const wsUrl = this.getWebSocketUrl();\n        console.log('üîå Connecting WebSocket to:', wsUrl);\n        \n        try {\n            return new WebSocket(wsUrl);\n        } catch (error) {\n            console.error('üö® WebSocket connection failed:', { url: wsUrl, error: error.message });\n            throw error;\n        }\n    }\n\n    // Health check for external connectivity\n    async testConnectivity() {\n        try {\n            const response = await this.fetch('/api/health');\n            const data = await response.json();\n            \n            console.log('‚úÖ Connectivity test passed:', data);\n            return { success: true, data };\n        } catch (error) {\n            console.error('‚ùå Connectivity test failed:', error);\n            return { success: false, error: error.message };\n        }\n    }\n\n    // Display current configuration info\n    logConfiguration() {\n        console.log('üîß Frontend Configuration:', {\n            mode: this.config.isExternal ? 'External' : 'Local',\n            apiUrl: this.config.currentApiUrl,\n            websocketUrl: this.config.currentWebsocketUrl,\n            hostname: window.location.hostname,\n            externalMode: this.config.externalMode\n        });\n    }\n}\n\n// Create singleton instance\nconst frontendExternalConfig = new FrontendExternalConfig();\n\n// Log configuration on startup\nfrontendExternalConfig.logConfiguration();\n\n// Export as default\nexport default frontendExternalConfig;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}