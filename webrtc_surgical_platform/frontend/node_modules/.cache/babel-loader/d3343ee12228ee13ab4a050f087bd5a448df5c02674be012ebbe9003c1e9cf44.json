{"ast":null,"code":"var _jsxFileName = \"/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ARVideoConsultation = ({\n  roomId,\n  userToken,\n  user,\n  userRole = 'doctor',\n  onError = () => {},\n  onConnectionChange = () => {}\n}) => {\n  _s();\n  // State management\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState(new Map());\n  const [arSession, setArSession] = useState(null);\n  const [drawingMode, setDrawingMode] = useState(true);\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#FF0000');\n  const [lineThickness, setLineThickness] = useState(3);\n  const [annotations, setAnnotations] = useState([]);\n\n  // Drawing state\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n\n  // Video call state\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n  const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n\n  // Bridge connection state\n  const [bridgeConnected, setBridgeConnected] = useState(false);\n\n  // Refs\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const webrtcServiceRef = useRef(null);\n  const remoteVideoRefs = useRef(new Map());\n  const bridgeSocketRef = useRef(null);\n\n  // Available drawing tools\n  const drawingTools = {\n    pen: {\n      name: 'Pen',\n      icon: '✏️'\n    },\n    marker: {\n      name: 'Marker',\n      icon: '🖍️'\n    },\n    arrow: {\n      name: 'Arrow',\n      icon: '➡️'\n    },\n    circle: {\n      name: 'Circle',\n      icon: '⭕'\n    },\n    rectangle: {\n      name: 'Rectangle',\n      icon: '⬛'\n    },\n    text: {\n      name: 'Text',\n      icon: '📝'\n    }\n  };\n  const drawingColors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000'];\n\n  // Initialize component\n  useEffect(() => {\n    if (roomId && userToken) {\n      initializeWebRTCService();\n      connectToBridge();\n    }\n    return () => {\n      // Cleanup WebRTC service\n      if (webrtcServiceRef.current) {\n        webrtcServiceRef.current.disconnect();\n      }\n\n      // Close bridge connection\n      if (bridgeSocketRef.current) {\n        bridgeSocketRef.current.close();\n        bridgeSocketRef.current = null;\n        setBridgeConnected(false);\n      }\n    };\n  }, [roomId, userToken]);\n\n  // Initialize WebRTC service\n  const initializeWebRTCService = async () => {\n    try {\n      // Create WebRTC service instance\n      webrtcServiceRef.current = new WebRTCService();\n\n      // Setup event listeners\n      setupWebRTCListeners();\n\n      // Initialize and connect\n      await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n\n      // Join room\n      await webrtcServiceRef.current.joinRoom(roomId, {\n        userRole,\n        capabilities: ['video', 'audio', 'ar-annotations']\n      });\n\n      // Start video call\n      await webrtcServiceRef.current.startRoomVideoCall();\n      setIsConnected(true);\n      onConnectionChange('connected');\n    } catch (error) {\n      console.error('Failed to initialize WebRTC service:', error);\n      onError('Failed to connect to consultation service');\n      onConnectionChange('error');\n    }\n  };\n\n  // Setup WebRTC event listeners\n  const setupWebRTCListeners = () => {\n    const service = webrtcServiceRef.current;\n\n    // Connection events\n    service.on('initialized', () => {\n      console.log('WebRTC service initialized');\n    });\n    service.on('disconnected', data => {\n      setIsConnected(false);\n      onConnectionChange('disconnected');\n    });\n\n    // Video call events\n    service.on('video-call-started', () => {\n      console.log('Video call started');\n      const stream = service.getLocalStream();\n      setLocalStream(stream);\n      if (videoRef.current && stream) {\n        videoRef.current.srcObject = stream;\n      }\n\n      // Create AR session when video call starts\n      createARSession();\n    });\n    service.on('video-call-ended', () => {\n      console.log('Video call ended');\n      setLocalStream(null);\n      setRemoteStreams(new Map());\n    });\n\n    // Stream events\n    service.on('remote-stream-added', ({\n      userId,\n      stream\n    }) => {\n      console.log('Remote stream added from user:', userId);\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.set(userId, stream);\n        return newStreams;\n      });\n    });\n\n    // Media control events\n    service.on('local-video-toggled', ({\n      enabled\n    }) => {\n      setLocalVideoEnabled(enabled);\n    });\n    service.on('local-audio-toggled', ({\n      enabled\n    }) => {\n      setLocalAudioEnabled(enabled);\n    });\n\n    // Room events\n    service.on('user-joined', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.set(data.user.id, data.user);\n        return newParticipants;\n      });\n    });\n    service.on('user-left', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.delete(data.userId);\n        return newParticipants;\n      });\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.delete(data.userId);\n        return newStreams;\n      });\n    });\n\n    // AR annotation events (keeping the existing AR functionality)\n    service.on('ar-annotation', handleIncomingAnnotation);\n    service.on('ar-annotations-cleared', handleAnnotationsCleared);\n    service.on('ar-error', handleARError);\n\n    // Error handling\n    service.on('error', ({\n      type,\n      error\n    }) => {\n      console.error('WebRTC error:', type, error);\n      onError(`WebRTC error: ${error.message || error}`);\n    });\n  };\n\n  // Audio/Video control functions\n  const toggleLocalVideo = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalVideo();\n      setLocalVideoEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n  const toggleLocalAudio = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalAudio();\n      setLocalAudioEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n\n  // AR Session Management\n  const createARSession = async () => {\n    try {\n      console.log('Creating AR session for room:', roomId);\n\n      // Mock AR session creation for now (can be enhanced with real AR backend)\n      const mockARSession = {\n        id: `ar-session-${roomId}`,\n        roomId: roomId,\n        createdAt: new Date().toISOString(),\n        participants: [],\n        annotations: []\n      };\n      setArSession(mockARSession);\n\n      // Initialize annotation canvas\n      initializeAnnotationCanvas();\n      console.log('AR session created successfully');\n    } catch (error) {\n      console.error('Failed to create AR session:', error);\n      onError('Failed to initialize AR session');\n    }\n  };\n\n  // Initialize annotation canvas for drawing\n  const initializeAnnotationCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.globalAlpha = 0.8;\n\n      // Clear any existing annotations\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      console.log('Annotation canvas initialized');\n    }\n  };\n\n  // Initialize camera for field medics\n  const initializeCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          frameRate: {\n            ideal: 30\n          }\n        },\n        audio: true\n      });\n\n      // Stream is now managed by WebRTC service\n      if (videoRef.current) {\n        const localStream = webrtcServiceRef.current.getLocalStream();\n        if (localStream) {\n          videoRef.current.srcObject = localStream;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to get user media:', error);\n      onError('Failed to access camera and microphone');\n    }\n  };\n\n  // Connect to AR Bridge for annotation synchronization\n  const connectToBridge = async () => {\n    try {\n      const bridgeWs = new WebSocket('ws://localhost:8765');\n      bridgeWs.onopen = () => {\n        console.log('🔗 Connected to AR Bridge');\n        setBridgeConnected(true);\n\n        // Register with bridge as surgeon\n        bridgeWs.send(JSON.stringify({\n          type: 'join_room',\n          roomId: roomId,\n          clientType: 'web_surgeon',\n          userInfo: {\n            name: (user === null || user === void 0 ? void 0 : user.name) || 'Surgeon',\n            role: userRole,\n            capabilities: ['annotation', 'video_call']\n          }\n        }));\n      };\n      bridgeWs.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          handleBridgeMessage(data);\n        } catch (error) {\n          console.error('Error parsing bridge message:', error);\n        }\n      };\n      bridgeWs.onclose = () => {\n        console.log('🔗 Disconnected from AR Bridge');\n        setBridgeConnected(false);\n        // Try to reconnect after delay\n        setTimeout(() => {\n          if (roomId && userToken) {\n            connectToBridge();\n          }\n        }, 5000);\n      };\n      bridgeWs.onerror = error => {\n        console.error('🔗 AR Bridge connection error:', error);\n        setBridgeConnected(false);\n      };\n      bridgeSocketRef.current = bridgeWs;\n    } catch (error) {\n      console.error('Failed to connect to AR bridge:', error);\n      setBridgeConnected(false);\n    }\n  };\n\n  // Handle messages from AR Bridge\n  const handleBridgeMessage = data => {\n    const messageType = data.type;\n    if (messageType === 'annotation_received') {\n      // Receive annotation from field medic\n      const annotation = data.annotation;\n      console.log('📍 Received annotation from field medic:', annotation);\n\n      // Add to annotations array (will be rendered on canvas)\n      setAnnotations(prev => [...prev, {\n        ...annotation,\n        source: 'field_medic',\n        timestamp: Date.now(),\n        id: `field_${Date.now()}`\n      }]);\n    } else if (messageType === 'video_frame') {\n      // Receive video frame from field medic - this would be handled by WebRTC\n      console.log('📹 Received video frame from field medic');\n    } else if (messageType === 'ar_client_joined') {\n      console.log('👥 AR client joined room:', data.roomId);\n    } else if (messageType === 'surgeon_connected') {\n      console.log('👨‍⚕️ Surgeon connected notification');\n    }\n  };\n\n  // Send annotation to AR Bridge for field medic\n  const sendAnnotationToBridge = annotation => {\n    if (bridgeSocketRef.current && bridgeConnected) {\n      const message = {\n        type: 'annotation',\n        roomId: roomId,\n        annotation: {\n          ...annotation,\n          timestamp: Date.now(),\n          source: 'web_surgeon'\n        },\n        timestamp: Date.now()\n      };\n      bridgeSocketRef.current.send(JSON.stringify(message));\n      console.log('📍 Sent annotation to bridge:', annotation);\n    }\n  };\n\n  // Join consultation room - handled by WebRTC service\n  const joinRoom = () => {\n    // Room joining is handled by WebRTC service in useEffect\n    setIsConnected(true);\n    onConnectionChange(true);\n\n    // Create AR session if doctor\n    if (userRole === 'doctor') {\n      createARSession();\n    }\n  };\n\n  // Handle room joined\n  const handleRoomJoined = data => {\n    console.log('Joined room:', data);\n\n    // Create AR session if doctor\n    if (userRole === 'doctor') {\n      createARSession();\n    }\n  };\n\n  // Handle new participant\n  const handleUserJoined = data => {\n    console.log('User joined:', data);\n    const newParticipants = new Map(participants);\n    newParticipants.set(data.user.id, data.user);\n    setParticipants(newParticipants);\n\n    // WebRTC connections are handled automatically by the service\n  };\n\n  // Handle participant leaving\n  const handleUserLeft = data => {\n    console.log('User left:', data);\n    const newParticipants = new Map(participants);\n    newParticipants.delete(data.userId);\n    setParticipants(newParticipants);\n\n    // Peer connection cleanup is handled by WebRTC service\n  };\n\n  // Handle AR session created\n  const handleARSessionCreated = data => {\n    console.log('AR session created:', data);\n    setArSession(data);\n  };\n\n  // Handle AR session available\n  const handleARSessionAvailable = data => {\n    console.log('AR session available:', data);\n    setArSession(data);\n  };\n\n  // Drawing event handlers\n  const handleMouseDown = useCallback(e => {\n    if (!drawingMode || !arSession) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / rect.width;\n    const y = (e.clientY - rect.top) / rect.height;\n    setIsDrawing(true);\n    setCurrentPath([{\n      x,\n      y,\n      timestamp: Date.now()\n    }]);\n  }, [drawingMode, arSession]);\n  const handleMouseMove = useCallback(e => {\n    if (!isDrawing || !drawingMode || !arSession) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / rect.width;\n    const y = (e.clientY - rect.top) / rect.height;\n    const newPath = [...currentPath, {\n      x,\n      y,\n      timestamp: Date.now()\n    }];\n    setCurrentPath(newPath);\n\n    // Draw preview on canvas\n    drawPath(newPath, currentColor, lineThickness, true);\n  }, [isDrawing, drawingMode, arSession, currentPath, currentColor, lineThickness]);\n  const handleMouseUp = useCallback(() => {\n    if (!isDrawing || !drawingMode || !arSession) return;\n    setIsDrawing(false);\n    if (currentPath.length > 1) {\n      // Create annotation object\n      const annotation = {\n        type: currentTool,\n        data: {\n          points: currentPath,\n          color: currentColor,\n          thickness: lineThickness\n        },\n        metadata: {\n          tool: currentTool,\n          timestamp: Date.now()\n        }\n      };\n\n      // Send annotation through WebRTC service\n      if (webrtcServiceRef.current) {\n        // Add to local annotations\n        const newAnnotation = {\n          id: Date.now(),\n          ...annotation,\n          userId: (user === null || user === void 0 ? void 0 : user.id) || 'current-user',\n          userName: (user === null || user === void 0 ? void 0 : user.name) || 'Current User'\n        };\n        setAnnotations(prev => [...prev, newAnnotation]);\n\n        // Send to other participants and field medic via bridge\n        console.log('Sending AR annotation:', newAnnotation);\n        try {\n          // Send to AR bridge for field medic\n          sendAnnotationToBridge(newAnnotation);\n\n          // Also send through WebRTC service for other web participants\n          webrtcServiceRef.current.emit('ar-annotation', {\n            roomId: roomId,\n            annotation: newAnnotation,\n            userId: user === null || user === void 0 ? void 0 : user.id\n          });\n          console.log('AR annotation synchronized across all participants');\n        } catch (error) {\n          console.error('Failed to sync annotation:', error);\n        }\n      }\n    }\n    setCurrentPath([]);\n  }, [isDrawing, drawingMode, arSession, currentPath, currentTool, currentColor, lineThickness]);\n\n  // Draw path on canvas\n  const drawPath = (path, color, thickness, isPreview = false) => {\n    const canvas = canvasRef.current;\n    if (!canvas || path.length < 2) return;\n    const ctx = canvas.getContext('2d');\n    ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = thickness;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n    }\n    ctx.stroke();\n  };\n\n  // Handle incoming annotation\n  const handleIncomingAnnotation = data => {\n    console.log('Received annotation:', data);\n    const annotation = data.annotation;\n    setAnnotations(prev => [...prev, annotation]);\n\n    // Draw annotation on canvas\n    if (annotation.type === 'draw' && annotation.data.points) {\n      drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n    }\n  };\n\n  // Handle annotation history\n  const handleAnnotationHistory = data => {\n    console.log('Received annotation history:', data);\n    setAnnotations(data.annotations);\n\n    // Redraw all annotations\n    redrawAnnotations(data.annotations);\n  };\n\n  // Handle annotations cleared\n  const handleAnnotationsCleared = data => {\n    console.log('Annotations cleared:', data);\n    setAnnotations([]);\n    clearCanvas();\n  };\n\n  // Handle AR errors\n  const handleARError = data => {\n    console.error('AR Error:', data);\n    onError(`AR Error: ${data.message}`);\n  };\n\n  // Clear all annotations\n  const clearAllAnnotations = () => {\n    if (arSession) {\n      // Clear annotations through WebRTC service\n      webrtcServiceRef.current.emit('ar-annotations-clear', {\n        clearType: 'all'\n      });\n    }\n  };\n\n  // Clear canvas\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  };\n\n  // Redraw all annotations\n  const redrawAnnotations = annotationsToRedraw => {\n    clearCanvas();\n    annotationsToRedraw.forEach(annotation => {\n      if (annotation.type === 'draw' && annotation.data.points) {\n        drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n      }\n    });\n  };\n\n  // WebRTC peer connections are handled by the centralized WebRTC service\n\n  // Cleanup\n  const cleanup = async () => {\n    try {\n      if (webrtcServiceRef.current) {\n        await webrtcServiceRef.current.endRoomVideoCall();\n        await webrtcServiceRef.current.disconnect();\n      }\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'ar-video-consultation',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consultation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFE5 AR Video Consultation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-indicators\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${isConnected ? 'connected' : 'disconnected'}`,\n          children: isConnected ? '🟢 Connected' : '🔴 Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${bridgeConnected ? 'connected' : 'disconnected'}`,\n          children: bridgeConnected ? '🔗 Bridge Connected' : '🔗 Bridge Offline'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"participant-count\",\n          children: [\"\\uD83D\\uDC65 \", participants.size + 1, \" participants\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ar-status\",\n          children: \"\\u2728 AR Session Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-annotation-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: userRole === 'field_medic',\n          className: \"consultation-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          className: \"annotation-canvas\",\n          width: 1280,\n          height: 720,\n          onMouseDown: handleMouseDown,\n          onMouseMove: handleMouseMove,\n          onMouseUp: handleMouseUp,\n          style: {\n            cursor: drawingMode ? 'crosshair' : 'default',\n            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-stream-status\",\n          children: [localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator local\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 33\n            }, this), \"Live: \", userRole === 'doctor' ? 'Doctor' : 'Field Medic']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 29\n          }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator remote\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 33\n            }, this), \"Remote: \", remoteStreams.size, \" connected\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ar-session-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ar-indicator\",\n            children: \"\\u2728\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 29\n          }, this), \"AR Session Active\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 25\n        }, this), userRole === 'doctor' && arSession && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"floating-drawing-tools\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drawing-toolbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `tool-toggle ${drawingMode ? 'drawing' : 'viewing'}`,\n              onClick: () => setDrawingMode(!drawingMode),\n              title: drawingMode ? 'Switch to viewing mode' : 'Switch to drawing mode',\n              children: drawingMode ? '✏️' : '👆'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 33\n            }, this), drawingMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"quick-tools\",\n                children: Object.entries(drawingTools).map(([key, tool]) => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `tool-btn ${currentTool === key ? 'active' : ''}`,\n                  onClick: () => setCurrentTool(key),\n                  title: tool.name,\n                  children: tool.icon\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 716,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"quick-colors\",\n                children: drawingColors.slice(0, 4).map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `color-dot ${currentColor === color ? 'active' : ''}`,\n                  style: {\n                    backgroundColor: color\n                  },\n                  onClick: () => setCurrentColor(color),\n                  title: `Use ${color} color`\n                }, color, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 734,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"thickness-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setLineThickness(Math.max(1, lineThickness - 1)),\n                  className: \"thickness-btn\",\n                  title: \"Decrease thickness\",\n                  children: \"\\u2796\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 748,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"thickness-value\",\n                  children: lineThickness\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 755,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setLineThickness(Math.min(10, lineThickness + 1)),\n                  className: \"thickness-btn\",\n                  title: \"Increase thickness\",\n                  children: \"\\u2795\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 756,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tool-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-btn\",\n                onClick: clearAllAnnotations,\n                title: \"Clear all annotations\",\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalVideo,\n        className: `control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`,\n        title: localVideoEnabled ? 'Turn off video' : 'Turn on video',\n        children: localVideoEnabled ? '📹 Video On' : '📹 Video Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalAudio,\n        className: `control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`,\n        title: localAudioEnabled ? 'Mute microphone' : 'Unmute microphone',\n        children: localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 13\n    }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remote-videos-pip\",\n      children: Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n        const participant = participants.get(userId);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pip-video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: el => {\n              if (el && stream) {\n                el.srcObject = stream;\n                remoteVideoRefs.current.set(userId, el);\n              }\n            },\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            className: \"pip-video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pip-video-label\",\n            children: (participant === null || participant === void 0 ? void 0 : participant.name) || `User ${userId}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 33\n          }, this)]\n        }, userId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 17\n    }, this), annotations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-info\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uD83D\\uDCDD \", annotations.length, \" annotations active\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 626,\n    columnNumber: 9\n  }, this);\n};\n_s(ARVideoConsultation, \"e3vnaroWapsqc6UuhaXtylpgNJ4=\");\n_c = ARVideoConsultation;\nexport default ARVideoConsultation;\nvar _c;\n$RefreshReg$(_c, \"ARVideoConsultation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","WebRTCService","jsxDEV","_jsxDEV","Fragment","_Fragment","ARVideoConsultation","roomId","userToken","user","userRole","onError","onConnectionChange","_s","isConnected","setIsConnected","participants","setParticipants","Map","arSession","setArSession","drawingMode","setDrawingMode","currentTool","setCurrentTool","currentColor","setCurrentColor","lineThickness","setLineThickness","annotations","setAnnotations","isDrawing","setIsDrawing","currentPath","setCurrentPath","localStream","setLocalStream","remoteStreams","setRemoteStreams","localVideoEnabled","setLocalVideoEnabled","localAudioEnabled","setLocalAudioEnabled","bridgeConnected","setBridgeConnected","videoRef","canvasRef","webrtcServiceRef","remoteVideoRefs","bridgeSocketRef","drawingTools","pen","name","icon","marker","arrow","circle","rectangle","text","drawingColors","initializeWebRTCService","connectToBridge","current","disconnect","close","setupWebRTCListeners","initialize","joinRoom","capabilities","startRoomVideoCall","error","console","service","on","log","data","stream","getLocalStream","srcObject","createARSession","userId","prev","newStreams","set","enabled","newParticipants","id","delete","handleIncomingAnnotation","handleAnnotationsCleared","handleARError","type","message","toggleLocalVideo","newState","toggleLocalAudio","mockARSession","createdAt","Date","toISOString","initializeAnnotationCanvas","canvas","ctx","getContext","lineCap","lineJoin","globalAlpha","clearRect","width","height","initializeCamera","navigator","mediaDevices","getUserMedia","video","ideal","frameRate","audio","bridgeWs","WebSocket","onopen","send","JSON","stringify","clientType","userInfo","role","onmessage","event","parse","handleBridgeMessage","onclose","setTimeout","onerror","messageType","annotation","source","timestamp","now","sendAnnotationToBridge","handleRoomJoined","handleUserJoined","handleUserLeft","handleARSessionCreated","handleARSessionAvailable","handleMouseDown","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","handleMouseMove","newPath","drawPath","handleMouseUp","length","points","color","thickness","metadata","tool","newAnnotation","userName","emit","path","isPreview","strokeStyle","lineWidth","beginPath","moveTo","i","lineTo","stroke","handleAnnotationHistory","redrawAnnotations","clearCanvas","clearAllAnnotations","clearType","annotationsToRedraw","forEach","cleanup","endRoomVideoCall","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","ref","autoPlay","playsInline","muted","onMouseDown","onMouseMove","onMouseUp","style","cursor","pointerEvents","onClick","title","Object","entries","map","key","slice","backgroundColor","Math","max","min","Array","from","participant","get","el","_c","$RefreshReg$"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\n\nconst ARVideoConsultation = ({ \n    roomId, \n    userToken, \n    user,\n    userRole = 'doctor',\n    onError = () => {},\n    onConnectionChange = () => {} \n}) => {\n    // State management\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState(new Map());\n    const [arSession, setArSession] = useState(null);\n    const [drawingMode, setDrawingMode] = useState(true);\n    const [currentTool, setCurrentTool] = useState('pen');\n    const [currentColor, setCurrentColor] = useState('#FF0000');\n    const [lineThickness, setLineThickness] = useState(3);\n    const [annotations, setAnnotations] = useState([]);\n    \n    // Drawing state\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [currentPath, setCurrentPath] = useState([]);\n    \n    // Video call state\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n    const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n    \n    // Bridge connection state\n    const [bridgeConnected, setBridgeConnected] = useState(false);\n    \n    // Refs\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const webrtcServiceRef = useRef(null);\n    const remoteVideoRefs = useRef(new Map());\n    const bridgeSocketRef = useRef(null);\n    \n    // Available drawing tools\n    const drawingTools = {\n        pen: { name: 'Pen', icon: '✏️' },\n        marker: { name: 'Marker', icon: '🖍️' },\n        arrow: { name: 'Arrow', icon: '➡️' },\n        circle: { name: 'Circle', icon: '⭕' },\n        rectangle: { name: 'Rectangle', icon: '⬛' },\n        text: { name: 'Text', icon: '📝' }\n    };\n    \n    const drawingColors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000'];\n    \n    // Initialize component\n    useEffect(() => {\n        if (roomId && userToken) {\n            initializeWebRTCService();\n            connectToBridge();\n        }\n        \n        return () => {\n            // Cleanup WebRTC service\n            if (webrtcServiceRef.current) {\n                webrtcServiceRef.current.disconnect();\n            }\n            \n            // Close bridge connection\n            if (bridgeSocketRef.current) {\n                bridgeSocketRef.current.close();\n                bridgeSocketRef.current = null;\n                setBridgeConnected(false);\n            }\n        };\n    }, [roomId, userToken]);\n    \n    // Initialize WebRTC service\n    const initializeWebRTCService = async () => {\n        try {\n            // Create WebRTC service instance\n            webrtcServiceRef.current = new WebRTCService();\n            \n            // Setup event listeners\n            setupWebRTCListeners();\n            \n            // Initialize and connect\n            await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n            \n            // Join room\n            await webrtcServiceRef.current.joinRoom(roomId, {\n                userRole,\n                capabilities: ['video', 'audio', 'ar-annotations']\n            });\n            \n            // Start video call\n            await webrtcServiceRef.current.startRoomVideoCall();\n            \n            setIsConnected(true);\n            onConnectionChange('connected');\n            \n        } catch (error) {\n            console.error('Failed to initialize WebRTC service:', error);\n            onError('Failed to connect to consultation service');\n            onConnectionChange('error');\n        }\n    };\n    \n    // Setup WebRTC event listeners\n    const setupWebRTCListeners = () => {\n        const service = webrtcServiceRef.current;\n        \n        // Connection events\n        service.on('initialized', () => {\n            console.log('WebRTC service initialized');\n        });\n        \n        service.on('disconnected', (data) => {\n            setIsConnected(false);\n            onConnectionChange('disconnected');\n        });\n        \n        // Video call events\n        service.on('video-call-started', () => {\n            console.log('Video call started');\n            const stream = service.getLocalStream();\n            setLocalStream(stream);\n            if (videoRef.current && stream) {\n                videoRef.current.srcObject = stream;\n            }\n            \n            // Create AR session when video call starts\n            createARSession();\n        });\n        \n        service.on('video-call-ended', () => {\n            console.log('Video call ended');\n            setLocalStream(null);\n            setRemoteStreams(new Map());\n        });\n        \n        // Stream events\n        service.on('remote-stream-added', ({ userId, stream }) => {\n            console.log('Remote stream added from user:', userId);\n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.set(userId, stream);\n                return newStreams;\n            });\n        });\n        \n        // Media control events\n        service.on('local-video-toggled', ({ enabled }) => {\n            setLocalVideoEnabled(enabled);\n        });\n        \n        service.on('local-audio-toggled', ({ enabled }) => {\n            setLocalAudioEnabled(enabled);\n        });\n        \n        // Room events\n        service.on('user-joined', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.set(data.user.id, data.user);\n                return newParticipants;\n            });\n        });\n        \n        service.on('user-left', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.delete(data.userId);\n                return newParticipants;\n            });\n            \n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.delete(data.userId);\n                return newStreams;\n            });\n        });\n        \n        // AR annotation events (keeping the existing AR functionality)\n        service.on('ar-annotation', handleIncomingAnnotation);\n        service.on('ar-annotations-cleared', handleAnnotationsCleared);\n        service.on('ar-error', handleARError);\n        \n        // Error handling\n        service.on('error', ({ type, error }) => {\n            console.error('WebRTC error:', type, error);\n            onError(`WebRTC error: ${error.message || error}`);\n        });\n    };\n    \n    // Audio/Video control functions\n    const toggleLocalVideo = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalVideo();\n            setLocalVideoEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    const toggleLocalAudio = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalAudio();\n            setLocalAudioEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    // AR Session Management\n    const createARSession = async () => {\n        try {\n            console.log('Creating AR session for room:', roomId);\n            \n            // Mock AR session creation for now (can be enhanced with real AR backend)\n            const mockARSession = {\n                id: `ar-session-${roomId}`,\n                roomId: roomId,\n                createdAt: new Date().toISOString(),\n                participants: [],\n                annotations: []\n            };\n            \n            setArSession(mockARSession);\n            \n            // Initialize annotation canvas\n            initializeAnnotationCanvas();\n            \n            console.log('AR session created successfully');\n            \n        } catch (error) {\n            console.error('Failed to create AR session:', error);\n            onError('Failed to initialize AR session');\n        }\n    };\n    \n    // Initialize annotation canvas for drawing\n    const initializeAnnotationCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.lineCap = 'round';\n            ctx.lineJoin = 'round';\n            ctx.globalAlpha = 0.8;\n            \n            // Clear any existing annotations\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            console.log('Annotation canvas initialized');\n        }\n    };\n    \n    // Initialize camera for field medics\n    const initializeCamera = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: { ideal: 1280 },\n                    height: { ideal: 720 },\n                    frameRate: { ideal: 30 }\n                },\n                audio: true\n            });\n            \n            // Stream is now managed by WebRTC service\n            if (videoRef.current) {\n                const localStream = webrtcServiceRef.current.getLocalStream();\n                if (localStream) {\n                    videoRef.current.srcObject = localStream;\n                }\n            }\n            \n        } catch (error) {\n            console.error('Failed to get user media:', error);\n            onError('Failed to access camera and microphone');\n        }\n    };\n\n    // Connect to AR Bridge for annotation synchronization\n    const connectToBridge = async () => {\n        try {\n            const bridgeWs = new WebSocket('ws://localhost:8765');\n            \n            bridgeWs.onopen = () => {\n                console.log('🔗 Connected to AR Bridge');\n                setBridgeConnected(true);\n                \n                // Register with bridge as surgeon\n                bridgeWs.send(JSON.stringify({\n                    type: 'join_room',\n                    roomId: roomId,\n                    clientType: 'web_surgeon',\n                    userInfo: {\n                        name: user?.name || 'Surgeon',\n                        role: userRole,\n                        capabilities: ['annotation', 'video_call']\n                    }\n                }));\n            };\n            \n            bridgeWs.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    handleBridgeMessage(data);\n                } catch (error) {\n                    console.error('Error parsing bridge message:', error);\n                }\n            };\n            \n            bridgeWs.onclose = () => {\n                console.log('🔗 Disconnected from AR Bridge');\n                setBridgeConnected(false);\n                // Try to reconnect after delay\n                setTimeout(() => {\n                    if (roomId && userToken) {\n                        connectToBridge();\n                    }\n                }, 5000);\n            };\n            \n            bridgeWs.onerror = (error) => {\n                console.error('🔗 AR Bridge connection error:', error);\n                setBridgeConnected(false);\n            };\n            \n            bridgeSocketRef.current = bridgeWs;\n            \n        } catch (error) {\n            console.error('Failed to connect to AR bridge:', error);\n            setBridgeConnected(false);\n        }\n    };\n\n    // Handle messages from AR Bridge\n    const handleBridgeMessage = (data) => {\n        const messageType = data.type;\n        \n        if (messageType === 'annotation_received') {\n            // Receive annotation from field medic\n            const annotation = data.annotation;\n            console.log('📍 Received annotation from field medic:', annotation);\n            \n            // Add to annotations array (will be rendered on canvas)\n            setAnnotations(prev => [...prev, {\n                ...annotation,\n                source: 'field_medic',\n                timestamp: Date.now(),\n                id: `field_${Date.now()}`\n            }]);\n            \n        } else if (messageType === 'video_frame') {\n            // Receive video frame from field medic - this would be handled by WebRTC\n            console.log('📹 Received video frame from field medic');\n            \n        } else if (messageType === 'ar_client_joined') {\n            console.log('👥 AR client joined room:', data.roomId);\n            \n        } else if (messageType === 'surgeon_connected') {\n            console.log('👨‍⚕️ Surgeon connected notification');\n        }\n    };\n\n    // Send annotation to AR Bridge for field medic\n    const sendAnnotationToBridge = (annotation) => {\n        if (bridgeSocketRef.current && bridgeConnected) {\n            const message = {\n                type: 'annotation',\n                roomId: roomId,\n                annotation: {\n                    ...annotation,\n                    timestamp: Date.now(),\n                    source: 'web_surgeon'\n                },\n                timestamp: Date.now()\n            };\n            \n            bridgeSocketRef.current.send(JSON.stringify(message));\n            console.log('📍 Sent annotation to bridge:', annotation);\n        }\n    };\n    \n    // Join consultation room - handled by WebRTC service\n    const joinRoom = () => {\n        // Room joining is handled by WebRTC service in useEffect\n        setIsConnected(true);\n        onConnectionChange(true);\n        \n        // Create AR session if doctor\n        if (userRole === 'doctor') {\n            createARSession();\n        }\n    };\n    \n    // Handle room joined\n    const handleRoomJoined = (data) => {\n        console.log('Joined room:', data);\n        \n        // Create AR session if doctor\n        if (userRole === 'doctor') {\n            createARSession();\n        }\n    };\n    \n    // Handle new participant\n    const handleUserJoined = (data) => {\n        console.log('User joined:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.set(data.user.id, data.user);\n        setParticipants(newParticipants);\n        \n        // WebRTC connections are handled automatically by the service\n    };\n    \n    // Handle participant leaving\n    const handleUserLeft = (data) => {\n        console.log('User left:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.delete(data.userId);\n        setParticipants(newParticipants);\n        \n        // Peer connection cleanup is handled by WebRTC service\n    };\n    \n    \n    // Handle AR session created\n    const handleARSessionCreated = (data) => {\n        console.log('AR session created:', data);\n        setArSession(data);\n    };\n    \n    // Handle AR session available\n    const handleARSessionAvailable = (data) => {\n        console.log('AR session available:', data);\n        setArSession(data);\n    };\n    \n    // Drawing event handlers\n    const handleMouseDown = useCallback((e) => {\n        if (!drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        setIsDrawing(true);\n        setCurrentPath([{ x, y, timestamp: Date.now() }]);\n    }, [drawingMode, arSession]);\n    \n    const handleMouseMove = useCallback((e) => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        const newPath = [...currentPath, { x, y, timestamp: Date.now() }];\n        setCurrentPath(newPath);\n        \n        // Draw preview on canvas\n        drawPath(newPath, currentColor, lineThickness, true);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentColor, lineThickness]);\n    \n    const handleMouseUp = useCallback(() => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        setIsDrawing(false);\n        \n        if (currentPath.length > 1) {\n            // Create annotation object\n            const annotation = {\n                type: currentTool,\n                data: {\n                    points: currentPath,\n                    color: currentColor,\n                    thickness: lineThickness\n                },\n                metadata: {\n                    tool: currentTool,\n                    timestamp: Date.now()\n                }\n            };\n            \n            // Send annotation through WebRTC service\n            if (webrtcServiceRef.current) {\n                // Add to local annotations\n                const newAnnotation = {\n                    id: Date.now(),\n                    ...annotation,\n                    userId: user?.id || 'current-user',\n                    userName: user?.name || 'Current User'\n                };\n                setAnnotations(prev => [...prev, newAnnotation]);\n                \n                // Send to other participants and field medic via bridge\n                console.log('Sending AR annotation:', newAnnotation);\n                \n                try {\n                    // Send to AR bridge for field medic\n                    sendAnnotationToBridge(newAnnotation);\n                    \n                    // Also send through WebRTC service for other web participants\n                    webrtcServiceRef.current.emit('ar-annotation', {\n                        roomId: roomId,\n                        annotation: newAnnotation,\n                        userId: user?.id\n                    });\n                    \n                    console.log('AR annotation synchronized across all participants');\n                } catch (error) {\n                    console.error('Failed to sync annotation:', error);\n                }\n            }\n        }\n        \n        setCurrentPath([]);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentTool, currentColor, lineThickness]);\n    \n    // Draw path on canvas\n    const drawPath = (path, color, thickness, isPreview = false) => {\n        const canvas = canvasRef.current;\n        if (!canvas || path.length < 2) return;\n        \n        const ctx = canvas.getContext('2d');\n        ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        \n        ctx.beginPath();\n        ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n        \n        for (let i = 1; i < path.length; i++) {\n            ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n        }\n        \n        ctx.stroke();\n    };\n    \n    // Handle incoming annotation\n    const handleIncomingAnnotation = (data) => {\n        console.log('Received annotation:', data);\n        \n        const annotation = data.annotation;\n        setAnnotations(prev => [...prev, annotation]);\n        \n        // Draw annotation on canvas\n        if (annotation.type === 'draw' && annotation.data.points) {\n            drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n        }\n    };\n    \n    // Handle annotation history\n    const handleAnnotationHistory = (data) => {\n        console.log('Received annotation history:', data);\n        setAnnotations(data.annotations);\n        \n        // Redraw all annotations\n        redrawAnnotations(data.annotations);\n    };\n    \n    // Handle annotations cleared\n    const handleAnnotationsCleared = (data) => {\n        console.log('Annotations cleared:', data);\n        setAnnotations([]);\n        clearCanvas();\n    };\n    \n    // Handle AR errors\n    const handleARError = (data) => {\n        console.error('AR Error:', data);\n        onError(`AR Error: ${data.message}`);\n    };\n    \n    // Clear all annotations\n    const clearAllAnnotations = () => {\n        if (arSession) {\n            // Clear annotations through WebRTC service\n            webrtcServiceRef.current.emit('ar-annotations-clear', { clearType: 'all' });\n        }\n    };\n    \n    // Clear canvas\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    \n    // Redraw all annotations\n    const redrawAnnotations = (annotationsToRedraw) => {\n        clearCanvas();\n        \n        annotationsToRedraw.forEach(annotation => {\n            if (annotation.type === 'draw' && annotation.data.points) {\n                drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n            }\n        });\n    };\n    \n    // WebRTC peer connections are handled by the centralized WebRTC service\n    \n    // Cleanup\n    const cleanup = async () => {\n        try {\n            if (webrtcServiceRef.current) {\n                await webrtcServiceRef.current.endRoomVideoCall();\n                await webrtcServiceRef.current.disconnect();\n            }\n        } catch (error) {\n            console.error('Error during cleanup:', error);\n        }\n    };\n    \n    return (\n        <div className={'ar-video-consultation'}>\n            {/* Header */}\n            <div className=\"consultation-header\">\n                <h2>🏥 AR Video Consultation</h2>\n                <div className=\"status-indicators\">\n                    <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>\n                        {isConnected ? '🟢 Connected' : '🔴 Disconnected'}\n                    </span>\n                    <span className={`status-indicator ${bridgeConnected ? 'connected' : 'disconnected'}`}>\n                        {bridgeConnected ? '🔗 Bridge Connected' : '🔗 Bridge Offline'}\n                    </span>\n                    <span className=\"participant-count\">\n                        👥 {participants.size + 1} participants\n                    </span>\n                    {arSession && (\n                        <span className=\"ar-status\">\n                            ✨ AR Session Active\n                        </span>\n                    )}\n                </div>\n            </div>\n            \n            {/* Main video and annotation area */}\n            <div className=\"video-annotation-container\">\n                <div className=\"video-wrapper\">\n                    {/* Main Video Stream */}\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted={userRole === 'field_medic'}\n                        className=\"consultation-video\"\n                    />\n                    \n                    {/* AR Annotation Canvas Overlay */}\n                    <canvas\n                        ref={canvasRef}\n                        className=\"annotation-canvas\"\n                        width={1280}\n                        height={720}\n                        onMouseDown={handleMouseDown}\n                        onMouseMove={handleMouseMove}\n                        onMouseUp={handleMouseUp}\n                        style={{ \n                            cursor: drawingMode ? 'crosshair' : 'default',\n                            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n                        }}\n                    />\n                    \n                    {/* Live Stream Status Indicator */}\n                    <div className=\"video-stream-status\">\n                        {localStream && (\n                            <div className=\"stream-indicator local\">\n                                <span className=\"indicator-dot\"></span>\n                                Live: {userRole === 'doctor' ? 'Doctor' : 'Field Medic'}\n                            </div>\n                        )}\n                        {remoteStreams.size > 0 && (\n                            <div className=\"stream-indicator remote\">\n                                <span className=\"indicator-dot\"></span>\n                                Remote: {remoteStreams.size} connected\n                            </div>\n                        )}\n                    </div>\n                    \n                    {/* AR Session Status */}\n                    {arSession && (\n                        <div className=\"ar-session-indicator\">\n                            <span className=\"ar-indicator\">✨</span>\n                            AR Session Active\n                        </div>\n                    )}\n                    \n                    {/* Floating Drawing Tools Overlay (only for doctors) */}\n                    {userRole === 'doctor' && arSession && (\n                        <div className=\"floating-drawing-tools\">\n                            <div className=\"drawing-toolbar\">\n                                <button \n                                    className={`tool-toggle ${drawingMode ? 'drawing' : 'viewing'}`}\n                                    onClick={() => setDrawingMode(!drawingMode)}\n                                    title={drawingMode ? 'Switch to viewing mode' : 'Switch to drawing mode'}\n                                >\n                                    {drawingMode ? '✏️' : '👆'}\n                                </button>\n                                \n                                {drawingMode && (\n                                    <>\n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Drawing Tools */}\n                                        <div className=\"quick-tools\">\n                                            {Object.entries(drawingTools).map(([key, tool]) => (\n                                                <button\n                                                    key={key}\n                                                    className={`tool-btn ${currentTool === key ? 'active' : ''}`}\n                                                    onClick={() => setCurrentTool(key)}\n                                                    title={tool.name}\n                                                >\n                                                    {tool.icon}\n                                                </button>\n                                            ))}\n                                        </div>\n                                        \n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Color Palette */}\n                                        <div className=\"quick-colors\">\n                                            {drawingColors.slice(0, 4).map(color => (\n                                                <button\n                                                    key={color}\n                                                    className={`color-dot ${currentColor === color ? 'active' : ''}`}\n                                                    style={{ backgroundColor: color }}\n                                                    onClick={() => setCurrentColor(color)}\n                                                    title={`Use ${color} color`}\n                                                />\n                                            ))}\n                                        </div>\n                                        \n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Thickness Control */}\n                                        <div className=\"thickness-control\">\n                                            <button \n                                                onClick={() => setLineThickness(Math.max(1, lineThickness - 1))}\n                                                className=\"thickness-btn\"\n                                                title=\"Decrease thickness\"\n                                            >\n                                                ➖\n                                            </button>\n                                            <span className=\"thickness-value\">{lineThickness}</span>\n                                            <button \n                                                onClick={() => setLineThickness(Math.min(10, lineThickness + 1))}\n                                                className=\"thickness-btn\"\n                                                title=\"Increase thickness\"\n                                            >\n                                                ➕\n                                            </button>\n                                        </div>\n                                        \n                                        <div className=\"tool-separator\"></div>\n                                        \n                                        {/* Clear Button */}\n                                        <button \n                                            className=\"clear-btn\"\n                                            onClick={clearAllAnnotations}\n                                            title=\"Clear all annotations\"\n                                        >\n                                            🗑️\n                                        </button>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n            \n            {/* Video Controls */}\n            <div className=\"video-controls\">\n                <button \n                    onClick={toggleLocalVideo}\n                    className={`control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`}\n                    title={localVideoEnabled ? 'Turn off video' : 'Turn on video'}\n                >\n                    {localVideoEnabled ? '📹 Video On' : '📹 Video Off'}\n                </button>\n                <button \n                    onClick={toggleLocalAudio}\n                    className={`control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`}\n                    title={localAudioEnabled ? 'Mute microphone' : 'Unmute microphone'}\n                >\n                    {localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'}\n                </button>\n            </div>\n\n            {/* Compact Remote Video Streams - Picture in Picture Style */}\n            {remoteStreams.size > 0 && (\n                <div className=\"remote-videos-pip\">\n                    {Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n                        const participant = participants.get(userId);\n                        return (\n                            <div key={userId} className=\"pip-video-container\">\n                                <video\n                                    ref={(el) => {\n                                        if (el && stream) {\n                                            el.srcObject = stream;\n                                            remoteVideoRefs.current.set(userId, el);\n                                        }\n                                    }}\n                                    autoPlay\n                                    playsInline\n                                    muted\n                                    className=\"pip-video\"\n                                />\n                                <div className=\"pip-video-label\">\n                                    {participant?.name || `User ${userId}`}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n\n            \n            {/* Annotation info */}\n            {annotations.length > 0 && (\n                <div className=\"annotation-info\">\n                    <span>📝 {annotations.length} annotations active</span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ARVideoConsultation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}