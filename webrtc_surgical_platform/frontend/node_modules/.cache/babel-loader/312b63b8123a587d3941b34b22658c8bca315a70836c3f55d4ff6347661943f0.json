{"ast":null,"code":"var _jsxFileName = \"/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ARVideoConsultation = ({\n  roomId,\n  userToken,\n  user,\n  userRole = 'doctor',\n  onError = () => {},\n  onConnectionChange = () => {}\n}) => {\n  _s();\n  // State management\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState(new Map());\n  const [arSession, setArSession] = useState(null);\n  const [drawingMode, setDrawingMode] = useState(true);\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#FF0000');\n  const [lineThickness, setLineThickness] = useState(3);\n  const [annotations, setAnnotations] = useState([]);\n\n  // Drawing state\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n\n  // Video call state\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n  const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n\n  // Bridge connection state\n  const [bridgeConnected, setBridgeConnected] = useState(false);\n\n  // Refs\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const webrtcServiceRef = useRef(null);\n  const remoteVideoRefs = useRef(new Map());\n  const bridgeSocketRef = useRef(null);\n\n  // Available drawing tools\n  const drawingTools = {\n    pen: {\n      name: 'Pen',\n      icon: '✏️'\n    },\n    marker: {\n      name: 'Marker',\n      icon: '🖍️'\n    },\n    arrow: {\n      name: 'Arrow',\n      icon: '➡️'\n    },\n    circle: {\n      name: 'Circle',\n      icon: '⭕'\n    },\n    rectangle: {\n      name: 'Rectangle',\n      icon: '⬛'\n    },\n    text: {\n      name: 'Text',\n      icon: '📝'\n    }\n  };\n  const drawingColors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000'];\n\n  // Initialize component\n  useEffect(() => {\n    if (roomId && userToken) {\n      initializeWebRTCService();\n      connectToBridge();\n    }\n    return () => {\n      cleanup();\n    };\n  }, [roomId, userToken]);\n\n  // Initialize WebRTC service\n  const initializeWebRTCService = async () => {\n    try {\n      // Create WebRTC service instance\n      webrtcServiceRef.current = new WebRTCService();\n\n      // Setup event listeners\n      setupWebRTCListeners();\n\n      // Initialize and connect\n      await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n\n      // Join room\n      await webrtcServiceRef.current.joinRoom(roomId, {\n        userRole,\n        capabilities: ['video', 'audio', 'ar-annotations']\n      });\n\n      // Start video call\n      await webrtcServiceRef.current.startRoomVideoCall();\n      setIsConnected(true);\n      onConnectionChange('connected');\n    } catch (error) {\n      console.error('Failed to initialize WebRTC service:', error);\n      onError('Failed to connect to consultation service');\n      onConnectionChange('error');\n    }\n  };\n\n  // Setup WebRTC event listeners\n  const setupWebRTCListeners = () => {\n    const service = webrtcServiceRef.current;\n\n    // Connection events\n    service.on('initialized', () => {\n      console.log('WebRTC service initialized');\n    });\n    service.on('disconnected', data => {\n      setIsConnected(false);\n      onConnectionChange('disconnected');\n    });\n\n    // Video call events\n    service.on('video-call-started', () => {\n      console.log('Video call started');\n      const stream = service.getLocalStream();\n      setLocalStream(stream);\n      if (videoRef.current && stream) {\n        videoRef.current.srcObject = stream;\n      }\n\n      // Create AR session when video call starts\n      createARSession();\n    });\n    service.on('video-call-ended', () => {\n      console.log('Video call ended');\n      setLocalStream(null);\n      setRemoteStreams(new Map());\n    });\n\n    // Stream events\n    service.on('remote-stream-added', ({\n      userId,\n      stream\n    }) => {\n      console.log('Remote stream added from user:', userId);\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.set(userId, stream);\n        return newStreams;\n      });\n    });\n\n    // Media control events\n    service.on('local-video-toggled', ({\n      enabled\n    }) => {\n      setLocalVideoEnabled(enabled);\n    });\n    service.on('local-audio-toggled', ({\n      enabled\n    }) => {\n      setLocalAudioEnabled(enabled);\n    });\n\n    // Room events\n    service.on('user-joined', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.set(data.user.id, data.user);\n        return newParticipants;\n      });\n    });\n    service.on('user-left', data => {\n      setParticipants(prev => {\n        const newParticipants = new Map(prev);\n        newParticipants.delete(data.userId);\n        return newParticipants;\n      });\n      setRemoteStreams(prev => {\n        const newStreams = new Map(prev);\n        newStreams.delete(data.userId);\n        return newStreams;\n      });\n    });\n\n    // AR annotation events (keeping the existing AR functionality)\n    service.on('ar-annotation', handleIncomingAnnotation);\n    service.on('ar-annotations-cleared', handleAnnotationsCleared);\n    service.on('ar-error', handleARError);\n\n    // Error handling\n    service.on('error', ({\n      type,\n      error\n    }) => {\n      console.error('WebRTC error:', type, error);\n      onError(`WebRTC error: ${error.message || error}`);\n    });\n  };\n\n  // Audio/Video control functions\n  const toggleLocalVideo = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalVideo();\n      setLocalVideoEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n  const toggleLocalAudio = () => {\n    if (webrtcServiceRef.current) {\n      const newState = webrtcServiceRef.current.toggleLocalAudio();\n      setLocalAudioEnabled(newState);\n      return newState;\n    }\n    return false;\n  };\n\n  // AR Session Management\n  const createARSession = async () => {\n    try {\n      console.log('Creating AR session for room:', roomId);\n\n      // Mock AR session creation for now (can be enhanced with real AR backend)\n      const mockARSession = {\n        id: `ar-session-${roomId}`,\n        roomId: roomId,\n        createdAt: new Date().toISOString(),\n        participants: [],\n        annotations: []\n      };\n      setArSession(mockARSession);\n\n      // Initialize annotation canvas\n      initializeAnnotationCanvas();\n      console.log('AR session created successfully');\n    } catch (error) {\n      console.error('Failed to create AR session:', error);\n      onError('Failed to initialize AR session');\n    }\n  };\n\n  // Initialize annotation canvas for drawing\n  const initializeAnnotationCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.globalAlpha = 0.8;\n\n      // Clear any existing annotations\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      console.log('Annotation canvas initialized');\n    }\n  };\n\n  // Initialize camera for field medics\n  const initializeCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          frameRate: {\n            ideal: 30\n          }\n        },\n        audio: true\n      });\n\n      // Stream is now managed by WebRTC service\n      if (videoRef.current) {\n        const localStream = webrtcServiceRef.current.getLocalStream();\n        if (localStream) {\n          videoRef.current.srcObject = localStream;\n        }\n      }\n    } catch (error) {\n      console.error('Failed to get user media:', error);\n      onError('Failed to access camera and microphone');\n    }\n  };\n\n  // Join consultation room - handled by WebRTC service\n  const joinRoom = () => {\n    // Room joining is handled by WebRTC service in useEffect\n    setIsConnected(true);\n    onConnectionChange(true);\n\n    // Create AR session if doctor\n    if (userRole === 'doctor') {\n      createARSession();\n    }\n  };\n\n  // Handle room joined\n  const handleRoomJoined = data => {\n    console.log('Joined room:', data);\n\n    // Create AR session if doctor\n    if (userRole === 'doctor') {\n      createARSession();\n    }\n  };\n\n  // Handle new participant\n  const handleUserJoined = data => {\n    console.log('User joined:', data);\n    const newParticipants = new Map(participants);\n    newParticipants.set(data.user.id, data.user);\n    setParticipants(newParticipants);\n\n    // WebRTC connections are handled automatically by the service\n  };\n\n  // Handle participant leaving\n  const handleUserLeft = data => {\n    console.log('User left:', data);\n    const newParticipants = new Map(participants);\n    newParticipants.delete(data.userId);\n    setParticipants(newParticipants);\n\n    // Peer connection cleanup is handled by WebRTC service\n  };\n\n  // Handle AR session created\n  const handleARSessionCreated = data => {\n    console.log('AR session created:', data);\n    setArSession(data);\n  };\n\n  // Handle AR session available\n  const handleARSessionAvailable = data => {\n    console.log('AR session available:', data);\n    setArSession(data);\n  };\n\n  // Drawing event handlers\n  const handleMouseDown = useCallback(e => {\n    if (!drawingMode || !arSession) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / rect.width;\n    const y = (e.clientY - rect.top) / rect.height;\n    setIsDrawing(true);\n    setCurrentPath([{\n      x,\n      y,\n      timestamp: Date.now()\n    }]);\n  }, [drawingMode, arSession]);\n  const handleMouseMove = useCallback(e => {\n    if (!isDrawing || !drawingMode || !arSession) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / rect.width;\n    const y = (e.clientY - rect.top) / rect.height;\n    const newPath = [...currentPath, {\n      x,\n      y,\n      timestamp: Date.now()\n    }];\n    setCurrentPath(newPath);\n\n    // Draw preview on canvas\n    drawPath(newPath, currentColor, lineThickness, true);\n  }, [isDrawing, drawingMode, arSession, currentPath, currentColor, lineThickness]);\n  const handleMouseUp = useCallback(() => {\n    if (!isDrawing || !drawingMode || !arSession) return;\n    setIsDrawing(false);\n    if (currentPath.length > 1) {\n      // Send annotation to server\n      const annotation = {\n        type: currentTool,\n        data: {\n          points: currentPath,\n          color: currentColor,\n          thickness: lineThickness\n        },\n        metadata: {\n          tool: currentTool,\n          timestamp: Date.now()\n        }\n      };\n\n      // Send annotation through WebRTC service\n      if (webrtcServiceRef.current) {\n        // Add to local annotations\n        const newAnnotation = {\n          id: Date.now(),\n          ...annotation,\n          userId: (user === null || user === void 0 ? void 0 : user.id) || 'current-user',\n          userName: (user === null || user === void 0 ? void 0 : user.name) || 'Current User'\n        };\n        setAnnotations(prev => [...prev, newAnnotation]);\n\n        // Send to other participants (this would normally go through WebRTC data channels)\n        console.log('Sending AR annotation:', newAnnotation);\n\n        // For now, we'll use a mock socket emit - this can be enhanced with real WebRTC data channels\n        try {\n          // Mock annotation sync - in a real implementation, this would use WebRTC data channels\n          console.log('AR annotation synchronized across participants');\n        } catch (error) {\n          console.error('Failed to sync annotation:', error);\n        }\n      }\n    }\n    setCurrentPath([]);\n  }, [isDrawing, drawingMode, arSession, currentPath, currentTool, currentColor, lineThickness]);\n\n  // Draw path on canvas\n  const drawPath = (path, color, thickness, isPreview = false) => {\n    const canvas = canvasRef.current;\n    if (!canvas || path.length < 2) return;\n    const ctx = canvas.getContext('2d');\n    ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = thickness;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n    for (let i = 1; i < path.length; i++) {\n      ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n    }\n    ctx.stroke();\n  };\n\n  // Handle incoming annotation\n  const handleIncomingAnnotation = data => {\n    console.log('Received annotation:', data);\n    const annotation = data.annotation;\n    setAnnotations(prev => [...prev, annotation]);\n\n    // Draw annotation on canvas\n    if (annotation.type === 'draw' && annotation.data.points) {\n      drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n    }\n  };\n\n  // Handle annotation history\n  const handleAnnotationHistory = data => {\n    console.log('Received annotation history:', data);\n    setAnnotations(data.annotations);\n\n    // Redraw all annotations\n    redrawAnnotations(data.annotations);\n  };\n\n  // Handle annotations cleared\n  const handleAnnotationsCleared = data => {\n    console.log('Annotations cleared:', data);\n    setAnnotations([]);\n    clearCanvas();\n  };\n\n  // Handle AR errors\n  const handleARError = data => {\n    console.error('AR Error:', data);\n    onError(`AR Error: ${data.message}`);\n  };\n\n  // Clear all annotations\n  const clearAllAnnotations = () => {\n    if (arSession) {\n      // Clear annotations through WebRTC service\n      webrtcServiceRef.current.emit('ar-annotations-clear', {\n        clearType: 'all'\n      });\n    }\n  };\n\n  // Clear canvas\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  };\n\n  // Redraw all annotations\n  const redrawAnnotations = annotationsToRedraw => {\n    clearCanvas();\n    annotationsToRedraw.forEach(annotation => {\n      if (annotation.type === 'draw' && annotation.data.points) {\n        drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n      }\n    });\n  };\n\n  // WebRTC peer connections are handled by the centralized WebRTC service\n\n  // Cleanup\n  const cleanup = async () => {\n    try {\n      if (webrtcServiceRef.current) {\n        await webrtcServiceRef.current.endRoomVideoCall();\n        await webrtcServiceRef.current.disconnect();\n      }\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ar-video-consultation\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consultation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFE5 AR Video Consultation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-indicators\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${isConnected ? 'connected' : 'disconnected'}`,\n          children: isConnected ? '🟢 Connected' : '🔴 Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"participant-count\",\n          children: [\"\\uD83D\\uDC65 \", participants.size + 1, \" participants\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ar-status\",\n          children: \"\\u2728 AR Session Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-annotation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: userRole === 'field_medic',\n          className: \"consultation-video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          className: \"annotation-canvas\",\n          width: 1280,\n          height: 720,\n          onMouseDown: handleMouseDown,\n          onMouseMove: handleMouseMove,\n          onMouseUp: handleMouseUp,\n          style: {\n            cursor: drawingMode ? 'crosshair' : 'default',\n            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-stream-status\",\n          children: [localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator local\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 33\n            }, this), \"Live: \", userRole === 'doctor' ? 'Doctor' : 'Field Medic']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 29\n          }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stream-indicator remote\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"indicator-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 33\n            }, this), \"Remote: \", remoteStreams.size, \" connected\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 21\n        }, this), arSession && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ar-session-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ar-indicator\",\n            children: \"\\u2728\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 29\n          }, this), \"AR Session Active\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }, this), userRole === 'doctor' && arSession && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drawing-tools\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Drawing Mode:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: drawingMode ? 'active' : '',\n            onClick: () => setDrawingMode(!drawingMode),\n            children: drawingMode ? '✏️ Drawing' : '👆 Viewing'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Tool:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tool-buttons\",\n            children: Object.entries(drawingTools).map(([key, tool]) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: currentTool === key ? 'active' : '',\n              onClick: () => setCurrentTool(key),\n              title: tool.name,\n              children: tool.icon\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Color:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-picker\",\n            children: drawingColors.map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `color-button ${currentColor === color ? 'active' : ''}`,\n              style: {\n                backgroundColor: color\n              },\n              onClick: () => setCurrentColor(color)\n            }, color, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Thickness:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"10\",\n            value: lineThickness,\n            onChange: e => setLineThickness(parseInt(e.target.value)),\n            className: \"thickness-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [lineThickness, \"px\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-button\",\n            onClick: clearAllAnnotations,\n            children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalVideo,\n        className: `control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`,\n        title: localVideoEnabled ? 'Turn off video' : 'Turn on video',\n        children: localVideoEnabled ? '📹 Video On' : '📹 Video Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLocalAudio,\n        className: `control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`,\n        title: localAudioEnabled ? 'Mute microphone' : 'Unmute microphone',\n        children: localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 13\n    }, this), remoteStreams.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remote-videos\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCF9 Remote Participants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"remote-videos-grid\",\n        children: Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n          const participant = participants.get(userId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"remote-video-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              ref: el => {\n                if (el && stream) {\n                  el.srcObject = stream;\n                  remoteVideoRefs.current.set(userId, el);\n                }\n              },\n              autoPlay: true,\n              playsInline: true,\n              className: \"remote-video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"remote-video-label\",\n              children: (participant === null || participant === void 0 ? void 0 : participant.name) || `User ${userId}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 37\n            }, this)]\n          }, userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participants-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Participants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participant-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-item current-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"participant-name\",\n            children: [\"You (\", userRole, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"participant-status\",\n            children: [localVideoEnabled ? '📹' : '📹❌', \" \", localAudioEnabled ? '🎤' : '🎤❌']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 21\n        }, this), Array.from(participants.values()).map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"participant-name\",\n            children: participant.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"participant-role\",\n            children: participant.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"participant-status\",\n            children: remoteStreams.has(participant.id) ? '📹 🎤' : '❌'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 29\n          }, this)]\n        }, participant.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 13\n    }, this), annotations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotation-info\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uD83D\\uDCDD \", annotations.length, \" annotations active\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 505,\n    columnNumber: 9\n  }, this);\n};\n_s(ARVideoConsultation, \"e3vnaroWapsqc6UuhaXtylpgNJ4=\");\n_c = ARVideoConsultation;\nexport default ARVideoConsultation;\nvar _c;\n$RefreshReg$(_c, \"ARVideoConsultation\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","WebRTCService","jsxDEV","_jsxDEV","ARVideoConsultation","roomId","userToken","user","userRole","onError","onConnectionChange","_s","isConnected","setIsConnected","participants","setParticipants","Map","arSession","setArSession","drawingMode","setDrawingMode","currentTool","setCurrentTool","currentColor","setCurrentColor","lineThickness","setLineThickness","annotations","setAnnotations","isDrawing","setIsDrawing","currentPath","setCurrentPath","localStream","setLocalStream","remoteStreams","setRemoteStreams","localVideoEnabled","setLocalVideoEnabled","localAudioEnabled","setLocalAudioEnabled","bridgeConnected","setBridgeConnected","videoRef","canvasRef","webrtcServiceRef","remoteVideoRefs","bridgeSocketRef","drawingTools","pen","name","icon","marker","arrow","circle","rectangle","text","drawingColors","initializeWebRTCService","connectToBridge","cleanup","current","setupWebRTCListeners","initialize","joinRoom","capabilities","startRoomVideoCall","error","console","service","on","log","data","stream","getLocalStream","srcObject","createARSession","userId","prev","newStreams","set","enabled","newParticipants","id","delete","handleIncomingAnnotation","handleAnnotationsCleared","handleARError","type","message","toggleLocalVideo","newState","toggleLocalAudio","mockARSession","createdAt","Date","toISOString","initializeAnnotationCanvas","canvas","ctx","getContext","lineCap","lineJoin","globalAlpha","clearRect","width","height","initializeCamera","navigator","mediaDevices","getUserMedia","video","ideal","frameRate","audio","handleRoomJoined","handleUserJoined","handleUserLeft","handleARSessionCreated","handleARSessionAvailable","handleMouseDown","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","timestamp","now","handleMouseMove","newPath","drawPath","handleMouseUp","length","annotation","points","color","thickness","metadata","tool","newAnnotation","userName","path","isPreview","strokeStyle","lineWidth","beginPath","moveTo","i","lineTo","stroke","handleAnnotationHistory","redrawAnnotations","clearCanvas","clearAllAnnotations","emit","clearType","annotationsToRedraw","forEach","endRoomVideoCall","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","ref","autoPlay","playsInline","muted","onMouseDown","onMouseMove","onMouseUp","style","cursor","pointerEvents","onClick","Object","entries","map","key","title","backgroundColor","min","max","value","onChange","parseInt","target","Array","from","participant","get","el","values","role","has","_c","$RefreshReg$"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\n\nconst ARVideoConsultation = ({ \n    roomId, \n    userToken, \n    user,\n    userRole = 'doctor',\n    onError = () => {},\n    onConnectionChange = () => {} \n}) => {\n    // State management\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState(new Map());\n    const [arSession, setArSession] = useState(null);\n    const [drawingMode, setDrawingMode] = useState(true);\n    const [currentTool, setCurrentTool] = useState('pen');\n    const [currentColor, setCurrentColor] = useState('#FF0000');\n    const [lineThickness, setLineThickness] = useState(3);\n    const [annotations, setAnnotations] = useState([]);\n    \n    // Drawing state\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [currentPath, setCurrentPath] = useState([]);\n    \n    // Video call state\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n    const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n    \n    // Bridge connection state\n    const [bridgeConnected, setBridgeConnected] = useState(false);\n    \n    // Refs\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const webrtcServiceRef = useRef(null);\n    const remoteVideoRefs = useRef(new Map());\n    const bridgeSocketRef = useRef(null);\n    \n    // Available drawing tools\n    const drawingTools = {\n        pen: { name: 'Pen', icon: '✏️' },\n        marker: { name: 'Marker', icon: '🖍️' },\n        arrow: { name: 'Arrow', icon: '➡️' },\n        circle: { name: 'Circle', icon: '⭕' },\n        rectangle: { name: 'Rectangle', icon: '⬛' },\n        text: { name: 'Text', icon: '📝' }\n    };\n    \n    const drawingColors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000'];\n    \n    // Initialize component\n    useEffect(() => {\n        if (roomId && userToken) {\n            initializeWebRTCService();\n            connectToBridge();\n        }\n        \n        return () => {\n            cleanup();\n        };\n    }, [roomId, userToken]);\n    \n    // Initialize WebRTC service\n    const initializeWebRTCService = async () => {\n        try {\n            // Create WebRTC service instance\n            webrtcServiceRef.current = new WebRTCService();\n            \n            // Setup event listeners\n            setupWebRTCListeners();\n            \n            // Initialize and connect\n            await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n            \n            // Join room\n            await webrtcServiceRef.current.joinRoom(roomId, {\n                userRole,\n                capabilities: ['video', 'audio', 'ar-annotations']\n            });\n            \n            // Start video call\n            await webrtcServiceRef.current.startRoomVideoCall();\n            \n            setIsConnected(true);\n            onConnectionChange('connected');\n            \n        } catch (error) {\n            console.error('Failed to initialize WebRTC service:', error);\n            onError('Failed to connect to consultation service');\n            onConnectionChange('error');\n        }\n    };\n    \n    // Setup WebRTC event listeners\n    const setupWebRTCListeners = () => {\n        const service = webrtcServiceRef.current;\n        \n        // Connection events\n        service.on('initialized', () => {\n            console.log('WebRTC service initialized');\n        });\n        \n        service.on('disconnected', (data) => {\n            setIsConnected(false);\n            onConnectionChange('disconnected');\n        });\n        \n        // Video call events\n        service.on('video-call-started', () => {\n            console.log('Video call started');\n            const stream = service.getLocalStream();\n            setLocalStream(stream);\n            if (videoRef.current && stream) {\n                videoRef.current.srcObject = stream;\n            }\n            \n            // Create AR session when video call starts\n            createARSession();\n        });\n        \n        service.on('video-call-ended', () => {\n            console.log('Video call ended');\n            setLocalStream(null);\n            setRemoteStreams(new Map());\n        });\n        \n        // Stream events\n        service.on('remote-stream-added', ({ userId, stream }) => {\n            console.log('Remote stream added from user:', userId);\n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.set(userId, stream);\n                return newStreams;\n            });\n        });\n        \n        // Media control events\n        service.on('local-video-toggled', ({ enabled }) => {\n            setLocalVideoEnabled(enabled);\n        });\n        \n        service.on('local-audio-toggled', ({ enabled }) => {\n            setLocalAudioEnabled(enabled);\n        });\n        \n        // Room events\n        service.on('user-joined', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.set(data.user.id, data.user);\n                return newParticipants;\n            });\n        });\n        \n        service.on('user-left', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.delete(data.userId);\n                return newParticipants;\n            });\n            \n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.delete(data.userId);\n                return newStreams;\n            });\n        });\n        \n        // AR annotation events (keeping the existing AR functionality)\n        service.on('ar-annotation', handleIncomingAnnotation);\n        service.on('ar-annotations-cleared', handleAnnotationsCleared);\n        service.on('ar-error', handleARError);\n        \n        // Error handling\n        service.on('error', ({ type, error }) => {\n            console.error('WebRTC error:', type, error);\n            onError(`WebRTC error: ${error.message || error}`);\n        });\n    };\n    \n    // Audio/Video control functions\n    const toggleLocalVideo = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalVideo();\n            setLocalVideoEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    const toggleLocalAudio = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalAudio();\n            setLocalAudioEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    // AR Session Management\n    const createARSession = async () => {\n        try {\n            console.log('Creating AR session for room:', roomId);\n            \n            // Mock AR session creation for now (can be enhanced with real AR backend)\n            const mockARSession = {\n                id: `ar-session-${roomId}`,\n                roomId: roomId,\n                createdAt: new Date().toISOString(),\n                participants: [],\n                annotations: []\n            };\n            \n            setArSession(mockARSession);\n            \n            // Initialize annotation canvas\n            initializeAnnotationCanvas();\n            \n            console.log('AR session created successfully');\n            \n        } catch (error) {\n            console.error('Failed to create AR session:', error);\n            onError('Failed to initialize AR session');\n        }\n    };\n    \n    // Initialize annotation canvas for drawing\n    const initializeAnnotationCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.lineCap = 'round';\n            ctx.lineJoin = 'round';\n            ctx.globalAlpha = 0.8;\n            \n            // Clear any existing annotations\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            console.log('Annotation canvas initialized');\n        }\n    };\n    \n    // Initialize camera for field medics\n    const initializeCamera = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: { ideal: 1280 },\n                    height: { ideal: 720 },\n                    frameRate: { ideal: 30 }\n                },\n                audio: true\n            });\n            \n            // Stream is now managed by WebRTC service\n            if (videoRef.current) {\n                const localStream = webrtcServiceRef.current.getLocalStream();\n                if (localStream) {\n                    videoRef.current.srcObject = localStream;\n                }\n            }\n            \n        } catch (error) {\n            console.error('Failed to get user media:', error);\n            onError('Failed to access camera and microphone');\n        }\n    };\n    \n    // Join consultation room - handled by WebRTC service\n    const joinRoom = () => {\n        // Room joining is handled by WebRTC service in useEffect\n        setIsConnected(true);\n        onConnectionChange(true);\n        \n        // Create AR session if doctor\n        if (userRole === 'doctor') {\n            createARSession();\n        }\n    };\n    \n    // Handle room joined\n    const handleRoomJoined = (data) => {\n        console.log('Joined room:', data);\n        \n        // Create AR session if doctor\n        if (userRole === 'doctor') {\n            createARSession();\n        }\n    };\n    \n    // Handle new participant\n    const handleUserJoined = (data) => {\n        console.log('User joined:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.set(data.user.id, data.user);\n        setParticipants(newParticipants);\n        \n        // WebRTC connections are handled automatically by the service\n    };\n    \n    // Handle participant leaving\n    const handleUserLeft = (data) => {\n        console.log('User left:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.delete(data.userId);\n        setParticipants(newParticipants);\n        \n        // Peer connection cleanup is handled by WebRTC service\n    };\n    \n    \n    // Handle AR session created\n    const handleARSessionCreated = (data) => {\n        console.log('AR session created:', data);\n        setArSession(data);\n    };\n    \n    // Handle AR session available\n    const handleARSessionAvailable = (data) => {\n        console.log('AR session available:', data);\n        setArSession(data);\n    };\n    \n    // Drawing event handlers\n    const handleMouseDown = useCallback((e) => {\n        if (!drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        setIsDrawing(true);\n        setCurrentPath([{ x, y, timestamp: Date.now() }]);\n    }, [drawingMode, arSession]);\n    \n    const handleMouseMove = useCallback((e) => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        const newPath = [...currentPath, { x, y, timestamp: Date.now() }];\n        setCurrentPath(newPath);\n        \n        // Draw preview on canvas\n        drawPath(newPath, currentColor, lineThickness, true);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentColor, lineThickness]);\n    \n    const handleMouseUp = useCallback(() => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        setIsDrawing(false);\n        \n        if (currentPath.length > 1) {\n            // Send annotation to server\n            const annotation = {\n                type: currentTool,\n                data: {\n                    points: currentPath,\n                    color: currentColor,\n                    thickness: lineThickness\n                },\n                metadata: {\n                    tool: currentTool,\n                    timestamp: Date.now()\n                }\n            };\n            \n            // Send annotation through WebRTC service\n            if (webrtcServiceRef.current) {\n                // Add to local annotations\n                const newAnnotation = {\n                    id: Date.now(),\n                    ...annotation,\n                    userId: user?.id || 'current-user',\n                    userName: user?.name || 'Current User'\n                };\n                setAnnotations(prev => [...prev, newAnnotation]);\n                \n                // Send to other participants (this would normally go through WebRTC data channels)\n                console.log('Sending AR annotation:', newAnnotation);\n                \n                // For now, we'll use a mock socket emit - this can be enhanced with real WebRTC data channels\n                try {\n                    // Mock annotation sync - in a real implementation, this would use WebRTC data channels\n                    console.log('AR annotation synchronized across participants');\n                } catch (error) {\n                    console.error('Failed to sync annotation:', error);\n                }\n            }\n        }\n        \n        setCurrentPath([]);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentTool, currentColor, lineThickness]);\n    \n    // Draw path on canvas\n    const drawPath = (path, color, thickness, isPreview = false) => {\n        const canvas = canvasRef.current;\n        if (!canvas || path.length < 2) return;\n        \n        const ctx = canvas.getContext('2d');\n        ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        \n        ctx.beginPath();\n        ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n        \n        for (let i = 1; i < path.length; i++) {\n            ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n        }\n        \n        ctx.stroke();\n    };\n    \n    // Handle incoming annotation\n    const handleIncomingAnnotation = (data) => {\n        console.log('Received annotation:', data);\n        \n        const annotation = data.annotation;\n        setAnnotations(prev => [...prev, annotation]);\n        \n        // Draw annotation on canvas\n        if (annotation.type === 'draw' && annotation.data.points) {\n            drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n        }\n    };\n    \n    // Handle annotation history\n    const handleAnnotationHistory = (data) => {\n        console.log('Received annotation history:', data);\n        setAnnotations(data.annotations);\n        \n        // Redraw all annotations\n        redrawAnnotations(data.annotations);\n    };\n    \n    // Handle annotations cleared\n    const handleAnnotationsCleared = (data) => {\n        console.log('Annotations cleared:', data);\n        setAnnotations([]);\n        clearCanvas();\n    };\n    \n    // Handle AR errors\n    const handleARError = (data) => {\n        console.error('AR Error:', data);\n        onError(`AR Error: ${data.message}`);\n    };\n    \n    // Clear all annotations\n    const clearAllAnnotations = () => {\n        if (arSession) {\n            // Clear annotations through WebRTC service\n            webrtcServiceRef.current.emit('ar-annotations-clear', { clearType: 'all' });\n        }\n    };\n    \n    // Clear canvas\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    \n    // Redraw all annotations\n    const redrawAnnotations = (annotationsToRedraw) => {\n        clearCanvas();\n        \n        annotationsToRedraw.forEach(annotation => {\n            if (annotation.type === 'draw' && annotation.data.points) {\n                drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n            }\n        });\n    };\n    \n    // WebRTC peer connections are handled by the centralized WebRTC service\n    \n    // Cleanup\n    const cleanup = async () => {\n        try {\n            if (webrtcServiceRef.current) {\n                await webrtcServiceRef.current.endRoomVideoCall();\n                await webrtcServiceRef.current.disconnect();\n            }\n        } catch (error) {\n            console.error('Error during cleanup:', error);\n        }\n    };\n    \n    return (\n        <div className=\"ar-video-consultation\">\n            {/* Header */}\n            <div className=\"consultation-header\">\n                <h2>🏥 AR Video Consultation</h2>\n                <div className=\"status-indicators\">\n                    <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>\n                        {isConnected ? '🟢 Connected' : '🔴 Disconnected'}\n                    </span>\n                    <span className=\"participant-count\">\n                        👥 {participants.size + 1} participants\n                    </span>\n                    {arSession && (\n                        <span className=\"ar-status\">\n                            ✨ AR Session Active\n                        </span>\n                    )}\n                </div>\n            </div>\n            \n            {/* Main video and annotation area */}\n            <div className=\"video-annotation-container\">\n                <div className=\"video-wrapper\">\n                    {/* Main Video Stream */}\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted={userRole === 'field_medic'}\n                        className=\"consultation-video\"\n                    />\n                    \n                    {/* AR Annotation Canvas Overlay */}\n                    <canvas\n                        ref={canvasRef}\n                        className=\"annotation-canvas\"\n                        width={1280}\n                        height={720}\n                        onMouseDown={handleMouseDown}\n                        onMouseMove={handleMouseMove}\n                        onMouseUp={handleMouseUp}\n                        style={{ \n                            cursor: drawingMode ? 'crosshair' : 'default',\n                            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n                        }}\n                    />\n                    \n                    {/* Live Stream Status Indicator */}\n                    <div className=\"video-stream-status\">\n                        {localStream && (\n                            <div className=\"stream-indicator local\">\n                                <span className=\"indicator-dot\"></span>\n                                Live: {userRole === 'doctor' ? 'Doctor' : 'Field Medic'}\n                            </div>\n                        )}\n                        {remoteStreams.size > 0 && (\n                            <div className=\"stream-indicator remote\">\n                                <span className=\"indicator-dot\"></span>\n                                Remote: {remoteStreams.size} connected\n                            </div>\n                        )}\n                    </div>\n                    \n                    {/* AR Session Status */}\n                    {arSession && (\n                        <div className=\"ar-session-indicator\">\n                            <span className=\"ar-indicator\">✨</span>\n                            AR Session Active\n                        </div>\n                    )}\n                </div>\n                \n                {/* Drawing tools (only for doctors) */}\n                {userRole === 'doctor' && arSession && (\n                    <div className=\"drawing-tools\">\n                        <div className=\"tool-section\">\n                            <label>Drawing Mode:</label>\n                            <button \n                                className={drawingMode ? 'active' : ''}\n                                onClick={() => setDrawingMode(!drawingMode)}\n                            >\n                                {drawingMode ? '✏️ Drawing' : '👆 Viewing'}\n                            </button>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Tool:</label>\n                            <div className=\"tool-buttons\">\n                                {Object.entries(drawingTools).map(([key, tool]) => (\n                                    <button\n                                        key={key}\n                                        className={currentTool === key ? 'active' : ''}\n                                        onClick={() => setCurrentTool(key)}\n                                        title={tool.name}\n                                    >\n                                        {tool.icon}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Color:</label>\n                            <div className=\"color-picker\">\n                                {drawingColors.map(color => (\n                                    <button\n                                        key={color}\n                                        className={`color-button ${currentColor === color ? 'active' : ''}`}\n                                        style={{ backgroundColor: color }}\n                                        onClick={() => setCurrentColor(color)}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Thickness:</label>\n                            <input\n                                type=\"range\"\n                                min=\"1\"\n                                max=\"10\"\n                                value={lineThickness}\n                                onChange={(e) => setLineThickness(parseInt(e.target.value))}\n                                className=\"thickness-slider\"\n                            />\n                            <span>{lineThickness}px</span>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <button \n                                className=\"clear-button\"\n                                onClick={clearAllAnnotations}\n                            >\n                                🗑️ Clear All\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n            \n            {/* Video Controls */}\n            <div className=\"video-controls\">\n                <button \n                    onClick={toggleLocalVideo}\n                    className={`control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`}\n                    title={localVideoEnabled ? 'Turn off video' : 'Turn on video'}\n                >\n                    {localVideoEnabled ? '📹 Video On' : '📹 Video Off'}\n                </button>\n                <button \n                    onClick={toggleLocalAudio}\n                    className={`control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`}\n                    title={localAudioEnabled ? 'Mute microphone' : 'Unmute microphone'}\n                >\n                    {localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'}\n                </button>\n            </div>\n\n            {/* Remote Video Streams */}\n            {remoteStreams.size > 0 && (\n                <div className=\"remote-videos\">\n                    <h4>📹 Remote Participants</h4>\n                    <div className=\"remote-videos-grid\">\n                        {Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n                            const participant = participants.get(userId);\n                            return (\n                                <div key={userId} className=\"remote-video-container\">\n                                    <video\n                                        ref={(el) => {\n                                            if (el && stream) {\n                                                el.srcObject = stream;\n                                                remoteVideoRefs.current.set(userId, el);\n                                            }\n                                        }}\n                                        autoPlay\n                                        playsInline\n                                        className=\"remote-video\"\n                                    />\n                                    <div className=\"remote-video-label\">\n                                        {participant?.name || `User ${userId}`}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n\n            {/* Participants panel */}\n            <div className=\"participants-panel\">\n                <h3>Participants</h3>\n                <div className=\"participant-list\">\n                    <div className=\"participant-item current-user\">\n                        <span className=\"participant-name\">You ({userRole})</span>\n                        <span className=\"participant-status\">\n                            {localVideoEnabled ? '📹' : '📹❌'} {localAudioEnabled ? '🎤' : '🎤❌'}\n                        </span>\n                    </div>\n                    {Array.from(participants.values()).map(participant => (\n                        <div key={participant.id} className=\"participant-item\">\n                            <span className=\"participant-name\">{participant.name}</span>\n                            <span className=\"participant-role\">{participant.role}</span>\n                            <span className=\"participant-status\">\n                                {remoteStreams.has(participant.id) ? '📹 🎤' : '❌'}\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            \n            {/* Annotation info */}\n            {annotations.length > 0 && (\n                <div className=\"annotation-info\">\n                    <span>📝 {annotations.length} annotations active</span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ARVideoConsultation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}