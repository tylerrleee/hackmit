{"ast":null,"code":"import _objectSpread from\"/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useRef,useEffect,useCallback}from'react';import WebRTCService from'../services/WebRTCService';import'./ARVideoConsultation.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ARVideoConsultation=_ref=>{let{roomId,userToken,userRole='doctor',onError=()=>{},onConnectionChange=()=>{}}=_ref;// State management\nconst[isConnected,setIsConnected]=useState(false);const[participants,setParticipants]=useState(new Map());const[arSession,setArSession]=useState(null);const[drawingMode,setDrawingMode]=useState(true);const[currentTool,setCurrentTool]=useState('pen');const[currentColor,setCurrentColor]=useState('#FF0000');const[lineThickness,setLineThickness]=useState(3);const[annotations,setAnnotations]=useState([]);// Drawing state\nconst[isDrawing,setIsDrawing]=useState(false);const[currentPath,setCurrentPath]=useState([]);// Video call state\nconst[localStream,setLocalStream]=useState(null);const[remoteStreams,setRemoteStreams]=useState(new Map());const[localVideoEnabled,setLocalVideoEnabled]=useState(true);const[localAudioEnabled,setLocalAudioEnabled]=useState(true);// Refs\nconst videoRef=useRef(null);const canvasRef=useRef(null);const webrtcServiceRef=useRef(null);const remoteVideoRefs=useRef(new Map());// Available drawing tools\nconst drawingTools={pen:{name:'Pen',icon:'✏️'},marker:{name:'Marker',icon:'🖍️'},arrow:{name:'Arrow',icon:'➡️'},circle:{name:'Circle',icon:'⭕'},rectangle:{name:'Rectangle',icon:'⬛'},text:{name:'Text',icon:'📝'}};const drawingColors=['#FF0000','#00FF00','#0000FF','#FFFF00','#FF00FF','#00FFFF','#FFFFFF','#000000'];// Initialize component\nuseEffect(()=>{if(roomId&&userToken){initializeWebRTCService();}return()=>{cleanup();};},[roomId,userToken]);// Initialize WebRTC service\nconst initializeWebRTCService=async()=>{try{// Create WebRTC service instance\nwebrtcServiceRef.current=new WebRTCService();// Setup event listeners\nsetupWebRTCListeners();// Initialize and connect\nawait webrtcServiceRef.current.initialize('http://localhost:3001',userToken);// Join room\nawait webrtcServiceRef.current.joinRoom(roomId,{userRole,capabilities:['video','audio','ar-annotations']});// Start video call\nawait webrtcServiceRef.current.startRoomVideoCall();setIsConnected(true);onConnectionChange('connected');}catch(error){console.error('Failed to initialize WebRTC service:',error);onError('Failed to connect to consultation service');onConnectionChange('error');}};// Setup WebRTC event listeners\nconst setupWebRTCListeners=()=>{const service=webrtcServiceRef.current;// Connection events\nservice.on('initialized',()=>{console.log('WebRTC service initialized');});service.on('disconnected',data=>{setIsConnected(false);onConnectionChange('disconnected');});// Video call events\nservice.on('video-call-started',()=>{console.log('Video call started');const stream=service.getLocalStream();setLocalStream(stream);if(videoRef.current&&stream){videoRef.current.srcObject=stream;}// Create AR session when video call starts\ncreateARSession();});service.on('video-call-ended',()=>{console.log('Video call ended');setLocalStream(null);setRemoteStreams(new Map());});// Stream events\nservice.on('remote-stream-added',_ref2=>{let{userId,stream}=_ref2;console.log('Remote stream added from user:',userId);setRemoteStreams(prev=>{const newStreams=new Map(prev);newStreams.set(userId,stream);return newStreams;});});// Media control events\nservice.on('local-video-toggled',_ref3=>{let{enabled}=_ref3;setLocalVideoEnabled(enabled);});service.on('local-audio-toggled',_ref4=>{let{enabled}=_ref4;setLocalAudioEnabled(enabled);});// Room events\nservice.on('user-joined',data=>{setParticipants(prev=>{const newParticipants=new Map(prev);newParticipants.set(data.user.id,data.user);return newParticipants;});});service.on('user-left',data=>{setParticipants(prev=>{const newParticipants=new Map(prev);newParticipants.delete(data.userId);return newParticipants;});setRemoteStreams(prev=>{const newStreams=new Map(prev);newStreams.delete(data.userId);return newStreams;});});// AR annotation events (keeping the existing AR functionality)\nservice.on('ar-annotation',handleIncomingAnnotation);service.on('ar-annotations-cleared',handleAnnotationsCleared);service.on('ar-error',handleARError);// Error handling\nservice.on('error',_ref5=>{let{type,error}=_ref5;console.error('WebRTC error:',type,error);onError(\"WebRTC error: \".concat(error.message||error));});};// Audio/Video control functions\nconst toggleLocalVideo=()=>{if(webrtcServiceRef.current){const newState=webrtcServiceRef.current.toggleLocalVideo();setLocalVideoEnabled(newState);return newState;}return false;};const toggleLocalAudio=()=>{if(webrtcServiceRef.current){const newState=webrtcServiceRef.current.toggleLocalAudio();setLocalAudioEnabled(newState);return newState;}return false;};// AR Session Management\nconst createARSession=async()=>{try{console.log('Creating AR session for room:',roomId);// Mock AR session creation for now (can be enhanced with real AR backend)\nconst mockARSession={id:\"ar-session-\".concat(roomId),roomId:roomId,createdAt:new Date().toISOString(),participants:[],annotations:[]};setArSession(mockARSession);// Initialize annotation canvas\ninitializeAnnotationCanvas();console.log('AR session created successfully');}catch(error){console.error('Failed to create AR session:',error);onError('Failed to initialize AR session');}};// Initialize annotation canvas for drawing\nconst initializeAnnotationCanvas=()=>{const canvas=canvasRef.current;if(canvas){const ctx=canvas.getContext('2d');ctx.lineCap='round';ctx.lineJoin='round';ctx.globalAlpha=0.8;// Clear any existing annotations\nctx.clearRect(0,0,canvas.width,canvas.height);console.log('Annotation canvas initialized');}};// Initialize camera for field medics\nconst initializeCamera=async()=>{try{const stream=await navigator.mediaDevices.getUserMedia({video:{width:{ideal:1280},height:{ideal:720},frameRate:{ideal:30}},audio:true});localStreamRef.current=stream;if(videoRef.current){videoRef.current.srcObject=stream;}}catch(error){console.error('Failed to get user media:',error);onError('Failed to access camera and microphone');}};// Join consultation room\nconst joinRoom=()=>{socketRef.current.emit('join-room',{roomId,roomType:'ar-consultation',metadata:{userRole,capabilities:['video','ar-annotations']}});};// Handle room joined\nconst handleRoomJoined=data=>{console.log('Joined room:',data);// Create AR session if doctor\nif(userRole==='doctor'){createARSession();}};// Handle new participant\nconst handleUserJoined=data=>{console.log('User joined:',data);const newParticipants=new Map(participants);newParticipants.set(data.user.id,data.user);setParticipants(newParticipants);// Initialize WebRTC connection if needed\nif(data.user.role==='field_medic'&&userRole==='doctor'){createPeerConnection(data.user.socketId);}};// Handle participant leaving\nconst handleUserLeft=data=>{console.log('User left:',data);const newParticipants=new Map(participants);newParticipants.delete(data.userId);setParticipants(newParticipants);// Clean up peer connection\nconst peerConnection=peerConnectionsRef.current.get(data.socketId);if(peerConnection){peerConnection.close();peerConnectionsRef.current.delete(data.socketId);}};// Handle AR session created\nconst handleARSessionCreated=data=>{console.log('AR session created:',data);setArSession(data);};// Handle AR session available\nconst handleARSessionAvailable=data=>{console.log('AR session available:',data);setArSession(data);};// Drawing event handlers\nconst handleMouseDown=useCallback(e=>{if(!drawingMode||!arSession)return;const canvas=canvasRef.current;const rect=canvas.getBoundingClientRect();const x=(e.clientX-rect.left)/rect.width;const y=(e.clientY-rect.top)/rect.height;setIsDrawing(true);setCurrentPath([{x,y,timestamp:Date.now()}]);},[drawingMode,arSession]);const handleMouseMove=useCallback(e=>{if(!isDrawing||!drawingMode||!arSession)return;const canvas=canvasRef.current;const rect=canvas.getBoundingClientRect();const x=(e.clientX-rect.left)/rect.width;const y=(e.clientY-rect.top)/rect.height;const newPath=[...currentPath,{x,y,timestamp:Date.now()}];setCurrentPath(newPath);// Draw preview on canvas\ndrawPath(newPath,currentColor,lineThickness,true);},[isDrawing,drawingMode,arSession,currentPath,currentColor,lineThickness]);const handleMouseUp=useCallback(()=>{if(!isDrawing||!drawingMode||!arSession)return;setIsDrawing(false);if(currentPath.length>1){// Send annotation to server\nconst annotation={type:currentTool,data:{points:currentPath,color:currentColor,thickness:lineThickness},metadata:{tool:currentTool,timestamp:Date.now()}};// Send annotation through WebRTC service\nif(webrtcServiceRef.current){var _user,_user2;// Add to local annotations\nconst newAnnotation=_objectSpread(_objectSpread({id:Date.now()},annotation),{},{userId:((_user=user)===null||_user===void 0?void 0:_user.id)||'current-user',userName:((_user2=user)===null||_user2===void 0?void 0:_user2.name)||'Current User'});setAnnotations(prev=>[...prev,newAnnotation]);// Send to other participants (this would normally go through WebRTC data channels)\nconsole.log('Sending AR annotation:',newAnnotation);// For now, we'll use a mock socket emit - this can be enhanced with real WebRTC data channels\ntry{// Mock annotation sync - in a real implementation, this would use WebRTC data channels\nconsole.log('AR annotation synchronized across participants');}catch(error){console.error('Failed to sync annotation:',error);}}}setCurrentPath([]);},[isDrawing,drawingMode,arSession,currentPath,currentTool,currentColor,lineThickness]);// Draw path on canvas\nconst drawPath=function(path,color,thickness){let isPreview=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const canvas=canvasRef.current;if(!canvas||path.length<2)return;const ctx=canvas.getContext('2d');ctx.globalAlpha=isPreview?0.7:1.0;ctx.strokeStyle=color;ctx.lineWidth=thickness;ctx.lineCap='round';ctx.lineJoin='round';ctx.beginPath();ctx.moveTo(path[0].x*canvas.width,path[0].y*canvas.height);for(let i=1;i<path.length;i++){ctx.lineTo(path[i].x*canvas.width,path[i].y*canvas.height);}ctx.stroke();};// Handle incoming annotation\nconst handleIncomingAnnotation=data=>{console.log('Received annotation:',data);const annotation=data.annotation;setAnnotations(prev=>[...prev,annotation]);// Draw annotation on canvas\nif(annotation.type==='draw'&&annotation.data.points){drawPath(annotation.data.points,annotation.data.color,annotation.data.thickness);}};// Handle annotation history\nconst handleAnnotationHistory=data=>{console.log('Received annotation history:',data);setAnnotations(data.annotations);// Redraw all annotations\nredrawAnnotations(data.annotations);};// Handle annotations cleared\nconst handleAnnotationsCleared=data=>{console.log('Annotations cleared:',data);setAnnotations([]);clearCanvas();};// Handle AR errors\nconst handleARError=data=>{console.error('AR Error:',data);onError(\"AR Error: \".concat(data.message));};// Clear all annotations\nconst clearAllAnnotations=()=>{if(arSession){socketRef.current.emit('ar-annotations-clear',{clearType:'all'});}};// Clear canvas\nconst clearCanvas=()=>{const canvas=canvasRef.current;if(canvas){const ctx=canvas.getContext('2d');ctx.clearRect(0,0,canvas.width,canvas.height);}};// Redraw all annotations\nconst redrawAnnotations=annotationsToRedraw=>{clearCanvas();annotationsToRedraw.forEach(annotation=>{if(annotation.type==='draw'&&annotation.data.points){drawPath(annotation.data.points,annotation.data.color,annotation.data.thickness);}});};// WebRTC peer connection handling (simplified)\nconst createPeerConnection=socketId=>{const peerConnection=new RTCPeerConnection(rtcConfiguration);peerConnectionsRef.current.set(socketId,peerConnection);// Add local stream\nif(localStreamRef.current){localStreamRef.current.getTracks().forEach(track=>{peerConnection.addTrack(track,localStreamRef.current);});}// Handle remote stream\npeerConnection.ontrack=event=>{if(videoRef.current){videoRef.current.srcObject=event.streams[0];}};// Handle ICE candidates\npeerConnection.onicecandidate=event=>{if(event.candidate){socketRef.current.emit('ice-candidate',{candidate:event.candidate,targetSocketId:socketId});}};return peerConnection;};// Cleanup\nconst cleanup=async()=>{try{if(webrtcServiceRef.current){await webrtcServiceRef.current.endRoomVideoCall();await webrtcServiceRef.current.disconnect();}}catch(error){console.error('Error during cleanup:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"ar-video-consultation\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"consultation-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83C\\uDFE5 AR Video Consultation\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-indicators\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-indicator \".concat(isConnected?'connected':'disconnected'),children:isConnected?'🟢 Connected':'🔴 Disconnected'}),/*#__PURE__*/_jsxs(\"span\",{className:\"participant-count\",children:[\"\\uD83D\\uDC65 \",participants.size+1,\" participants\"]}),arSession&&/*#__PURE__*/_jsx(\"span\",{className:\"ar-status\",children:\"\\u2728 AR Session Active\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"video-annotation-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"video-wrapper\",children:[/*#__PURE__*/_jsx(\"video\",{ref:videoRef,autoPlay:true,playsInline:true,muted:userRole==='field_medic',className:\"consultation-video\"}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,className:\"annotation-canvas\",width:1280,height:720,onMouseDown:handleMouseDown,onMouseMove:handleMouseMove,onMouseUp:handleMouseUp,style:{cursor:drawingMode?'crosshair':'default',pointerEvents:userRole==='doctor'?'auto':'none'}}),/*#__PURE__*/_jsxs(\"div\",{className:\"video-stream-status\",children:[localStream&&/*#__PURE__*/_jsxs(\"div\",{className:\"stream-indicator local\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"indicator-dot\"}),\"Live: \",userRole==='doctor'?'Doctor':'Field Medic']}),remoteStreams.size>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"stream-indicator remote\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"indicator-dot\"}),\"Remote: \",remoteStreams.size,\" connected\"]})]}),arSession&&/*#__PURE__*/_jsxs(\"div\",{className:\"ar-session-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"ar-indicator\",children:\"\\u2728\"}),\"AR Session Active\"]})]}),userRole==='doctor'&&arSession&&/*#__PURE__*/_jsxs(\"div\",{className:\"drawing-tools\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tool-section\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Drawing Mode:\"}),/*#__PURE__*/_jsx(\"button\",{className:drawingMode?'active':'',onClick:()=>setDrawingMode(!drawingMode),children:drawingMode?'✏️ Drawing':'👆 Viewing'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tool-section\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Tool:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"tool-buttons\",children:Object.entries(drawingTools).map(_ref6=>{let[key,tool]=_ref6;return/*#__PURE__*/_jsx(\"button\",{className:currentTool===key?'active':'',onClick:()=>setCurrentTool(key),title:tool.name,children:tool.icon},key);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tool-section\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Color:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"color-picker\",children:drawingColors.map(color=>/*#__PURE__*/_jsx(\"button\",{className:\"color-button \".concat(currentColor===color?'active':''),style:{backgroundColor:color},onClick:()=>setCurrentColor(color)},color))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tool-section\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Thickness:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",min:\"1\",max:\"10\",value:lineThickness,onChange:e=>setLineThickness(parseInt(e.target.value)),className:\"thickness-slider\"}),/*#__PURE__*/_jsxs(\"span\",{children:[lineThickness,\"px\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tool-section\",children:/*#__PURE__*/_jsx(\"button\",{className:\"clear-button\",onClick:clearAllAnnotations,children:\"\\uD83D\\uDDD1\\uFE0F Clear All\"})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"video-controls\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:toggleLocalVideo,className:\"control-btn \".concat(localVideoEnabled?'enabled':'disabled'),title:localVideoEnabled?'Turn off video':'Turn on video',children:localVideoEnabled?'📹 Video On':'📹 Video Off'}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleLocalAudio,className:\"control-btn \".concat(localAudioEnabled?'enabled':'disabled'),title:localAudioEnabled?'Mute microphone':'Unmute microphone',children:localAudioEnabled?'🎤 Mic On':'🎤 Mic Off'})]}),remoteStreams.size>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"remote-videos\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uD83D\\uDCF9 Remote Participants\"}),/*#__PURE__*/_jsx(\"div\",{className:\"remote-videos-grid\",children:Array.from(remoteStreams.entries()).map(_ref7=>{let[userId,stream]=_ref7;const participant=participants.get(userId);return/*#__PURE__*/_jsxs(\"div\",{className:\"remote-video-container\",children:[/*#__PURE__*/_jsx(\"video\",{ref:el=>{if(el&&stream){el.srcObject=stream;remoteVideoRefs.current.set(userId,el);}},autoPlay:true,playsInline:true,className:\"remote-video\"}),/*#__PURE__*/_jsx(\"div\",{className:\"remote-video-label\",children:(participant===null||participant===void 0?void 0:participant.name)||\"User \".concat(userId)})]},userId);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"participants-panel\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Participants\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"participant-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"participant-item current-user\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"participant-name\",children:[\"You (\",userRole,\")\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"participant-status\",children:[localVideoEnabled?'📹':'📹❌',\" \",localAudioEnabled?'🎤':'🎤❌']})]}),Array.from(participants.values()).map(participant=>/*#__PURE__*/_jsxs(\"div\",{className:\"participant-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"participant-name\",children:participant.name}),/*#__PURE__*/_jsx(\"span\",{className:\"participant-role\",children:participant.role}),/*#__PURE__*/_jsx(\"span\",{className:\"participant-status\",children:remoteStreams.has(participant.id)?'📹 🎤':'❌'})]},participant.id))]})]}),annotations.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"annotation-info\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"\\uD83D\\uDCDD \",annotations.length,\" annotations active\"]})})]});};export default ARVideoConsultation;","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","WebRTCService","jsx","_jsx","jsxs","_jsxs","ARVideoConsultation","_ref","roomId","userToken","userRole","onError","onConnectionChange","isConnected","setIsConnected","participants","setParticipants","Map","arSession","setArSession","drawingMode","setDrawingMode","currentTool","setCurrentTool","currentColor","setCurrentColor","lineThickness","setLineThickness","annotations","setAnnotations","isDrawing","setIsDrawing","currentPath","setCurrentPath","localStream","setLocalStream","remoteStreams","setRemoteStreams","localVideoEnabled","setLocalVideoEnabled","localAudioEnabled","setLocalAudioEnabled","videoRef","canvasRef","webrtcServiceRef","remoteVideoRefs","drawingTools","pen","name","icon","marker","arrow","circle","rectangle","text","drawingColors","initializeWebRTCService","cleanup","current","setupWebRTCListeners","initialize","joinRoom","capabilities","startRoomVideoCall","error","console","service","on","log","data","stream","getLocalStream","srcObject","createARSession","_ref2","userId","prev","newStreams","set","_ref3","enabled","_ref4","newParticipants","user","id","delete","handleIncomingAnnotation","handleAnnotationsCleared","handleARError","_ref5","type","concat","message","toggleLocalVideo","newState","toggleLocalAudio","mockARSession","createdAt","Date","toISOString","initializeAnnotationCanvas","canvas","ctx","getContext","lineCap","lineJoin","globalAlpha","clearRect","width","height","initializeCamera","navigator","mediaDevices","getUserMedia","video","ideal","frameRate","audio","localStreamRef","socketRef","emit","roomType","metadata","handleRoomJoined","handleUserJoined","role","createPeerConnection","socketId","handleUserLeft","peerConnection","peerConnectionsRef","get","close","handleARSessionCreated","handleARSessionAvailable","handleMouseDown","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","timestamp","now","handleMouseMove","newPath","drawPath","handleMouseUp","length","annotation","points","color","thickness","tool","_user","_user2","newAnnotation","_objectSpread","userName","path","isPreview","arguments","undefined","strokeStyle","lineWidth","beginPath","moveTo","i","lineTo","stroke","handleAnnotationHistory","redrawAnnotations","clearCanvas","clearAllAnnotations","clearType","annotationsToRedraw","forEach","RTCPeerConnection","rtcConfiguration","getTracks","track","addTrack","ontrack","event","streams","onicecandidate","candidate","targetSocketId","endRoomVideoCall","disconnect","className","children","size","ref","autoPlay","playsInline","muted","onMouseDown","onMouseMove","onMouseUp","style","cursor","pointerEvents","onClick","Object","entries","map","_ref6","key","title","backgroundColor","min","max","value","onChange","parseInt","target","Array","from","_ref7","participant","el","values","has"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/components/ARVideoConsultation.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport WebRTCService from '../services/WebRTCService';\nimport './ARVideoConsultation.css';\n\nconst ARVideoConsultation = ({ \n    roomId, \n    userToken, \n    userRole = 'doctor',\n    onError = () => {},\n    onConnectionChange = () => {} \n}) => {\n    // State management\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState(new Map());\n    const [arSession, setArSession] = useState(null);\n    const [drawingMode, setDrawingMode] = useState(true);\n    const [currentTool, setCurrentTool] = useState('pen');\n    const [currentColor, setCurrentColor] = useState('#FF0000');\n    const [lineThickness, setLineThickness] = useState(3);\n    const [annotations, setAnnotations] = useState([]);\n    \n    // Drawing state\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [currentPath, setCurrentPath] = useState([]);\n    \n    // Video call state\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n    const [localAudioEnabled, setLocalAudioEnabled] = useState(true);\n    \n    // Refs\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const webrtcServiceRef = useRef(null);\n    const remoteVideoRefs = useRef(new Map());\n    \n    // Available drawing tools\n    const drawingTools = {\n        pen: { name: 'Pen', icon: '✏️' },\n        marker: { name: 'Marker', icon: '🖍️' },\n        arrow: { name: 'Arrow', icon: '➡️' },\n        circle: { name: 'Circle', icon: '⭕' },\n        rectangle: { name: 'Rectangle', icon: '⬛' },\n        text: { name: 'Text', icon: '📝' }\n    };\n    \n    const drawingColors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000'];\n    \n    // Initialize component\n    useEffect(() => {\n        if (roomId && userToken) {\n            initializeWebRTCService();\n        }\n        \n        return () => {\n            cleanup();\n        };\n    }, [roomId, userToken]);\n    \n    // Initialize WebRTC service\n    const initializeWebRTCService = async () => {\n        try {\n            // Create WebRTC service instance\n            webrtcServiceRef.current = new WebRTCService();\n            \n            // Setup event listeners\n            setupWebRTCListeners();\n            \n            // Initialize and connect\n            await webrtcServiceRef.current.initialize('http://localhost:3001', userToken);\n            \n            // Join room\n            await webrtcServiceRef.current.joinRoom(roomId, {\n                userRole,\n                capabilities: ['video', 'audio', 'ar-annotations']\n            });\n            \n            // Start video call\n            await webrtcServiceRef.current.startRoomVideoCall();\n            \n            setIsConnected(true);\n            onConnectionChange('connected');\n            \n        } catch (error) {\n            console.error('Failed to initialize WebRTC service:', error);\n            onError('Failed to connect to consultation service');\n            onConnectionChange('error');\n        }\n    };\n    \n    // Setup WebRTC event listeners\n    const setupWebRTCListeners = () => {\n        const service = webrtcServiceRef.current;\n        \n        // Connection events\n        service.on('initialized', () => {\n            console.log('WebRTC service initialized');\n        });\n        \n        service.on('disconnected', (data) => {\n            setIsConnected(false);\n            onConnectionChange('disconnected');\n        });\n        \n        // Video call events\n        service.on('video-call-started', () => {\n            console.log('Video call started');\n            const stream = service.getLocalStream();\n            setLocalStream(stream);\n            if (videoRef.current && stream) {\n                videoRef.current.srcObject = stream;\n            }\n            \n            // Create AR session when video call starts\n            createARSession();\n        });\n        \n        service.on('video-call-ended', () => {\n            console.log('Video call ended');\n            setLocalStream(null);\n            setRemoteStreams(new Map());\n        });\n        \n        // Stream events\n        service.on('remote-stream-added', ({ userId, stream }) => {\n            console.log('Remote stream added from user:', userId);\n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.set(userId, stream);\n                return newStreams;\n            });\n        });\n        \n        // Media control events\n        service.on('local-video-toggled', ({ enabled }) => {\n            setLocalVideoEnabled(enabled);\n        });\n        \n        service.on('local-audio-toggled', ({ enabled }) => {\n            setLocalAudioEnabled(enabled);\n        });\n        \n        // Room events\n        service.on('user-joined', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.set(data.user.id, data.user);\n                return newParticipants;\n            });\n        });\n        \n        service.on('user-left', (data) => {\n            setParticipants(prev => {\n                const newParticipants = new Map(prev);\n                newParticipants.delete(data.userId);\n                return newParticipants;\n            });\n            \n            setRemoteStreams(prev => {\n                const newStreams = new Map(prev);\n                newStreams.delete(data.userId);\n                return newStreams;\n            });\n        });\n        \n        // AR annotation events (keeping the existing AR functionality)\n        service.on('ar-annotation', handleIncomingAnnotation);\n        service.on('ar-annotations-cleared', handleAnnotationsCleared);\n        service.on('ar-error', handleARError);\n        \n        // Error handling\n        service.on('error', ({ type, error }) => {\n            console.error('WebRTC error:', type, error);\n            onError(`WebRTC error: ${error.message || error}`);\n        });\n    };\n    \n    // Audio/Video control functions\n    const toggleLocalVideo = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalVideo();\n            setLocalVideoEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    const toggleLocalAudio = () => {\n        if (webrtcServiceRef.current) {\n            const newState = webrtcServiceRef.current.toggleLocalAudio();\n            setLocalAudioEnabled(newState);\n            return newState;\n        }\n        return false;\n    };\n    \n    // AR Session Management\n    const createARSession = async () => {\n        try {\n            console.log('Creating AR session for room:', roomId);\n            \n            // Mock AR session creation for now (can be enhanced with real AR backend)\n            const mockARSession = {\n                id: `ar-session-${roomId}`,\n                roomId: roomId,\n                createdAt: new Date().toISOString(),\n                participants: [],\n                annotations: []\n            };\n            \n            setArSession(mockARSession);\n            \n            // Initialize annotation canvas\n            initializeAnnotationCanvas();\n            \n            console.log('AR session created successfully');\n            \n        } catch (error) {\n            console.error('Failed to create AR session:', error);\n            onError('Failed to initialize AR session');\n        }\n    };\n    \n    // Initialize annotation canvas for drawing\n    const initializeAnnotationCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.lineCap = 'round';\n            ctx.lineJoin = 'round';\n            ctx.globalAlpha = 0.8;\n            \n            // Clear any existing annotations\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            console.log('Annotation canvas initialized');\n        }\n    };\n    \n    // Initialize camera for field medics\n    const initializeCamera = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: { ideal: 1280 },\n                    height: { ideal: 720 },\n                    frameRate: { ideal: 30 }\n                },\n                audio: true\n            });\n            \n            localStreamRef.current = stream;\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n            }\n            \n        } catch (error) {\n            console.error('Failed to get user media:', error);\n            onError('Failed to access camera and microphone');\n        }\n    };\n    \n    // Join consultation room\n    const joinRoom = () => {\n        socketRef.current.emit('join-room', {\n            roomId,\n            roomType: 'ar-consultation',\n            metadata: {\n                userRole,\n                capabilities: ['video', 'ar-annotations']\n            }\n        });\n    };\n    \n    // Handle room joined\n    const handleRoomJoined = (data) => {\n        console.log('Joined room:', data);\n        \n        // Create AR session if doctor\n        if (userRole === 'doctor') {\n            createARSession();\n        }\n    };\n    \n    // Handle new participant\n    const handleUserJoined = (data) => {\n        console.log('User joined:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.set(data.user.id, data.user);\n        setParticipants(newParticipants);\n        \n        // Initialize WebRTC connection if needed\n        if (data.user.role === 'field_medic' && userRole === 'doctor') {\n            createPeerConnection(data.user.socketId);\n        }\n    };\n    \n    // Handle participant leaving\n    const handleUserLeft = (data) => {\n        console.log('User left:', data);\n        \n        const newParticipants = new Map(participants);\n        newParticipants.delete(data.userId);\n        setParticipants(newParticipants);\n        \n        // Clean up peer connection\n        const peerConnection = peerConnectionsRef.current.get(data.socketId);\n        if (peerConnection) {\n            peerConnection.close();\n            peerConnectionsRef.current.delete(data.socketId);\n        }\n    };\n    \n    \n    // Handle AR session created\n    const handleARSessionCreated = (data) => {\n        console.log('AR session created:', data);\n        setArSession(data);\n    };\n    \n    // Handle AR session available\n    const handleARSessionAvailable = (data) => {\n        console.log('AR session available:', data);\n        setArSession(data);\n    };\n    \n    // Drawing event handlers\n    const handleMouseDown = useCallback((e) => {\n        if (!drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        setIsDrawing(true);\n        setCurrentPath([{ x, y, timestamp: Date.now() }]);\n    }, [drawingMode, arSession]);\n    \n    const handleMouseMove = useCallback((e) => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = (e.clientX - rect.left) / rect.width;\n        const y = (e.clientY - rect.top) / rect.height;\n        \n        const newPath = [...currentPath, { x, y, timestamp: Date.now() }];\n        setCurrentPath(newPath);\n        \n        // Draw preview on canvas\n        drawPath(newPath, currentColor, lineThickness, true);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentColor, lineThickness]);\n    \n    const handleMouseUp = useCallback(() => {\n        if (!isDrawing || !drawingMode || !arSession) return;\n        \n        setIsDrawing(false);\n        \n        if (currentPath.length > 1) {\n            // Send annotation to server\n            const annotation = {\n                type: currentTool,\n                data: {\n                    points: currentPath,\n                    color: currentColor,\n                    thickness: lineThickness\n                },\n                metadata: {\n                    tool: currentTool,\n                    timestamp: Date.now()\n                }\n            };\n            \n            // Send annotation through WebRTC service\n            if (webrtcServiceRef.current) {\n                // Add to local annotations\n                const newAnnotation = {\n                    id: Date.now(),\n                    ...annotation,\n                    userId: user?.id || 'current-user',\n                    userName: user?.name || 'Current User'\n                };\n                setAnnotations(prev => [...prev, newAnnotation]);\n                \n                // Send to other participants (this would normally go through WebRTC data channels)\n                console.log('Sending AR annotation:', newAnnotation);\n                \n                // For now, we'll use a mock socket emit - this can be enhanced with real WebRTC data channels\n                try {\n                    // Mock annotation sync - in a real implementation, this would use WebRTC data channels\n                    console.log('AR annotation synchronized across participants');\n                } catch (error) {\n                    console.error('Failed to sync annotation:', error);\n                }\n            }\n        }\n        \n        setCurrentPath([]);\n    }, [isDrawing, drawingMode, arSession, currentPath, currentTool, currentColor, lineThickness]);\n    \n    // Draw path on canvas\n    const drawPath = (path, color, thickness, isPreview = false) => {\n        const canvas = canvasRef.current;\n        if (!canvas || path.length < 2) return;\n        \n        const ctx = canvas.getContext('2d');\n        ctx.globalAlpha = isPreview ? 0.7 : 1.0;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        \n        ctx.beginPath();\n        ctx.moveTo(path[0].x * canvas.width, path[0].y * canvas.height);\n        \n        for (let i = 1; i < path.length; i++) {\n            ctx.lineTo(path[i].x * canvas.width, path[i].y * canvas.height);\n        }\n        \n        ctx.stroke();\n    };\n    \n    // Handle incoming annotation\n    const handleIncomingAnnotation = (data) => {\n        console.log('Received annotation:', data);\n        \n        const annotation = data.annotation;\n        setAnnotations(prev => [...prev, annotation]);\n        \n        // Draw annotation on canvas\n        if (annotation.type === 'draw' && annotation.data.points) {\n            drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n        }\n    };\n    \n    // Handle annotation history\n    const handleAnnotationHistory = (data) => {\n        console.log('Received annotation history:', data);\n        setAnnotations(data.annotations);\n        \n        // Redraw all annotations\n        redrawAnnotations(data.annotations);\n    };\n    \n    // Handle annotations cleared\n    const handleAnnotationsCleared = (data) => {\n        console.log('Annotations cleared:', data);\n        setAnnotations([]);\n        clearCanvas();\n    };\n    \n    // Handle AR errors\n    const handleARError = (data) => {\n        console.error('AR Error:', data);\n        onError(`AR Error: ${data.message}`);\n    };\n    \n    // Clear all annotations\n    const clearAllAnnotations = () => {\n        if (arSession) {\n            socketRef.current.emit('ar-annotations-clear', { clearType: 'all' });\n        }\n    };\n    \n    // Clear canvas\n    const clearCanvas = () => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    \n    // Redraw all annotations\n    const redrawAnnotations = (annotationsToRedraw) => {\n        clearCanvas();\n        \n        annotationsToRedraw.forEach(annotation => {\n            if (annotation.type === 'draw' && annotation.data.points) {\n                drawPath(annotation.data.points, annotation.data.color, annotation.data.thickness);\n            }\n        });\n    };\n    \n    // WebRTC peer connection handling (simplified)\n    const createPeerConnection = (socketId) => {\n        const peerConnection = new RTCPeerConnection(rtcConfiguration);\n        peerConnectionsRef.current.set(socketId, peerConnection);\n        \n        // Add local stream\n        if (localStreamRef.current) {\n            localStreamRef.current.getTracks().forEach(track => {\n                peerConnection.addTrack(track, localStreamRef.current);\n            });\n        }\n        \n        // Handle remote stream\n        peerConnection.ontrack = (event) => {\n            if (videoRef.current) {\n                videoRef.current.srcObject = event.streams[0];\n            }\n        };\n        \n        // Handle ICE candidates\n        peerConnection.onicecandidate = (event) => {\n            if (event.candidate) {\n                socketRef.current.emit('ice-candidate', {\n                    candidate: event.candidate,\n                    targetSocketId: socketId\n                });\n            }\n        };\n        \n        return peerConnection;\n    };\n    \n    // Cleanup\n    const cleanup = async () => {\n        try {\n            if (webrtcServiceRef.current) {\n                await webrtcServiceRef.current.endRoomVideoCall();\n                await webrtcServiceRef.current.disconnect();\n            }\n        } catch (error) {\n            console.error('Error during cleanup:', error);\n        }\n    };\n    \n    return (\n        <div className=\"ar-video-consultation\">\n            {/* Header */}\n            <div className=\"consultation-header\">\n                <h2>🏥 AR Video Consultation</h2>\n                <div className=\"status-indicators\">\n                    <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>\n                        {isConnected ? '🟢 Connected' : '🔴 Disconnected'}\n                    </span>\n                    <span className=\"participant-count\">\n                        👥 {participants.size + 1} participants\n                    </span>\n                    {arSession && (\n                        <span className=\"ar-status\">\n                            ✨ AR Session Active\n                        </span>\n                    )}\n                </div>\n            </div>\n            \n            {/* Main video and annotation area */}\n            <div className=\"video-annotation-container\">\n                <div className=\"video-wrapper\">\n                    {/* Main Video Stream */}\n                    <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted={userRole === 'field_medic'}\n                        className=\"consultation-video\"\n                    />\n                    \n                    {/* AR Annotation Canvas Overlay */}\n                    <canvas\n                        ref={canvasRef}\n                        className=\"annotation-canvas\"\n                        width={1280}\n                        height={720}\n                        onMouseDown={handleMouseDown}\n                        onMouseMove={handleMouseMove}\n                        onMouseUp={handleMouseUp}\n                        style={{ \n                            cursor: drawingMode ? 'crosshair' : 'default',\n                            pointerEvents: userRole === 'doctor' ? 'auto' : 'none'\n                        }}\n                    />\n                    \n                    {/* Live Stream Status Indicator */}\n                    <div className=\"video-stream-status\">\n                        {localStream && (\n                            <div className=\"stream-indicator local\">\n                                <span className=\"indicator-dot\"></span>\n                                Live: {userRole === 'doctor' ? 'Doctor' : 'Field Medic'}\n                            </div>\n                        )}\n                        {remoteStreams.size > 0 && (\n                            <div className=\"stream-indicator remote\">\n                                <span className=\"indicator-dot\"></span>\n                                Remote: {remoteStreams.size} connected\n                            </div>\n                        )}\n                    </div>\n                    \n                    {/* AR Session Status */}\n                    {arSession && (\n                        <div className=\"ar-session-indicator\">\n                            <span className=\"ar-indicator\">✨</span>\n                            AR Session Active\n                        </div>\n                    )}\n                </div>\n                \n                {/* Drawing tools (only for doctors) */}\n                {userRole === 'doctor' && arSession && (\n                    <div className=\"drawing-tools\">\n                        <div className=\"tool-section\">\n                            <label>Drawing Mode:</label>\n                            <button \n                                className={drawingMode ? 'active' : ''}\n                                onClick={() => setDrawingMode(!drawingMode)}\n                            >\n                                {drawingMode ? '✏️ Drawing' : '👆 Viewing'}\n                            </button>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Tool:</label>\n                            <div className=\"tool-buttons\">\n                                {Object.entries(drawingTools).map(([key, tool]) => (\n                                    <button\n                                        key={key}\n                                        className={currentTool === key ? 'active' : ''}\n                                        onClick={() => setCurrentTool(key)}\n                                        title={tool.name}\n                                    >\n                                        {tool.icon}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Color:</label>\n                            <div className=\"color-picker\">\n                                {drawingColors.map(color => (\n                                    <button\n                                        key={color}\n                                        className={`color-button ${currentColor === color ? 'active' : ''}`}\n                                        style={{ backgroundColor: color }}\n                                        onClick={() => setCurrentColor(color)}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <label>Thickness:</label>\n                            <input\n                                type=\"range\"\n                                min=\"1\"\n                                max=\"10\"\n                                value={lineThickness}\n                                onChange={(e) => setLineThickness(parseInt(e.target.value))}\n                                className=\"thickness-slider\"\n                            />\n                            <span>{lineThickness}px</span>\n                        </div>\n                        \n                        <div className=\"tool-section\">\n                            <button \n                                className=\"clear-button\"\n                                onClick={clearAllAnnotations}\n                            >\n                                🗑️ Clear All\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n            \n            {/* Video Controls */}\n            <div className=\"video-controls\">\n                <button \n                    onClick={toggleLocalVideo}\n                    className={`control-btn ${localVideoEnabled ? 'enabled' : 'disabled'}`}\n                    title={localVideoEnabled ? 'Turn off video' : 'Turn on video'}\n                >\n                    {localVideoEnabled ? '📹 Video On' : '📹 Video Off'}\n                </button>\n                <button \n                    onClick={toggleLocalAudio}\n                    className={`control-btn ${localAudioEnabled ? 'enabled' : 'disabled'}`}\n                    title={localAudioEnabled ? 'Mute microphone' : 'Unmute microphone'}\n                >\n                    {localAudioEnabled ? '🎤 Mic On' : '🎤 Mic Off'}\n                </button>\n            </div>\n\n            {/* Remote Video Streams */}\n            {remoteStreams.size > 0 && (\n                <div className=\"remote-videos\">\n                    <h4>📹 Remote Participants</h4>\n                    <div className=\"remote-videos-grid\">\n                        {Array.from(remoteStreams.entries()).map(([userId, stream]) => {\n                            const participant = participants.get(userId);\n                            return (\n                                <div key={userId} className=\"remote-video-container\">\n                                    <video\n                                        ref={(el) => {\n                                            if (el && stream) {\n                                                el.srcObject = stream;\n                                                remoteVideoRefs.current.set(userId, el);\n                                            }\n                                        }}\n                                        autoPlay\n                                        playsInline\n                                        className=\"remote-video\"\n                                    />\n                                    <div className=\"remote-video-label\">\n                                        {participant?.name || `User ${userId}`}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n\n            {/* Participants panel */}\n            <div className=\"participants-panel\">\n                <h3>Participants</h3>\n                <div className=\"participant-list\">\n                    <div className=\"participant-item current-user\">\n                        <span className=\"participant-name\">You ({userRole})</span>\n                        <span className=\"participant-status\">\n                            {localVideoEnabled ? '📹' : '📹❌'} {localAudioEnabled ? '🎤' : '🎤❌'}\n                        </span>\n                    </div>\n                    {Array.from(participants.values()).map(participant => (\n                        <div key={participant.id} className=\"participant-item\">\n                            <span className=\"participant-name\">{participant.name}</span>\n                            <span className=\"participant-role\">{participant.role}</span>\n                            <span className=\"participant-status\">\n                                {remoteStreams.has(participant.id) ? '📹 🎤' : '❌'}\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            \n            {/* Annotation info */}\n            {annotations.length > 0 && (\n                <div className=\"annotation-info\">\n                    <span>📝 {annotations.length} annotations active</span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ARVideoConsultation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}