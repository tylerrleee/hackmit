{"ast":null,"code":"/**\n * Deployment-Aware Configuration Service\n * Handles configuration for multiple deployment targets (Local, Vercel, Railway, Render)\n */\n\nclass DeploymentConfig {\n  constructor() {\n    this.deploymentTarget = process.env.REACT_APP_DEPLOYMENT_TARGET || this.detectDeploymentTarget();\n    this.environment = process.env.NODE_ENV || 'development';\n    this.config = this.buildConfiguration();\n    console.log(`üéØ Deployment Target: ${this.deploymentTarget}`);\n    console.log(`üåç Environment: ${this.environment}`);\n  }\n  detectDeploymentTarget() {\n    if (typeof window === 'undefined') return 'local';\n    const hostname = window.location.hostname;\n    if (hostname.includes('vercel.app')) return 'vercel';\n    if (hostname.includes('railway.app')) return 'railway';\n    if (hostname.includes('render.com')) return 'render';\n    if (hostname.includes('localhost') || hostname.includes('127.0.0.1')) return 'local';\n    if (hostname.includes('ngrok')) return 'ngrok';\n    return 'custom';\n  }\n  buildConfiguration() {\n    const baseConfig = {\n      deploymentTarget: this.deploymentTarget,\n      environment: this.environment,\n      isProduction: this.environment === 'production',\n      isDevelopment: this.environment === 'development',\n      version: process.env.REACT_APP_VERSION || '1.0.0'\n    };\n\n    // Configuration per deployment target\n    const deploymentConfigs = {\n      local: {\n        apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:3001',\n        wsUrl: process.env.REACT_APP_WS_URL || 'ws://localhost:3001',\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'ws://localhost:8765',\n        allowedOrigins: ['http://localhost:3000', 'http://localhost:3001'],\n        enableDevTools: true,\n        enableServiceWorker: false\n      },\n      vercel: {\n        apiUrl: process.env.REACT_APP_API_URL || this.getVercelApiUrl(),\n        wsUrl: process.env.REACT_APP_WS_URL || this.getVercelWsUrl(),\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || this.getVercelArBridgeUrl(),\n        allowedOrigins: this.getVercelAllowedOrigins(),\n        enableDevTools: false,\n        enableServiceWorker: true,\n        enableOfflineMode: true,\n        corsMode: 'cors'\n      },\n      railway: {\n        apiUrl: process.env.REACT_APP_API_URL || 'https://webrtc-surgical-backend.railway.app',\n        wsUrl: process.env.REACT_APP_WS_URL || 'wss://webrtc-surgical-backend.railway.app',\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'wss://webrtc-surgical-bridge.railway.app',\n        allowedOrigins: ['https://*.railway.app'],\n        enableDevTools: false,\n        enableServiceWorker: true\n      },\n      render: {\n        apiUrl: process.env.REACT_APP_API_URL || 'https://webrtc-surgical-backend.onrender.com',\n        wsUrl: process.env.REACT_APP_WS_URL || 'wss://webrtc-surgical-backend.onrender.com',\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'wss://webrtc-surgical-bridge.onrender.com',\n        allowedOrigins: ['https://*.onrender.com'],\n        enableDevTools: false,\n        enableServiceWorker: true\n      },\n      ngrok: {\n        apiUrl: process.env.REACT_APP_API_URL || this.getNgrokApiUrl(),\n        wsUrl: process.env.REACT_APP_WS_URL || this.getNgrokWsUrl(),\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || this.getNgrokArBridgeUrl(),\n        allowedOrigins: ['https://*.ngrok-free.app'],\n        enableDevTools: true,\n        enableServiceWorker: false\n      },\n      custom: {\n        apiUrl: process.env.REACT_APP_API_URL || window.location.origin,\n        wsUrl: process.env.REACT_APP_WS_URL || `wss://${window.location.host}`,\n        arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || `wss://${window.location.host}:8765`,\n        allowedOrigins: [window.location.origin],\n        enableDevTools: false,\n        enableServiceWorker: true\n      }\n    };\n    return {\n      ...baseConfig,\n      ...deploymentConfigs[this.deploymentTarget],\n      // Add connection retry configuration\n      connectionRetry: {\n        maxAttempts: this.deploymentTarget === 'local' ? 3 : 10,\n        retryDelay: this.deploymentTarget === 'local' ? 1000 : 3000,\n        backoffFactor: 1.5\n      },\n      // Add feature flags\n      features: {\n        enableVideoChat: true,\n        enableARAnnotations: true,\n        enableTranslation: process.env.REACT_APP_ENABLE_TRANSLATION === 'true',\n        enableOfflineMode: process.env.REACT_APP_ENABLE_OFFLINE_MODE === 'true' || this.deploymentTarget === 'vercel',\n        enablePWA: process.env.REACT_APP_PWA_ENABLED === 'true',\n        enableAnalytics: this.environment === 'production'\n      }\n    };\n  }\n\n  // Vercel-specific URL resolution\n  getVercelApiUrl() {\n    var _window$__RUNTIME_CON;\n    if (typeof window === 'undefined') return '';\n\n    // Try to read from runtime config if available\n    if ((_window$__RUNTIME_CON = window.__RUNTIME_CONFIG__) !== null && _window$__RUNTIME_CON !== void 0 && _window$__RUNTIME_CON.apiUrl) {\n      return window.__RUNTIME_CONFIG__.apiUrl;\n    }\n\n    // Fallback to environment or default\n    return process.env.REACT_APP_API_URL || 'https://your-backend-service.railway.app';\n  }\n  getVercelWsUrl() {\n    const apiUrl = this.getVercelApiUrl();\n    return apiUrl.replace('https://', 'wss://').replace('http://', 'ws://');\n  }\n  getVercelArBridgeUrl() {\n    var _window$__RUNTIME_CON2;\n    if ((_window$__RUNTIME_CON2 = window.__RUNTIME_CONFIG__) !== null && _window$__RUNTIME_CON2 !== void 0 && _window$__RUNTIME_CON2.arBridgeUrl) {\n      return window.__RUNTIME_CONFIG__.arBridgeUrl;\n    }\n    return process.env.REACT_APP_AR_BRIDGE_URL || 'wss://your-bridge-service.railway.app';\n  }\n  getVercelAllowedOrigins() {\n    var _this$config;\n    const origins = ['https://*.vercel.app'];\n    if ((_this$config = this.config) !== null && _this$config !== void 0 && _this$config.apiUrl) {\n      const apiDomain = new URL(this.config.apiUrl).origin;\n      origins.push(apiDomain);\n    }\n    return origins;\n  }\n\n  // Ngrok-specific URL resolution\n  getNgrokApiUrl() {\n    var _window$__EXTERNAL_CO;\n    // For ngrok, try to detect from existing external config\n    if ((_window$__EXTERNAL_CO = window.__EXTERNAL_CONFIG__) !== null && _window$__EXTERNAL_CO !== void 0 && _window$__EXTERNAL_CO.apiUrl) {\n      return window.__EXTERNAL_CONFIG__.apiUrl;\n    }\n    return process.env.REACT_APP_API_URL || 'https://your-backend.ngrok-free.app';\n  }\n  getNgrokWsUrl() {\n    const apiUrl = this.getNgrokApiUrl();\n    return apiUrl.replace('https://', 'wss://').replace('http://', 'ws://');\n  }\n  getNgrokArBridgeUrl() {\n    var _window$__EXTERNAL_CO2;\n    if ((_window$__EXTERNAL_CO2 = window.__EXTERNAL_CONFIG__) !== null && _window$__EXTERNAL_CO2 !== void 0 && _window$__EXTERNAL_CO2.arBridgeUrl) {\n      return window.__EXTERNAL_CONFIG__.arBridgeUrl;\n    }\n    return process.env.REACT_APP_AR_BRIDGE_URL || 'wss://your-bridge.ngrok-free.app';\n  }\n\n  // Configuration getters\n  getApiUrl() {\n    return this.config.apiUrl;\n  }\n  getWsUrl() {\n    return this.config.wsUrl;\n  }\n  getArBridgeUrl() {\n    return this.config.arBridgeUrl;\n  }\n  getAllowedOrigins() {\n    return this.config.allowedOrigins;\n  }\n  getConnectionRetryConfig() {\n    return this.config.connectionRetry;\n  }\n  getFeatures() {\n    return this.config.features;\n  }\n  isFeatureEnabled(featureName) {\n    return this.config.features[featureName] || false;\n  }\n\n  // Health check for external services\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.getApiUrl()}/api/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 5000\n      });\n      return {\n        healthy: response.ok,\n        status: response.status,\n        deploymentTarget: this.deploymentTarget\n      };\n    } catch (error) {\n      console.warn('Health check failed:', error.message);\n      return {\n        healthy: false,\n        error: error.message,\n        deploymentTarget: this.deploymentTarget\n      };\n    }\n  }\n\n  // Development helpers\n  logConfiguration() {\n    if (this.config.enableDevTools) {\n      console.group('üîß Deployment Configuration');\n      console.log('Target:', this.deploymentTarget);\n      console.log('Environment:', this.environment);\n      console.log('API URL:', this.getApiUrl());\n      console.log('WebSocket URL:', this.getWsUrl());\n      console.log('AR Bridge URL:', this.getArBridgeUrl());\n      console.log('Features:', this.getFeatures());\n      console.groupEnd();\n    }\n  }\n}\n\n// Create singleton instance\nconst deploymentConfig = new DeploymentConfig();\n\n// Log configuration in development\nif (deploymentConfig.config.enableDevTools) {\n  deploymentConfig.logConfiguration();\n}\nexport default deploymentConfig;","map":{"version":3,"names":["DeploymentConfig","constructor","deploymentTarget","process","env","REACT_APP_DEPLOYMENT_TARGET","detectDeploymentTarget","environment","NODE_ENV","config","buildConfiguration","console","log","window","hostname","location","includes","baseConfig","isProduction","isDevelopment","version","REACT_APP_VERSION","deploymentConfigs","local","apiUrl","REACT_APP_API_URL","wsUrl","REACT_APP_WS_URL","arBridgeUrl","REACT_APP_AR_BRIDGE_URL","allowedOrigins","enableDevTools","enableServiceWorker","vercel","getVercelApiUrl","getVercelWsUrl","getVercelArBridgeUrl","getVercelAllowedOrigins","enableOfflineMode","corsMode","railway","render","ngrok","getNgrokApiUrl","getNgrokWsUrl","getNgrokArBridgeUrl","custom","origin","host","connectionRetry","maxAttempts","retryDelay","backoffFactor","features","enableVideoChat","enableARAnnotations","enableTranslation","REACT_APP_ENABLE_TRANSLATION","REACT_APP_ENABLE_OFFLINE_MODE","enablePWA","REACT_APP_PWA_ENABLED","enableAnalytics","_window$__RUNTIME_CON","__RUNTIME_CONFIG__","replace","_window$__RUNTIME_CON2","_this$config","origins","apiDomain","URL","push","_window$__EXTERNAL_CO","__EXTERNAL_CONFIG__","_window$__EXTERNAL_CO2","getApiUrl","getWsUrl","getArBridgeUrl","getAllowedOrigins","getConnectionRetryConfig","getFeatures","isFeatureEnabled","featureName","healthCheck","response","fetch","method","headers","timeout","healthy","ok","status","error","warn","message","logConfiguration","group","groupEnd","deploymentConfig"],"sources":["/Users/tienle/Documents/Coding/hackmit/webrtc_surgical_platform/frontend/src/config/deploymentConfig.js"],"sourcesContent":["/**\n * Deployment-Aware Configuration Service\n * Handles configuration for multiple deployment targets (Local, Vercel, Railway, Render)\n */\n\nclass DeploymentConfig {\n    constructor() {\n        this.deploymentTarget = process.env.REACT_APP_DEPLOYMENT_TARGET || this.detectDeploymentTarget();\n        this.environment = process.env.NODE_ENV || 'development';\n        this.config = this.buildConfiguration();\n        \n        console.log(`üéØ Deployment Target: ${this.deploymentTarget}`);\n        console.log(`üåç Environment: ${this.environment}`);\n    }\n\n    detectDeploymentTarget() {\n        if (typeof window === 'undefined') return 'local';\n        \n        const hostname = window.location.hostname;\n        \n        if (hostname.includes('vercel.app')) return 'vercel';\n        if (hostname.includes('railway.app')) return 'railway';\n        if (hostname.includes('render.com')) return 'render';\n        if (hostname.includes('localhost') || hostname.includes('127.0.0.1')) return 'local';\n        if (hostname.includes('ngrok')) return 'ngrok';\n        \n        return 'custom';\n    }\n\n    buildConfiguration() {\n        const baseConfig = {\n            deploymentTarget: this.deploymentTarget,\n            environment: this.environment,\n            isProduction: this.environment === 'production',\n            isDevelopment: this.environment === 'development',\n            version: process.env.REACT_APP_VERSION || '1.0.0'\n        };\n\n        // Configuration per deployment target\n        const deploymentConfigs = {\n            local: {\n                apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:3001',\n                wsUrl: process.env.REACT_APP_WS_URL || 'ws://localhost:3001',\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'ws://localhost:8765',\n                allowedOrigins: ['http://localhost:3000', 'http://localhost:3001'],\n                enableDevTools: true,\n                enableServiceWorker: false\n            },\n            \n            vercel: {\n                apiUrl: process.env.REACT_APP_API_URL || this.getVercelApiUrl(),\n                wsUrl: process.env.REACT_APP_WS_URL || this.getVercelWsUrl(),\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || this.getVercelArBridgeUrl(),\n                allowedOrigins: this.getVercelAllowedOrigins(),\n                enableDevTools: false,\n                enableServiceWorker: true,\n                enableOfflineMode: true,\n                corsMode: 'cors'\n            },\n\n            railway: {\n                apiUrl: process.env.REACT_APP_API_URL || 'https://webrtc-surgical-backend.railway.app',\n                wsUrl: process.env.REACT_APP_WS_URL || 'wss://webrtc-surgical-backend.railway.app',\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'wss://webrtc-surgical-bridge.railway.app',\n                allowedOrigins: ['https://*.railway.app'],\n                enableDevTools: false,\n                enableServiceWorker: true\n            },\n\n            render: {\n                apiUrl: process.env.REACT_APP_API_URL || 'https://webrtc-surgical-backend.onrender.com',\n                wsUrl: process.env.REACT_APP_WS_URL || 'wss://webrtc-surgical-backend.onrender.com',\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || 'wss://webrtc-surgical-bridge.onrender.com',\n                allowedOrigins: ['https://*.onrender.com'],\n                enableDevTools: false,\n                enableServiceWorker: true\n            },\n\n            ngrok: {\n                apiUrl: process.env.REACT_APP_API_URL || this.getNgrokApiUrl(),\n                wsUrl: process.env.REACT_APP_WS_URL || this.getNgrokWsUrl(),\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || this.getNgrokArBridgeUrl(),\n                allowedOrigins: ['https://*.ngrok-free.app'],\n                enableDevTools: true,\n                enableServiceWorker: false\n            },\n\n            custom: {\n                apiUrl: process.env.REACT_APP_API_URL || window.location.origin,\n                wsUrl: process.env.REACT_APP_WS_URL || `wss://${window.location.host}`,\n                arBridgeUrl: process.env.REACT_APP_AR_BRIDGE_URL || `wss://${window.location.host}:8765`,\n                allowedOrigins: [window.location.origin],\n                enableDevTools: false,\n                enableServiceWorker: true\n            }\n        };\n\n        return {\n            ...baseConfig,\n            ...deploymentConfigs[this.deploymentTarget],\n            // Add connection retry configuration\n            connectionRetry: {\n                maxAttempts: this.deploymentTarget === 'local' ? 3 : 10,\n                retryDelay: this.deploymentTarget === 'local' ? 1000 : 3000,\n                backoffFactor: 1.5\n            },\n            // Add feature flags\n            features: {\n                enableVideoChat: true,\n                enableARAnnotations: true,\n                enableTranslation: process.env.REACT_APP_ENABLE_TRANSLATION === 'true',\n                enableOfflineMode: process.env.REACT_APP_ENABLE_OFFLINE_MODE === 'true' || this.deploymentTarget === 'vercel',\n                enablePWA: process.env.REACT_APP_PWA_ENABLED === 'true',\n                enableAnalytics: this.environment === 'production'\n            }\n        };\n    }\n\n    // Vercel-specific URL resolution\n    getVercelApiUrl() {\n        if (typeof window === 'undefined') return '';\n        \n        // Try to read from runtime config if available\n        if (window.__RUNTIME_CONFIG__?.apiUrl) {\n            return window.__RUNTIME_CONFIG__.apiUrl;\n        }\n        \n        // Fallback to environment or default\n        return process.env.REACT_APP_API_URL || 'https://your-backend-service.railway.app';\n    }\n\n    getVercelWsUrl() {\n        const apiUrl = this.getVercelApiUrl();\n        return apiUrl.replace('https://', 'wss://').replace('http://', 'ws://');\n    }\n\n    getVercelArBridgeUrl() {\n        if (window.__RUNTIME_CONFIG__?.arBridgeUrl) {\n            return window.__RUNTIME_CONFIG__.arBridgeUrl;\n        }\n        return process.env.REACT_APP_AR_BRIDGE_URL || 'wss://your-bridge-service.railway.app';\n    }\n\n    getVercelAllowedOrigins() {\n        const origins = ['https://*.vercel.app'];\n        if (this.config?.apiUrl) {\n            const apiDomain = new URL(this.config.apiUrl).origin;\n            origins.push(apiDomain);\n        }\n        return origins;\n    }\n\n    // Ngrok-specific URL resolution\n    getNgrokApiUrl() {\n        // For ngrok, try to detect from existing external config\n        if (window.__EXTERNAL_CONFIG__?.apiUrl) {\n            return window.__EXTERNAL_CONFIG__.apiUrl;\n        }\n        return process.env.REACT_APP_API_URL || 'https://your-backend.ngrok-free.app';\n    }\n\n    getNgrokWsUrl() {\n        const apiUrl = this.getNgrokApiUrl();\n        return apiUrl.replace('https://', 'wss://').replace('http://', 'ws://');\n    }\n\n    getNgrokArBridgeUrl() {\n        if (window.__EXTERNAL_CONFIG__?.arBridgeUrl) {\n            return window.__EXTERNAL_CONFIG__.arBridgeUrl;\n        }\n        return process.env.REACT_APP_AR_BRIDGE_URL || 'wss://your-bridge.ngrok-free.app';\n    }\n\n    // Configuration getters\n    getApiUrl() {\n        return this.config.apiUrl;\n    }\n\n    getWsUrl() {\n        return this.config.wsUrl;\n    }\n\n    getArBridgeUrl() {\n        return this.config.arBridgeUrl;\n    }\n\n    getAllowedOrigins() {\n        return this.config.allowedOrigins;\n    }\n\n    getConnectionRetryConfig() {\n        return this.config.connectionRetry;\n    }\n\n    getFeatures() {\n        return this.config.features;\n    }\n\n    isFeatureEnabled(featureName) {\n        return this.config.features[featureName] || false;\n    }\n\n    // Health check for external services\n    async healthCheck() {\n        try {\n            const response = await fetch(`${this.getApiUrl()}/api/health`, {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' },\n                timeout: 5000\n            });\n            \n            return {\n                healthy: response.ok,\n                status: response.status,\n                deploymentTarget: this.deploymentTarget\n            };\n        } catch (error) {\n            console.warn('Health check failed:', error.message);\n            return {\n                healthy: false,\n                error: error.message,\n                deploymentTarget: this.deploymentTarget\n            };\n        }\n    }\n\n    // Development helpers\n    logConfiguration() {\n        if (this.config.enableDevTools) {\n            console.group('üîß Deployment Configuration');\n            console.log('Target:', this.deploymentTarget);\n            console.log('Environment:', this.environment);\n            console.log('API URL:', this.getApiUrl());\n            console.log('WebSocket URL:', this.getWsUrl());\n            console.log('AR Bridge URL:', this.getArBridgeUrl());\n            console.log('Features:', this.getFeatures());\n            console.groupEnd();\n        }\n    }\n}\n\n// Create singleton instance\nconst deploymentConfig = new DeploymentConfig();\n\n// Log configuration in development\nif (deploymentConfig.config.enableDevTools) {\n    deploymentConfig.logConfiguration();\n}\n\nexport default deploymentConfig;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,gBAAgB,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B,IAAI,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAChG,IAAI,CAACC,WAAW,GAAGJ,OAAO,CAACC,GAAG,CAACI,QAAQ,IAAI,aAAa;IACxD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAEvCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,IAAI,CAACV,gBAAgB,EAAE,CAAC;IAC7DS,OAAO,CAACC,GAAG,CAAC,mBAAmB,IAAI,CAACL,WAAW,EAAE,CAAC;EACtD;EAEAD,sBAAsBA,CAAA,EAAG;IACrB,IAAI,OAAOO,MAAM,KAAK,WAAW,EAAE,OAAO,OAAO;IAEjD,MAAMC,QAAQ,GAAGD,MAAM,CAACE,QAAQ,CAACD,QAAQ;IAEzC,IAAIA,QAAQ,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,QAAQ;IACpD,IAAIF,QAAQ,CAACE,QAAQ,CAAC,aAAa,CAAC,EAAE,OAAO,SAAS;IACtD,IAAIF,QAAQ,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,QAAQ;IACpD,IAAIF,QAAQ,CAACE,QAAQ,CAAC,WAAW,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE,OAAO,OAAO;IACpF,IAAIF,QAAQ,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,OAAO;IAE9C,OAAO,QAAQ;EACnB;EAEAN,kBAAkBA,CAAA,EAAG;IACjB,MAAMO,UAAU,GAAG;MACff,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCK,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BW,YAAY,EAAE,IAAI,CAACX,WAAW,KAAK,YAAY;MAC/CY,aAAa,EAAE,IAAI,CAACZ,WAAW,KAAK,aAAa;MACjDa,OAAO,EAAEjB,OAAO,CAACC,GAAG,CAACiB,iBAAiB,IAAI;IAC9C,CAAC;;IAED;IACA,MAAMC,iBAAiB,GAAG;MACtBC,KAAK,EAAE;QACHC,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,uBAAuB;QAChEC,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,qBAAqB;QAC5DC,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,qBAAqB;QACzEC,cAAc,EAAE,CAAC,uBAAuB,EAAE,uBAAuB,CAAC;QAClEC,cAAc,EAAE,IAAI;QACpBC,mBAAmB,EAAE;MACzB,CAAC;MAEDC,MAAM,EAAE;QACJT,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,IAAI,CAACS,eAAe,CAAC,CAAC;QAC/DR,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,IAAI,CAACQ,cAAc,CAAC,CAAC;QAC5DP,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,IAAI,CAACO,oBAAoB,CAAC,CAAC;QAC/EN,cAAc,EAAE,IAAI,CAACO,uBAAuB,CAAC,CAAC;QAC9CN,cAAc,EAAE,KAAK;QACrBC,mBAAmB,EAAE,IAAI;QACzBM,iBAAiB,EAAE,IAAI;QACvBC,QAAQ,EAAE;MACd,CAAC;MAEDC,OAAO,EAAE;QACLhB,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,6CAA6C;QACtFC,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,2CAA2C;QAClFC,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,0CAA0C;QAC9FC,cAAc,EAAE,CAAC,uBAAuB,CAAC;QACzCC,cAAc,EAAE,KAAK;QACrBC,mBAAmB,EAAE;MACzB,CAAC;MAEDS,MAAM,EAAE;QACJjB,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,8CAA8C;QACvFC,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,4CAA4C;QACnFC,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,2CAA2C;QAC/FC,cAAc,EAAE,CAAC,wBAAwB,CAAC;QAC1CC,cAAc,EAAE,KAAK;QACrBC,mBAAmB,EAAE;MACzB,CAAC;MAEDU,KAAK,EAAE;QACHlB,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,IAAI,CAACkB,cAAc,CAAC,CAAC;QAC9DjB,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,IAAI,CAACiB,aAAa,CAAC,CAAC;QAC3DhB,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,IAAI,CAACgB,mBAAmB,CAAC,CAAC;QAC9Ef,cAAc,EAAE,CAAC,0BAA0B,CAAC;QAC5CC,cAAc,EAAE,IAAI;QACpBC,mBAAmB,EAAE;MACzB,CAAC;MAEDc,MAAM,EAAE;QACJtB,MAAM,EAAErB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAIZ,MAAM,CAACE,QAAQ,CAACgC,MAAM;QAC/DrB,KAAK,EAAEvB,OAAO,CAACC,GAAG,CAACuB,gBAAgB,IAAI,SAASd,MAAM,CAACE,QAAQ,CAACiC,IAAI,EAAE;QACtEpB,WAAW,EAAEzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,SAAShB,MAAM,CAACE,QAAQ,CAACiC,IAAI,OAAO;QACxFlB,cAAc,EAAE,CAACjB,MAAM,CAACE,QAAQ,CAACgC,MAAM,CAAC;QACxChB,cAAc,EAAE,KAAK;QACrBC,mBAAmB,EAAE;MACzB;IACJ,CAAC;IAED,OAAO;MACH,GAAGf,UAAU;MACb,GAAGK,iBAAiB,CAAC,IAAI,CAACpB,gBAAgB,CAAC;MAC3C;MACA+C,eAAe,EAAE;QACbC,WAAW,EAAE,IAAI,CAAChD,gBAAgB,KAAK,OAAO,GAAG,CAAC,GAAG,EAAE;QACvDiD,UAAU,EAAE,IAAI,CAACjD,gBAAgB,KAAK,OAAO,GAAG,IAAI,GAAG,IAAI;QAC3DkD,aAAa,EAAE;MACnB,CAAC;MACD;MACAC,QAAQ,EAAE;QACNC,eAAe,EAAE,IAAI;QACrBC,mBAAmB,EAAE,IAAI;QACzBC,iBAAiB,EAAErD,OAAO,CAACC,GAAG,CAACqD,4BAA4B,KAAK,MAAM;QACtEnB,iBAAiB,EAAEnC,OAAO,CAACC,GAAG,CAACsD,6BAA6B,KAAK,MAAM,IAAI,IAAI,CAACxD,gBAAgB,KAAK,QAAQ;QAC7GyD,SAAS,EAAExD,OAAO,CAACC,GAAG,CAACwD,qBAAqB,KAAK,MAAM;QACvDC,eAAe,EAAE,IAAI,CAACtD,WAAW,KAAK;MAC1C;IACJ,CAAC;EACL;;EAEA;EACA2B,eAAeA,CAAA,EAAG;IAAA,IAAA4B,qBAAA;IACd,IAAI,OAAOjD,MAAM,KAAK,WAAW,EAAE,OAAO,EAAE;;IAE5C;IACA,KAAAiD,qBAAA,GAAIjD,MAAM,CAACkD,kBAAkB,cAAAD,qBAAA,eAAzBA,qBAAA,CAA2BtC,MAAM,EAAE;MACnC,OAAOX,MAAM,CAACkD,kBAAkB,CAACvC,MAAM;IAC3C;;IAEA;IACA,OAAOrB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,0CAA0C;EACtF;EAEAU,cAAcA,CAAA,EAAG;IACb,MAAMX,MAAM,GAAG,IAAI,CAACU,eAAe,CAAC,CAAC;IACrC,OAAOV,MAAM,CAACwC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC;EAC3E;EAEA5B,oBAAoBA,CAAA,EAAG;IAAA,IAAA6B,sBAAA;IACnB,KAAAA,sBAAA,GAAIpD,MAAM,CAACkD,kBAAkB,cAAAE,sBAAA,eAAzBA,sBAAA,CAA2BrC,WAAW,EAAE;MACxC,OAAOf,MAAM,CAACkD,kBAAkB,CAACnC,WAAW;IAChD;IACA,OAAOzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,uCAAuC;EACzF;EAEAQ,uBAAuBA,CAAA,EAAG;IAAA,IAAA6B,YAAA;IACtB,MAAMC,OAAO,GAAG,CAAC,sBAAsB,CAAC;IACxC,KAAAD,YAAA,GAAI,IAAI,CAACzD,MAAM,cAAAyD,YAAA,eAAXA,YAAA,CAAa1C,MAAM,EAAE;MACrB,MAAM4C,SAAS,GAAG,IAAIC,GAAG,CAAC,IAAI,CAAC5D,MAAM,CAACe,MAAM,CAAC,CAACuB,MAAM;MACpDoB,OAAO,CAACG,IAAI,CAACF,SAAS,CAAC;IAC3B;IACA,OAAOD,OAAO;EAClB;;EAEA;EACAxB,cAAcA,CAAA,EAAG;IAAA,IAAA4B,qBAAA;IACb;IACA,KAAAA,qBAAA,GAAI1D,MAAM,CAAC2D,mBAAmB,cAAAD,qBAAA,eAA1BA,qBAAA,CAA4B/C,MAAM,EAAE;MACpC,OAAOX,MAAM,CAAC2D,mBAAmB,CAAChD,MAAM;IAC5C;IACA,OAAOrB,OAAO,CAACC,GAAG,CAACqB,iBAAiB,IAAI,qCAAqC;EACjF;EAEAmB,aAAaA,CAAA,EAAG;IACZ,MAAMpB,MAAM,GAAG,IAAI,CAACmB,cAAc,CAAC,CAAC;IACpC,OAAOnB,MAAM,CAACwC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC;EAC3E;EAEAnB,mBAAmBA,CAAA,EAAG;IAAA,IAAA4B,sBAAA;IAClB,KAAAA,sBAAA,GAAI5D,MAAM,CAAC2D,mBAAmB,cAAAC,sBAAA,eAA1BA,sBAAA,CAA4B7C,WAAW,EAAE;MACzC,OAAOf,MAAM,CAAC2D,mBAAmB,CAAC5C,WAAW;IACjD;IACA,OAAOzB,OAAO,CAACC,GAAG,CAACyB,uBAAuB,IAAI,kCAAkC;EACpF;;EAEA;EACA6C,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACjE,MAAM,CAACe,MAAM;EAC7B;EAEAmD,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAClE,MAAM,CAACiB,KAAK;EAC5B;EAEAkD,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACnE,MAAM,CAACmB,WAAW;EAClC;EAEAiD,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACpE,MAAM,CAACqB,cAAc;EACrC;EAEAgD,wBAAwBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACrE,MAAM,CAACwC,eAAe;EACtC;EAEA8B,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACtE,MAAM,CAAC4C,QAAQ;EAC/B;EAEA2B,gBAAgBA,CAACC,WAAW,EAAE;IAC1B,OAAO,IAAI,CAACxE,MAAM,CAAC4C,QAAQ,CAAC4B,WAAW,CAAC,IAAI,KAAK;EACrD;;EAEA;EACA,MAAMC,WAAWA,CAAA,EAAG;IAChB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACV,SAAS,CAAC,CAAC,aAAa,EAAE;QAC3DW,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,OAAO,EAAE;MACb,CAAC,CAAC;MAEF,OAAO;QACHC,OAAO,EAAEL,QAAQ,CAACM,EAAE;QACpBC,MAAM,EAAEP,QAAQ,CAACO,MAAM;QACvBxF,gBAAgB,EAAE,IAAI,CAACA;MAC3B,CAAC;IACL,CAAC,CAAC,OAAOyF,KAAK,EAAE;MACZhF,OAAO,CAACiF,IAAI,CAAC,sBAAsB,EAAED,KAAK,CAACE,OAAO,CAAC;MACnD,OAAO;QACHL,OAAO,EAAE,KAAK;QACdG,KAAK,EAAEA,KAAK,CAACE,OAAO;QACpB3F,gBAAgB,EAAE,IAAI,CAACA;MAC3B,CAAC;IACL;EACJ;;EAEA;EACA4F,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAACrF,MAAM,CAACsB,cAAc,EAAE;MAC5BpB,OAAO,CAACoF,KAAK,CAAC,6BAA6B,CAAC;MAC5CpF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,IAAI,CAACV,gBAAgB,CAAC;MAC7CS,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACL,WAAW,CAAC;MAC7CI,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC8D,SAAS,CAAC,CAAC,CAAC;MACzC/D,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC+D,QAAQ,CAAC,CAAC,CAAC;MAC9ChE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACgE,cAAc,CAAC,CAAC,CAAC;MACpDjE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACmE,WAAW,CAAC,CAAC,CAAC;MAC5CpE,OAAO,CAACqF,QAAQ,CAAC,CAAC;IACtB;EACJ;AACJ;;AAEA;AACA,MAAMC,gBAAgB,GAAG,IAAIjG,gBAAgB,CAAC,CAAC;;AAE/C;AACA,IAAIiG,gBAAgB,CAACxF,MAAM,CAACsB,cAAc,EAAE;EACxCkE,gBAAgB,CAACH,gBAAgB,CAAC,CAAC;AACvC;AAEA,eAAeG,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}